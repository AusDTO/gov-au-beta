/*

UI-Kit version: 1.8.0

*/

$gov-ui-kit-image-base-url: '../latest/img/' !default;

$base-z-index: 0;
$base-border-radius: 3px;
$tiny-border-radius: 1px;
$large-border-radius: ($base-border-radius * 4);

$transition-timing: .2s;
$transition-timing-fast: $transition-timing / 2;
$transition-easing: ease-in-out;

$base-serif: 'Book Antiqua', Georgia, 'Bitstream Vera Serif', serif;
$base-sans-serif: 'Open Sans', Verdana, 'Bitstream Vera Sans', sans-serif;
$base-monospace: 'Lucida Sans Typewriter', 'Lucida Console', Monaco, 'Bitstream Vera Sans Mono', monospace;

$base-font-family: $base-sans-serif;

// Leading/line-height.
$base-leading: 1.6;
$base-heading-leading: 1.4;
$small-leading: 1.2;
$double-leading: 2;

// Base spacing, relative to leading.
$base-spacing: $base-leading * 1em;
$large-spacing: $base-spacing * 2;
$medium-spacing: $base-spacing * 0.75;
$small-spacing: $base-spacing / 2;
$tiny-spacing: $base-spacing / 4;

// Font weights
$base-font-weight: 400;
$bold-font-weight: 700;
$heading-font-weight: $bold-font-weight;

// Font sizes
$smaller-font-size: 62.5%;
$small-font-size: 87.5%;
$large-font-size: 150%;

// Font styles
$base-font-style: normal;

/*
Colours

A basic palette of colours that are clear and accessible.

We are finalising the colours &mdash; for help <a href="https://github.com/AusDTO/gov-au-ui-kit/issues" rel="external">log a GitHub issue</a>.

Style guide: Colours
*/

/*
Colours palette

Lighter and darker versions are percentage variations of the original colours (Sass variables are provided for reference).

<div class="guide-colour-examples">
  <div class="guide-colour">
    <div class="swatch bg-non-black"></div>
    <p class="text"><strong>Non-black</strong><br/>
      <small>$non-black<br/>#313131</small></p>
  </div>

  <div class="guide-colour">
    <div class="swatch bg-grey"></div>
    <p class="text"><strong>Grey</strong><br/>
      <small>$grey<br/> #717171</small></p>
  </div>

  <div class="guide-colour">
    <div class="swatch bg-light-grey"></div>
    <p class="text"><strong>Light-grey</strong><br/>
      <small>$light-grey<br/> #BEBEBE</small></p>
  </div>

  <div class="guide-colour">
    <div class="swatch bg-non-white"></div>
    <p class="text"><strong>Non-white</strong><br/>
      <small>$non-white<br/> #F0F3F5</small></p>
  </div>

  <div class="guide-colour">
    <div class="swatch bg-darker-aqua"></div>
    <p class="text"><strong>Darker-aqua</strong><br/>
      <small>$darker-aqua<br/> #115361</small></p>
  </div>

  <div class="guide-colour">
    <div class="swatch bg-dark-aqua"></div>
    <p class="text"><strong>Dark-aqua</strong><br/>
      <small>$dark-aqua<br/> #146577</small></p>
  </div>

  <div class="guide-colour">
    <div class="swatch bg-aqua"></div>
    <p class="text"><strong>Aqua</strong><br/>
      <small>$aqua<br/> #18788D</small></p>
  </div>

  <div class="guide-colour">
    <div class="swatch bg-light-aqua"></div>
    <p class="text"><strong>Light-aqua</strong><br/>
      <small>$light-aqua<br/> #5BCBE3</small></p>
  </div>

  <div class="guide-colour">
    <div class="swatch bg-lighter-aqua"></div>
    <p class="text"><strong>Lighter-aqua</strong><br/>
      <small>$lighter-aqua<br/> #5BCBE3</small></p>
  </div>

  <div class="guide-colour">
    <div class="swatch bg-dark-navy"></div>
    <p class="text"><strong>Dark-navy</strong><br/>
      <small>$dark-navy<br/> #152D3B</small></p>
  </div>

  <div class="guide-colour">
    <div class="swatch bg-navy"></div>
    <p class="text"><strong>Navy</strong><br/>
      <small>$navy<br/> #224A61</small></p>
  </div>

  <div class="guide-colour">
    <div class="swatch bg-maroon"></div>
    <p class="text"><strong>Maroon</strong><br/>
      <small>$maroon<br/> #880E48</small></p>
  </div>
</div>


Style guide: Colours.1 Colours palette
*/

// Colour constants

$black:         #000;
$non-black:     #313131;
$grey:          #6e6e6e;
$light-grey:    lighten($grey, 30%);
$non-white:     #f0f3f5;
$white:         #fff;

$aqua:          #18788d;
$dark-aqua:     darken($aqua, 5%);
$darker-aqua:   darken($aqua, 10%);
$light-aqua:    lighten($aqua, 30%);
$lighter-aqua:  lighten($aqua, 60%);

$navy:          #043751;
$dark-navy:     darken($navy, 10%);

$maroon:        #880e48;

/*
Contextual colours palette

These colours are reserved to help show specific changes in status.

<div class="guide-colour-examples">
  <div class="guide-colour">
    <div class="swatch bg-success-green"></div>
    <p class="text"><strong>Success-green</strong><br/>
      <small>$success-colour<br/> #007554</small></p>
  </div>

  <div class="guide-colour">
    <div class="swatch bg-light-green"></div>
    <p class="text"><strong>Light-green</strong><br/>
      <small>$light-green<br/> #e6efc2</small></p>
  </div>

  <div class="guide-colour">
    <div class="swatch bg-error-red"></div>
    <p class="text"><strong>Error-red</strong><br/>
      <small>$error-colour<br/> #cc0000</small></p>
  </div>

  <div class="guide-colour">
    <div class="swatch bg-light-red"></div>
    <p class="text"><strong>Light-red</strong><br/>
      <small>$light-red<br/> #f9dede</small></p>
  </div>

  <div class="guide-colour">
    <div class="swatch bg-warning-yellow"></div>
    <p class="text"><strong>Warning-yellow</strong><br/>
      <small>$warning-colour<br/> #f9c642</small></p>
  </div>

  <div class="guide-colour">
    <div class="swatch bg-light-yellow"></div>
    <p class="text"><strong>Light-yellow</strong><br/>
      <small>$light-yellow<br/> #fdf7dc</small></p>
  </div>

  <div class="guide-colour">
    <div class="swatch bg-info-blue"></div>
    <p class="text"><strong>Info-blue</strong><br/>
      <small>$info-colour<br/> #00Bfe9</small></p>
  </div>

  <div class="guide-colour">
    <div class="swatch bg-light-blue"></div>
    <p class="text"><strong>Light-blue</strong><br/>
      <small>$light-blue<br/> #e8f5fa</small></p>
  </div>
</div>

Style guide: Colours.2 Contextual colours palette
*/

$green:         #007554;
$light-green:   #e6efc2;

$red:           #c00;
$light-red:     #f9dede;

$yellow:        #f9c642;
$light-yellow:  #fdf7dc;

$blue:          #00bfe9;
$light-blue:    #e8f5fa;

/*
Accessibility

The <a href="http://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html" rel="external">recommended colour contrast ratio</a> for text and interactive elements should be at least 4.5:1.

### Accessible combinations
<p class="guide-colour-block bg-non-black">non-white on non-black<span class="invert">AAA</span></p>
<p class="guide-colour-block bg-grey">white on grey <span class="invert">AA</span></p>
<p class="guide-colour-block bg-light-grey">non-black on light-grey <span class="invert">AAA</span></p>
<p class="guide-colour-block bg-non-white">non-black on non-white <span class="invert">AAA</span></p>
<p class="guide-colour-block bg-white">non-black on white <span class="invert">AAA</span></p>
<p class="guide-colour-block bg-darker-aqua">non-white on darker-aqua <span class="invert">AAA</span></p>
<p class="guide-colour-block bg-dark-aqua">non-white on dark-aqua <span class="invert">AA</span></p>
<p class="guide-colour-block bg-aqua">white on aqua <span class="invert">AA</span></p>
<p class="guide-colour-block bg-light-aqua">non-black on light-aqua <span class="invert">AAA</span></p>
<p class="guide-colour-block bg-dark-navy">non-white on dark-navy <span class="invert">AAA</span></p>
<p class="guide-colour-block bg-navy">non-white on navy <span class="invert">AAA</span></p>
<p class="guide-colour-block bg-maroon">white on maroon <span class="invert">AAA</span></p>
<p class="guide-colour-block bg-error-red">white on error-red  <span class="invert">AA</span></p>
<p class="guide-colour-block bg-light-red">error-red on light-red <span class="invert">AA</span></p>
<p class="guide-colour-block bg-success-green">white on success-green <span class="invert">AA</span></p>
<p class="guide-colour-block bg-light-green">success-green on light-green <span class="invert">AAA</span></p>
<p class="guide-colour-block bg-light-yellow">non-black on light-yellow <span class="invert">AA</span></p>
<p class="guide-colour-block bg-light-blue">non-black on light-blue <span class="invert">AA</span></p>

<details open data-label="colour-accessibility" aria-expanded="false">
  <summary>Accessibility &amp; browser testing</summary>
  <div class="accordion-panel">
  <strong>Passed</strong>:
    <ul>
      <li>HTML5 validation (<a href="http://validator.github.io/validator/" rel="external">Nu Html Checker</a>)</li>
      <li>WCAG:AA automated (<a href="http://squizlabs.github.io/HTML_CodeSniffer/Standards/WCAG2/" rel="external">HTML_CodeSniffer</a>)</li>
    </ul>
  <strong>Untested</strong>:
    <ul>
      <li>WCAG:AA manual</li>
      <li>Browser support &mdash; automated and manual</li>
    </ul>
  </div>
</details>

Style guide: Colours.3 Accessibility
*/

// Colour variables

$background-colour:             $white;
$background-secondary-colour:   $non-white;

$link-colour:                   $non-black;
$link-colour--hover:            $light-aqua;

$link-inverted-colour:          $white;
$link-inverted-colour--hover:   $white;

$button-bg-colour:              $aqua;
$button-bg-colour--hover:       $darker-aqua;
$button-bg-colour--active:      $dark-aqua;
$button-bg-colour--disabled:    $light-grey;

$button-inverted-colour:        $white;

$button-text-colour:            $white;
$button-inverted-text-colour:   $navy;

$focus-colour:                  $lighter-aqua;
$error-colour:                  $red;
$success-colour:                $green;
$warning-colour:                $yellow;
$info-colour:                   $blue;

$callout-bg-light-colour:       $lighter-aqua;

$border-colour:                 $light-grey;
$border-soft-colour:            rgba($light-grey, 0.5);
$border-contrast-colour:        $navy;
$border-highlight-colour:       $light-aqua;

$box-shadow-colour:             rgba($non-black, 0.5);

$body-text-colour:              $non-black;
$body-inverted-text-colour:     $white;

$badge-colour--default:         $grey;
$badge-colour--alpha:           $non-black;
$badge-colour--beta:            $maroon;
$badge-colour--error:           $error-colour;
$badge-colour--success:         $green;

$controls-bg-colour:            $dark-navy;
$controls-contrast-bg-colour:   $maroon;
$header-bg-colour:              $navy;
$header-bg-colour-2:            #104f71;
$header-bg-colour-3:            #1c809d;
$hero-bg-colour:                #0098b0;
$breadcrumbs-bg-colour:         $non-white;

$input-focus-colour:            $light-aqua;




/*
IE Conditionals

Based on implementation by govuk_frontend_toolkit
https://github.com/alphagov/govuk_frontend_toolkit/blob/master/stylesheets/_conditionals.scss

The base css you write should be for mobile. You can
then add desktop styles on top.

Usage:

  div.columns {
    border: 1px solid;

    @include media($desktop){
      width: 30%;
      float: left;
    }
    @include ie-lte(8) {
      something to fix visual bugs in old IE
    }
    @include ie(6) {
      padding: 0;
    }
  }
*/

$is-ie: false !default;

@mixin ie-lte($version) {
  @if $is-ie {
    @if $ie-version <= $version {
      @content;
    }
  }
}

@mixin ie($version) {
  @if $is-ie {
    @if $ie-version == $version {
      @content;
    }
  }
}

@mixin ie-clearfix {
  &:after {
    content: '';
    display: table;
    clear: both;
    height: 0;
    border: 1px solid $maroon;
  }
}


/*
 * Hide only visually, but have it available for screen readers:
 * http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
 */

// Added as a class because this should to be obvious in HTML

.visuallyhidden,
.is-visuallyhidden {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

/*
  Warning/notification regarding feature support
*/
.ua-notification {
  display: block;
  padding: 0.8em;
  text-align: center;
  background-color: $warning-colour;
  color: $non-black;
  font-size: rem(17);
  margin-bottom: 0;
}

@mixin inline-background-image($img) {
  background-image: image-url('icons/' + $img + '.svg');

  @include ie-lte(8) {
    background-image: image-url('icons/' + $img + '.png');
  }
}

// Generic icons
%icon-arrow-right {
  @include inline-background-image('arrow-right');
}

%icon-arrow-right--white {
  @include inline-background-image('arrow-right--white');
}

%icon-arrow-right--aqua {
  @include inline-background-image('arrow-right--aqua');
}

%icon-bars {
  @include inline-background-image('bars');
}

%icon-close {
  @include inline-background-image('close');
}

%icon-chevron-down--navy {
  @include inline-background-image('chevron-down--navy');
}

// Specific functions
%icon-external-link--aqua {
  @include inline-background-image('external-link--aqua');
}

// This class is legacy as of v1.2
// Marked for removal in v2.0
.icon-chevron {
  &::before {
    border-style: solid;
    border-width: 0.25em 0.25em 0 0;
    content: '';
    display: inline-block;
    height: 0.5em;
    left: 0.15em;
    position: relative;
    vertical-align: top;
    width: 0.5em;
    transition: transform 300ms linear;
  }

  &.top {
    &::before {
      top: 0.75em;
      transform: rotate(-45deg);
    }
  }

  &.right {
    &::before {
      left: 0;
      transform: rotate(45deg);
    }
  }

  &.bottom {
    &::before {
      top: 0.5em;
      transform: rotate(135deg);
    }
  }

  &.left {
    &::before {
      left: 0.25em;
      transform: rotate(-135deg);
    }
  }
}

//   ==========================================================================
//   Print styles from https://github.com/h5bp/html5-boilerplate/blob/master/dist/css/main.css
//
//   HTML5 Boilerplate v5.3.0 | MIT License | https://html5boilerplate.com/
//
//   Inlined to avoid the additional HTTP request:
//   http://www.phpied.com/delay-loading-your-print-css/
//   ==========================================================================
// scss-lint:disable QualifyingElement
@media print {
  *,
  *::before,
  *::after,
  *::first-letter,
  *::first-line {
    background: transparent;
    color: $black;
    // Black prints faster: http://www.sanbeiji.com/archives/953
    box-shadow: none;
    text-shadow: none;
  }

  a,
  a:visited {
    text-decoration: underline;
  }


  a[href]::after {
    content: ' (' attr(href) ')';
  }

  abbr[title]::after {
    content: ' (' attr(title) ')';
  }

  // Don't show links that are fragment identifiers,
  // or use the `javascript:` pseudo protocol

  a[href^='#']::after,
  a[href^='javascript:']::after {
    content: '';
  }

  pre,
  blockquote {
    border: 1px solid $light-grey;
    page-break-inside: avoid;
  }

  //Printing Tables: http://css-discuss.incutio.com/wiki/Printing_Tables

  thead {
    display: table-header-group;
  }

  tr,
  img {
    page-break-inside: avoid;
  }

  img {
    max-width: 100%;
  }

  p,
  h2,
  h3 {
    orphans: 3;
    widows: 3;
  }

  h2,
  h3 {
    page-break-after: avoid;
  }
}


/*! responsive-nav.js 1.0.39 by @viljamis */

.nav-collapse ul {
  margin: 0;
  padding: 0;
  width: 100%;
  display: block;
  list-style: none;
}

.nav-collapse li {
  width: 100%;
  display: block;
}

.js .nav-collapse {
  clip: rect(0 0 0 0);
  max-height: 0;
  position: absolute;
  display: block;
  overflow: hidden;
  zoom: 1;
}

.nav-collapse.opened {
  max-height: 9999px;
}

.nav-toggle {
  -webkit-tap-highlight-color: rgba(0,0,0,0);
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  -o-user-select: none;
  user-select: none;
}

@media screen and (min-width: 40em) {
  .js .nav-collapse {
    position: relative;
  }
  .js .nav-collapse.closed {
    max-height: none;
  }
  .nav-toggle {
    display: none;
  }
}

/*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */

/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS and IE text size adjust after device orientation change,
 *    without disabling user zoom.
 */

html {
  font-family: sans-serif; /* 1 */
  -ms-text-size-adjust: 100%; /* 2 */
  -webkit-text-size-adjust: 100%; /* 2 */
}

/**
 * Remove default margin.
 */

body {
  margin: 0;
}

/* HTML5 display definitions
   ========================================================================== */

/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */

article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block;
}

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */

audio,
canvas,
progress,
video {
  display: inline-block; /* 1 */
  vertical-align: baseline; /* 2 */
}

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */

audio:not([controls]) {
  display: none;
  height: 0;
}

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/10/11, Safari, and Firefox < 22.
 */

[hidden],
template {
  display: none;
}

/* Links
   ========================================================================== */

/**
 * Remove the gray background color from active links in IE 10.
 */

a {
  background-color: transparent;
}

/**
 * Improve readability of focused elements when they are also in an
 * active/hover state.
 */

a:active,
a:hover {
  outline: 0;
}

/* Text-level semantics
   ========================================================================== */

/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */

abbr[title] {
  border-bottom: 1px dotted;
}

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */

b,
strong {
  font-weight: bold;
}

/**
 * Address styling not present in Safari and Chrome.
 */

dfn {
  font-style: italic;
}

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */

h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

/**
 * Address styling not present in IE 8/9.
 */

mark {
  background: #ff0;
  color: #000;
}

/**
 * Address inconsistent and variable font size in all browsers.
 */

small {
  font-size: 80%;
}

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */

sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sup {
  top: -0.5em;
}

sub {
  bottom: -0.25em;
}

/* Embedded content
   ========================================================================== */

/**
 * Remove border when inside `a` element in IE 8/9/10.
 */

img {
  border: 0;
}

/**
 * Correct overflow not hidden in IE 9/10/11.
 */

svg:not(:root) {
  overflow: hidden;
}

/* Grouping content
   ========================================================================== */

/**
 * Address margin not present in IE 8/9 and Safari.
 */

figure {
  margin: 1em 40px;
}

/**
 * Address differences between Firefox and other browsers.
 */

hr {
  box-sizing: content-box;
  height: 0;
}

/**
 * Contain overflow in all browsers.
 */

pre {
  overflow: auto;
}

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */

code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em;
}

/* Forms
   ========================================================================== */

/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */

/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */

button,
input,
optgroup,
select,
textarea {
  color: inherit; /* 1 */
  font: inherit; /* 2 */
  margin: 0; /* 3 */
}

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */

button {
  overflow: visible;
}

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */

button,
select {
  text-transform: none;
}

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */

button,
html input[type="button"], /* 1 */
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button; /* 2 */
  cursor: pointer; /* 3 */
}

/**
 * Re-set default cursor for disabled elements.
 */

button[disabled],
html input[disabled] {
  cursor: default;
}

/**
 * Remove inner padding and border in Firefox 4+.
 */

button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0;
}

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */

input {
  line-height: normal;
}

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */

input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box; /* 1 */
  padding: 0; /* 2 */
}

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */

input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome.
 */

input[type="search"] {
  -webkit-appearance: textfield; /* 1 */
  box-sizing: content-box; /* 2 */
}

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */

input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
 * Define consistent border, margin, and padding.
 */

fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em;
}

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */

legend {
  border: 0; /* 1 */
  padding: 0; /* 2 */
}

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */

textarea {
  overflow: auto;
}

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */

optgroup {
  font-weight: bold;
}

/* Tables
   ========================================================================== */

/**
 * Remove most spacing between table cells.
 */

table {
  border-collapse: collapse;
  border-spacing: 0;
}

td,
th {
  padding: 0;
}

// Bourbon 4.2.7
// http://bourbon.io
// Copyright 2011-2015 thoughtbot, inc.
// MIT License

@charset "UTF-8";

/// Global variables to enable or disable vendor prefixes

$prefix-for-webkit:    true !default;
$prefix-for-mozilla:   true !default;
$prefix-for-microsoft: true !default;
$prefix-for-opera:     true !default;
$prefix-for-spec:      true !default;

$em-base: 16px !default;

@charset "UTF-8";

/// A global setting to enable or disable the `$asset-pipeline` variable for all functions that accept it.
///
/// @type Bool

$asset-pipeline: false !default;


@function assign-inputs($inputs, $pseudo: null) {
  $list: ();

  @each $input in $inputs {
    $input: unquote($input);
    $input: if($pseudo, $input + ":" + $pseudo, $input);
    $list: append($list, $input, comma);
  }

  @return $list;
}

@charset "UTF-8";

/// Checks if a list contains a value(s).
///
/// @access private
///
/// @param {List} $list
///   The list to check against.
///
/// @param {List} $values
///   A single value or list of values to check for.
///
/// @example scss - Usage
///   contains($list, $value)
///
/// @return {Bool}

@function contains($list, $values...) {
  @each $value in $values {
    @if type-of(index($list, $value)) != "number" {
      @return false;
    }
  }

  @return true;
}

@charset "UTF-8";

/// Checks if a list does not contains a value.
///
/// @access private
///
/// @param {List} $list
///   The list to check against.
///
/// @return {Bool}

@function contains-falsy($list) {
  @each $item in $list {
    @if not $item {
      @return true;
    }
  }

  @return false;
}

@charset "UTF-8";

/// Checks for a valid CSS length.
///
/// @param {String} $value

@function is-length($value) {
  @return type-of($value) != "null" and (str-slice($value + "", 1, 4) == "calc"
       or index(auto inherit initial 0, $value)
       or (type-of($value) == "number" and not(unitless($value))));
}

@charset "UTF-8";

/// Programatically determines whether a color is light or dark.
///
/// @link http://robots.thoughtbot.com/closer-look-color-lightness
///
/// @param {Color (Hex)} $color
///
/// @example scss - Usage
///   is-light($color)
///
/// @return {Bool}

@function is-light($hex-color) {
  $-local-red: red(rgba($hex-color, 1));
  $-local-green: green(rgba($hex-color, 1));
  $-local-blue: blue(rgba($hex-color, 1));
  $-local-lightness: ($-local-red * 0.2126 + $-local-green * 0.7152 + $-local-blue * 0.0722) / 255;

  @return $-local-lightness > 0.6;
}

@charset "UTF-8";

/// Checks for a valid number.
///
/// @param {Number} $value
///
/// @require {function} contains

@function is-number($value) {
  @return contains("0" "1" "2" "3" "4" "5" "6" "7" "8" "9" 0 1 2 3 4 5 6 7 8 9, $value);
}

@charset "UTF-8";

/// Checks for a valid CSS size.
///
/// @param {String} $value
///
/// @require {function} contains
/// @require {function} is-length

@function is-size($value) {
  @return is-length($value)
          or contains("fill" "fit-content" "min-content" "max-content", $value);
}

// Convert pixels to ems
// eg. for a relational value of 12px write em(12) when the parent is 16px
// if the parent is another value say 24px write em(12, 24)

@function em($pxval, $base: $em-base) {
  @if not unitless($pxval) {
    $pxval: strip-units($pxval);
  }
  @if not unitless($base) {
    $base: strip-units($base);
  }
  @return ($pxval / $base) * 1em;
}

// Convert pixels to rems
// eg. for a relational value of 12px write rem(12)
// Assumes $em-base is the font-size of <html>

@function rem($pxval) {
  @if not unitless($pxval) {
    $pxval: strip-units($pxval);
  }

  $base: $em-base;
  @if not unitless($base) {
    $base: strip-units($base);
  }
  @return ($pxval / $base) * 1rem;
}

@charset "UTF-8";

/// Mixes a color with black.
///
/// @param {Color} $color
///
/// @param {Number (Percentage)} $percent
///   The amount of black to be mixed in.
///
/// @example scss - Usage
///   .element {
///     background-color: shade(#ffbb52, 60%);
///   }
///
/// @example css - CSS Output
///   .element {
///     background-color: #664a20;
///   }
///
/// @return {Color}

@function shade($color, $percent) {
  @return mix(#000, $color, $percent);
}

@charset "UTF-8";

/// Strips the unit from a number.
///
/// @param {Number (With Unit)} $value
///
/// @example scss - Usage
///   $dimension: strip-units(10em);
///
/// @example css - CSS Output
///   $dimension: 10;
///
/// @return {Number (Unitless)}

@function strip-units($value) {
  @return ($value / ($value * 0 + 1));
}

@charset "UTF-8";

/// Mixes a color with white.
///
/// @param {Color} $color
///
/// @param {Number (Percentage)} $percent
///   The amount of white to be mixed in.
///
/// @example scss - Usage
///   .element {
///     background-color: tint(#6ecaa6, 40%);
///   }
///
/// @example css - CSS Output
///   .element {
///     background-color: #a8dfc9;
///   }
///
/// @return {Color}

@function tint($color, $percent) {
  @return mix(#fff, $color, $percent);
}

// Return vendor-prefixed property names if appropriate
// Example: transition-property-names((transform, color, background), moz) -> -moz-transform, color, background
//************************************************************************//
@function transition-property-names($props, $vendor: false) {
  $new-props: ();

  @each $prop in $props {
    $new-props: append($new-props, transition-property-name($prop, $vendor), comma);
  }

  @return $new-props;
}

@function transition-property-name($prop, $vendor: false) {
  // put other properties that need to be prefixed here aswell
  @if $vendor and $prop == transform {
    @return unquote('-'+$vendor+'-'+$prop);
  }
  @else {
    @return $prop;
  }
}

@charset "UTF-8";

/// Converts shorthand to the 4-value syntax.
///
/// @param {List} $shorthand
///
/// @example scss - Usage
///   .element {
///     margin: unpack(1em 2em);
///   }
///
/// @example css - CSS Output
///   .element {
///     margin: 1em 2em 1em 2em;
///   }

@function unpack($shorthand) {
  @if length($shorthand) == 1 {
    @return nth($shorthand, 1) nth($shorthand, 1) nth($shorthand, 1) nth($shorthand, 1);
  } @else if length($shorthand) == 2 {
    @return nth($shorthand, 1) nth($shorthand, 2) nth($shorthand, 1) nth($shorthand, 2);
  } @else if length($shorthand) == 3 {
    @return nth($shorthand, 1) nth($shorthand, 2) nth($shorthand, 3) nth($shorthand, 2);
  } @else {
    @return $shorthand;
  }
}

// Scaling Variables
$golden:           1.618;
$minor-second:     1.067;
$major-second:     1.125;
$minor-third:      1.2;
$major-third:      1.25;
$perfect-fourth:   1.333;
$augmented-fourth: 1.414;
$perfect-fifth:    1.5;
$minor-sixth:      1.6;
$major-sixth:      1.667;
$minor-seventh:    1.778;
$major-seventh:    1.875;
$octave:           2;
$major-tenth:      2.5;
$major-eleventh:   2.667;
$major-twelfth:    3;
$double-octave:    4;

$modular-scale-ratio: $perfect-fourth !default;
$modular-scale-base: em($em-base) !default;

@function modular-scale($increment, $value: $modular-scale-base, $ratio: $modular-scale-ratio) {
  $v1: nth($value, 1);
  $v2: nth($value, length($value));
  $value: $v1;

  // scale $v2 to just above $v1
  @while $v2 > $v1 {
    $v2: ($v2 / $ratio); // will be off-by-1
  }
  @while $v2 < $v1 {
    $v2: ($v2 * $ratio); // will fix off-by-1
  }

  // check AFTER scaling $v2 to prevent double-counting corner-case
  $double-stranded: $v2 > $v1;

  @if $increment > 0 {
    @for $i from 1 through $increment {
      @if $double-stranded and ($v1 * $ratio) > $v2 {
        $value: $v2;
        $v2: ($v2 * $ratio);
      } @else {
        $v1: ($v1 * $ratio);
        $value: $v1;
      }
    }
  }

  @if $increment < 0 {
    // adjust $v2 to just below $v1
    @if $double-stranded {
      $v2: ($v2 / $ratio);
    }

    @for $i from $increment through -1 {
      @if $double-stranded and ($v1 / $ratio) < $v2 {
        $value: $v2;
        $v2: ($v2 / $ratio);
      } @else {
        $v1: ($v1 / $ratio);
        $value: $v1;
      }
    }
  }

  @return $value;
}


//************************************************************************//
// Helper function for str-to-num fn.
// Source: http://sassmeister.com/gist/9647408
//************************************************************************//
@function _convert-units($number, $unit) {
  $strings: "px", "cm", "mm", "%", "ch", "pica", "in", "em", "rem", "pt", "pc", "ex", "vw", "vh", "vmin", "vmax", "deg", "rad", "grad", "turn";
  $units:   1px, 1cm, 1mm, 1%, 1ch, 1pica, 1in, 1em, 1rem, 1pt, 1pc, 1ex, 1vw, 1vh, 1vmin, 1vmax, 1deg, 1rad, 1grad, 1turn;
  $index: index($strings, $unit);

  @if not $index {
    @warn "Unknown unit `#{$unit}`.";
    @return false;
  }

  @if type-of($number) != "number" {
    @warn "`#{$number} is not a number`";
    @return false;
  }

  @return $number * nth($units, $index);
}

@charset "UTF-8";

/// Directional-property mixins are shorthands for writing properties like the following
///
/// @ignore You can also use `false` instead of `null`.
///
/// @param {List} $vals
///   List of directional values
///
/// @example scss - Usage
///   .element {
///     @include border-style(dotted null);
///     @include margin(null 0 10px);
///   }
///
/// @example css - CSS Output
///   .element {
///     border-bottom-style: dotted;
///     border-top-style: dotted;
///     margin-bottom: 10px;
///     margin-left: 0;
///     margin-right: 0;
///   }
///
/// @require {function} contains-falsy
///
/// @return {List}

@function collapse-directionals($vals) {
  $output: null;

  $a: nth($vals, 1);
  $b: if(length($vals) < 2, $a, nth($vals, 2));
  $c: if(length($vals) < 3, $a, nth($vals, 3));
  $d: if(length($vals) < 2, $a, nth($vals, if(length($vals) < 4, 2, 4)));

  @if $a == 0 { $a: 0; }
  @if $b == 0 { $b: 0; }
  @if $c == 0 { $c: 0; }
  @if $d == 0 { $d: 0; }

  @if $a == $b and $a == $c and $a == $d { $output: $a;          }
  @else if $a == $c and $b == $d         { $output: $a $b;       }
  @else if $b == $d                      { $output: $a $b $c;    }
  @else                                  { $output: $a $b $c $d; }

  @return $output;
}

/// Output directional properties, for instance `margin`.
///
/// @access private
///
/// @param {String} $pre
///   Prefix to use
/// @param {String} $suf
///   Suffix to use
/// @param {List} $vals
///   List of values
///
/// @require {function} collapse-directionals
/// @require {function} contains-falsy

@mixin directional-property($pre, $suf, $vals) {
  // Property Names
  $top:    $pre + "-top"    + if($suf, "-#{$suf}", "");
  $bottom: $pre + "-bottom" + if($suf, "-#{$suf}", "");
  $left:   $pre + "-left"   + if($suf, "-#{$suf}", "");
  $right:  $pre + "-right"  + if($suf, "-#{$suf}", "");
  $all:    $pre +             if($suf, "-#{$suf}", "");

  $vals: collapse-directionals($vals);

  @if contains-falsy($vals) {
    @if nth($vals, 1) { #{$top}: nth($vals, 1); }

    @if length($vals) == 1 {
      @if nth($vals, 1) { #{$right}: nth($vals, 1); }
    } @else {
      @if nth($vals, 2) { #{$right}: nth($vals, 2); }
    }

    @if length($vals) == 2 {
      @if nth($vals, 1) { #{$bottom}: nth($vals, 1); }
      @if nth($vals, 2) { #{$left}:   nth($vals, 2); }
    } @else if length($vals) == 3 {
      @if nth($vals, 3) { #{$bottom}: nth($vals, 3); }
      @if nth($vals, 2) { #{$left}:   nth($vals, 2); }
    } @else if length($vals) == 4 {
      @if nth($vals, 3) { #{$bottom}: nth($vals, 3); }
      @if nth($vals, 4) { #{$left}:   nth($vals, 4); }
    }
  } @else {
    #{$all}: $vals;
  }
}

// Used for creating the source string for fonts using @font-face
// Reference: http://goo.gl/Ru1bKP

@function font-url-prefixer($asset-pipeline) {
  @if $asset-pipeline == true {
    @return font-url;
  } @else {
    @return url;
  }
}

@function font-source-declaration(
  $font-family,
  $file-path,
  $asset-pipeline,
  $file-formats,
  $font-url) {

  $src: ();

  $formats-map: (
    eot:   "#{$file-path}.eot?#iefix" format("embedded-opentype"),
    woff2: "#{$file-path}.woff2" format("woff2"),
    woff:  "#{$file-path}.woff" format("woff"),
    ttf:   "#{$file-path}.ttf" format("truetype"),
    svg:   "#{$file-path}.svg##{$font-family}" format("svg")
  );

  @each $key, $values in $formats-map {
    @if contains($file-formats, $key) {
      $file-path: nth($values, 1);
      $font-format: nth($values, 2);

      @if $asset-pipeline == true {
        $src: append($src, font-url($file-path) $font-format, comma);
      } @else {
        $src: append($src, url($file-path) $font-format, comma);
      }
    }
  }

  @return $src;
}

@function _gradient-positions-parser($gradient-type, $gradient-positions) {
  @if $gradient-positions
  and ($gradient-type == linear)
  and (type-of($gradient-positions) != color) {
    $gradient-positions: _linear-positions-parser($gradient-positions);
  }
  @else if $gradient-positions
  and ($gradient-type == radial)
  and (type-of($gradient-positions) != color) {
    $gradient-positions: _radial-positions-parser($gradient-positions);
  }
  @return $gradient-positions;
}

// Private function for linear-gradient-parser
@function _linear-angle-parser($image, $first-val, $prefix, $suffix) {
  $offset: null;
  $unit-short:  str-slice($first-val, str-length($first-val) - 2, str-length($first-val));
  $unit-long:   str-slice($first-val, str-length($first-val) - 3, str-length($first-val));

  @if ($unit-long == "grad") or
      ($unit-long == "turn") {
    $offset: if($unit-long == "grad", -100grad * 3, -0.75turn);
  }

  @else if ($unit-short == "deg") or
           ($unit-short == "rad") {
    $offset: if($unit-short == "deg", -90 * 3, 1.6rad);
  }

  @if $offset {
    $num: _str-to-num($first-val);

    @return (
      webkit-image: -webkit- + $prefix + ($offset - $num) + $suffix,
      spec-image: $image
    );
  }
}

@function _linear-gradient-parser($image) {
  $image: unquote($image);
  $gradients: ();
  $start: str-index($image, "(");
  $end: str-index($image, ",");
  $first-val: str-slice($image, $start + 1, $end - 1);

  $prefix: str-slice($image, 1, $start);
  $suffix: str-slice($image, $end, str-length($image));

  $has-multiple-vals: str-index($first-val, " ");
  $has-single-position: unquote(_position-flipper($first-val) + "");
  $has-angle: is-number(str-slice($first-val, 1, 1));

  @if $has-multiple-vals {
    $gradients: _linear-side-corner-parser($image, $first-val, $prefix, $suffix, $has-multiple-vals);
  }

  @else if $has-single-position != "" {
    $pos: unquote($has-single-position + "");

    $gradients: (
      webkit-image: -webkit- + $image,
      spec-image: $prefix + "to " + $pos + $suffix
    );
  }

  @else if $has-angle {
    // Rotate degree for webkit
    $gradients: _linear-angle-parser($image, $first-val, $prefix, $suffix);
  }

  @else {
    $gradients: (
      webkit-image: -webkit- + $image,
      spec-image: $image
    );
  }

  @return $gradients;
}

@function _linear-positions-parser($pos) {
  $type: type-of(nth($pos, 1));
  $spec: null;
  $degree: null;
  $side: null;
  $corner: null;
  $length: length($pos);
  // Parse Side and corner positions
  @if ($length > 1) {
    @if nth($pos, 1) == "to" { // Newer syntax
      $side: nth($pos, 2);

      @if $length == 2 { // eg. to top
        // Swap for backwards compatibility
        $degree: _position-flipper(nth($pos, 2));
      }
      @else if $length == 3 { // eg. to top left
        $corner: nth($pos, 3);
      }
    }
    @else if $length == 2 { // Older syntax ("top left")
      $side: _position-flipper(nth($pos, 1));
      $corner: _position-flipper(nth($pos, 2));
    }

    @if ("#{$side} #{$corner}" == "left top") or ("#{$side} #{$corner}" == "top left") {
      $degree: _position-flipper(#{$side}) _position-flipper(#{$corner});
    }
    @else if ("#{$side} #{$corner}" == "right top") or ("#{$side} #{$corner}" == "top right") {
      $degree: _position-flipper(#{$side}) _position-flipper(#{$corner});
    }
    @else if ("#{$side} #{$corner}" == "right bottom") or ("#{$side} #{$corner}" == "bottom right") {
      $degree: _position-flipper(#{$side}) _position-flipper(#{$corner});
    }
    @else if ("#{$side} #{$corner}" == "left bottom") or ("#{$side} #{$corner}" == "bottom left") {
      $degree: _position-flipper(#{$side}) _position-flipper(#{$corner});
    }
    $spec: to $side $corner;
  }
  @else if $length == 1 {
    // Swap for backwards compatibility
    @if $type == string {
      $degree: $pos;
      $spec: to _position-flipper($pos);
    }
    @else {
      $degree: -270 - $pos; //rotate the gradient opposite from spec
      $spec: $pos;
    }
  }
  $degree: unquote($degree + ",");
  $spec:   unquote($spec + ",");
  @return $degree $spec;
}

@function _position-flipper($pos) {
  @return if($pos == left, right, null)
         if($pos == right, left, null)
         if($pos == top, bottom, null)
         if($pos == bottom, top, null);
}

// Private function for linear-gradient-parser
@function _linear-side-corner-parser($image, $first-val, $prefix, $suffix, $has-multiple-vals) {
  $val-1: str-slice($first-val, 1, $has-multiple-vals - 1);
  $val-2: str-slice($first-val, $has-multiple-vals + 1, str-length($first-val));
  $val-3: null;
  $has-val-3: str-index($val-2, " ");

  @if $has-val-3 {
    $val-3: str-slice($val-2, $has-val-3 + 1, str-length($val-2));
    $val-2: str-slice($val-2, 1, $has-val-3 - 1);
  }

  $pos: _position-flipper($val-1) _position-flipper($val-2) _position-flipper($val-3);
  $pos: unquote($pos + "");

  // Use old spec for webkit
  @if $val-1 == "to" {
    @return (
      webkit-image: -webkit- + $prefix + $pos + $suffix,
      spec-image: $image
    );
  }

  // Bring the code up to spec
  @else {
    @return (
      webkit-image: -webkit- + $image,
      spec-image: $prefix + "to " + $pos + $suffix
    );
  }
}

@function _radial-arg-parser($g1, $g2, $pos, $shape-size) {
  @each $value in $g1, $g2 {
    $first-val: nth($value, 1);
    $pos-type:  type-of($first-val);
    $spec-at-index: null;

    // Determine if spec was passed to mixin
    @if type-of($value) == list {
      $spec-at-index: if(index($value, at), index($value, at), false);
    }
    @if $spec-at-index {
      @if $spec-at-index > 1 {
        @for $i from 1 through ($spec-at-index - 1) {
          $shape-size: $shape-size nth($value, $i);
        }
        @for $i from ($spec-at-index + 1) through length($value) {
          $pos: $pos nth($value, $i);
        }
      }
      @else if $spec-at-index == 1 {
        @for $i from ($spec-at-index + 1) through length($value) {
          $pos: $pos nth($value, $i);
        }
      }
      $g1: null;
    }

    // If not spec calculate correct values
    @else {
      @if ($pos-type != color) or ($first-val != "transparent") {
        @if ($pos-type == number)
        or ($first-val == "center")
        or ($first-val == "top")
        or ($first-val == "right")
        or ($first-val == "bottom")
        or ($first-val == "left") {

          $pos: $value;

          @if $pos == $g1 {
            $g1: null;
          }
        }

        @else if
           ($first-val == "ellipse")
        or ($first-val == "circle")
        or ($first-val == "closest-side")
        or ($first-val == "closest-corner")
        or ($first-val == "farthest-side")
        or ($first-val == "farthest-corner")
        or ($first-val == "contain")
        or ($first-val == "cover") {

          $shape-size: $value;

          @if $value == $g1 {
            $g1: null;
          }

          @else if $value == $g2 {
            $g2: null;
          }
        }
      }
    }
  }
  @return $g1, $g2, $pos, $shape-size;
}

@function _radial-positions-parser($gradient-pos) {
  $shape-size: nth($gradient-pos, 1);
  $pos:        nth($gradient-pos, 2);
  $shape-size-spec: _shape-size-stripper($shape-size);

  $pre-spec: unquote(if($pos, "#{$pos}, ", null))
             unquote(if($shape-size, "#{$shape-size},", null));
  $pos-spec: if($pos, "at #{$pos}", null);

  $spec: "#{$shape-size-spec} #{$pos-spec}";

  // Add comma
  @if ($spec != "  ") {
    $spec: "#{$spec},";
  }

  @return $pre-spec $spec;
}

@function _radial-gradient-parser($image) {
  $image: unquote($image);
  $gradients: ();
  $start: str-index($image, "(");
  $end: str-index($image, ",");
  $first-val: str-slice($image, $start + 1, $end - 1);

  $prefix: str-slice($image, 1, $start);
  $suffix: str-slice($image, $end, str-length($image));

  $is-spec-syntax: str-index($first-val, "at");

  @if $is-spec-syntax and $is-spec-syntax > 1 {
    $keyword: str-slice($first-val, 1, $is-spec-syntax - 2);
    $pos: str-slice($first-val, $is-spec-syntax + 3, str-length($first-val));
    $pos: append($pos, $keyword, comma);

    $gradients: (
      webkit-image: -webkit- + $prefix + $pos + $suffix,
      spec-image: $image
    );
  }

  @else if $is-spec-syntax == 1 {
    $pos: str-slice($first-val, $is-spec-syntax + 3, str-length($first-val));

    $gradients: (
      webkit-image: -webkit- + $prefix + $pos + $suffix,
      spec-image: $image
    );
  }

  @else if str-index($image, "cover") or str-index($image, "contain") {
    @warn "Radial-gradient needs to be updated to conform to latest spec.";

    $gradients: (
      webkit-image: null,
      spec-image: $image
    );
  }

  @else {
    $gradients: (
      webkit-image: -webkit- + $image,
      spec-image: $image
    );
  }

  @return $gradients;
}

// User for linear and radial gradients within background-image or border-image properties

@function _render-gradients($gradient-positions, $gradients, $gradient-type, $vendor: false) {
  $pre-spec: null;
  $spec: null;
  $vendor-gradients: null;
  @if $gradient-type == linear {
    @if $gradient-positions {
      $pre-spec: nth($gradient-positions, 1);
      $spec:     nth($gradient-positions, 2);
    }
  }
  @else if $gradient-type == radial {
    $pre-spec: nth($gradient-positions, 1);
    $spec:     nth($gradient-positions, 2);
  }

  @if $vendor {
    $vendor-gradients: -#{$vendor}-#{$gradient-type}-gradient(#{$pre-spec} $gradients);
  }
  @else if $vendor == false {
    $vendor-gradients: "#{$gradient-type}-gradient(#{$spec} #{$gradients})";
    $vendor-gradients: unquote($vendor-gradients);
  }
  @return $vendor-gradients;
}

@function _shape-size-stripper($shape-size) {
  $shape-size-spec: null;
  @each $value in $shape-size {
    @if ($value == "cover") or ($value == "contain") {
      $value: null;
    }
    $shape-size-spec: "#{$shape-size-spec} #{$value}";
  }
  @return $shape-size-spec;
}

//************************************************************************//
// Helper function for linear/radial-gradient-parsers.
// Source: http://sassmeister.com/gist/9647408
//************************************************************************//
@function _str-to-num($string) {
  // Matrices
  $strings: "0" "1" "2" "3" "4" "5" "6" "7" "8" "9";
  $numbers:  0   1   2   3   4   5   6   7   8   9;

  // Result
  $result: 0;
  $divider: 0;
  $minus: false;

  // Looping through all characters
  @for $i from 1 through str-length($string) {
    $character: str-slice($string, $i, $i);
    $index: index($strings, $character);

    @if $character == "-" {
      $minus: true;
    }

    @else if $character == "." {
      $divider: 1;
    }

    @else {
      @if not $index {
        $result: if($minus, $result * -1, $result);
        @return _convert-units($result, str-slice($string, $i));
      }

      $number: nth($numbers, $index);

      @if $divider == 0 {
        $result: $result * 10;
      }

      @else {
        // Move the decimal dot to the left
        $divider: $divider * 10;
        $number: $number / $divider;
      }

      $result: $result + $number;
    }
  }
  @return if($minus, $result * -1, $result);
}


// http://www.w3.org/TR/css3-animations/#the-animation-name-property-
// Each of these mixins support comma separated lists of values, which allows different transitions for individual properties to be described in a single style rule. Each value in the list corresponds to the value at that same position in the other properties.

@mixin animation($animations...) {
  @include prefixer(animation, $animations, webkit moz spec);
}

@mixin animation-name($names...) {
  @include prefixer(animation-name, $names, webkit moz spec);
}

@mixin animation-duration($times...) {
  @include prefixer(animation-duration, $times, webkit moz spec);
}

@mixin animation-timing-function($motions...) {
  // ease | linear | ease-in | ease-out | ease-in-out
  @include prefixer(animation-timing-function, $motions, webkit moz spec);
}

@mixin animation-iteration-count($values...) {
  // infinite | <number>
  @include prefixer(animation-iteration-count, $values, webkit moz spec);
}

@mixin animation-direction($directions...) {
  // normal | alternate
  @include prefixer(animation-direction, $directions, webkit moz spec);
}

@mixin animation-play-state($states...) {
  // running | paused
  @include prefixer(animation-play-state, $states, webkit moz spec);
}

@mixin animation-delay($times...) {
  @include prefixer(animation-delay, $times, webkit moz spec);
}

@mixin animation-fill-mode($modes...) {
  // none | forwards | backwards | both
  @include prefixer(animation-fill-mode, $modes, webkit moz spec);
}

@mixin appearance($value) {
  @include prefixer(appearance, $value, webkit moz ms o spec);
}

@mixin backface-visibility($visibility) {
  @include prefixer(backface-visibility, $visibility, webkit spec);
}

//************************************************************************//
// Background property for adding multiple backgrounds using shorthand
// notation.
//************************************************************************//

@mixin background($backgrounds...) {
  $webkit-backgrounds: ();
  $spec-backgrounds: ();

  @each $background in $backgrounds {
    $webkit-background: ();
    $spec-background: ();
    $background-type: type-of($background);

    @if $background-type == string or $background-type == list {
      $background-str: if($background-type == list, nth($background, 1), $background);

      $url-str:       str-slice($background-str, 1, 3);
      $gradient-type: str-slice($background-str, 1, 6);

      @if $url-str == "url" {
        $webkit-background: $background;
        $spec-background:   $background;
      }

      @else if $gradient-type == "linear" {
        $gradients: _linear-gradient-parser("#{$background}");
        $webkit-background: map-get($gradients, webkit-image);
        $spec-background:   map-get($gradients, spec-image);
      }

      @else if $gradient-type == "radial" {
        $gradients: _radial-gradient-parser("#{$background}");
        $webkit-background: map-get($gradients, webkit-image);
        $spec-background:   map-get($gradients, spec-image);
      }

      @else {
        $webkit-background: $background;
        $spec-background:   $background;
      }
    }

    @else {
      $webkit-background: $background;
      $spec-background:   $background;
    }

    $webkit-backgrounds: append($webkit-backgrounds, $webkit-background, comma);
    $spec-backgrounds:   append($spec-backgrounds,   $spec-background,   comma);
  }

  background: $webkit-backgrounds;
  background: $spec-backgrounds;
}

//************************************************************************//
// Background-image property for adding multiple background images with
// gradients, or for stringing multiple gradients together.
//************************************************************************//

@mixin background-image($images...) {
  $webkit-images: ();
  $spec-images: ();

  @each $image in $images {
    $webkit-image: ();
    $spec-image: ();

    @if (type-of($image) == string) {
      $url-str:       str-slice($image, 1, 3);
      $gradient-type: str-slice($image, 1, 6);

      @if $url-str == "url" {
        $webkit-image: $image;
        $spec-image:   $image;
      }

      @else if $gradient-type == "linear" {
        $gradients: _linear-gradient-parser($image);
        $webkit-image:  map-get($gradients, webkit-image);
        $spec-image:    map-get($gradients, spec-image);
      }

      @else if $gradient-type == "radial" {
        $gradients: _radial-gradient-parser($image);
        $webkit-image: map-get($gradients, webkit-image);
        $spec-image:   map-get($gradients, spec-image);
      }
    }

    $webkit-images: append($webkit-images, $webkit-image, comma);
    $spec-images:   append($spec-images,   $spec-image,   comma);
  }

  background-image: $webkit-images;
  background-image: $spec-images;
}

@mixin border-image($borders...) {
  $webkit-borders: ();
  $spec-borders: ();

  @each $border in $borders {
    $webkit-border: ();
    $spec-border: ();
    $border-type: type-of($border);

    @if $border-type == string or list {
      $border-str: if($border-type == list, nth($border, 1), $border);

      $url-str:       str-slice($border-str, 1, 3);
      $gradient-type: str-slice($border-str, 1, 6);

      @if $url-str == "url" {
        $webkit-border: $border;
        $spec-border:   $border;
      }

      @else if $gradient-type == "linear" {
        $gradients: _linear-gradient-parser("#{$border}");
        $webkit-border: map-get($gradients, webkit-image);
        $spec-border:   map-get($gradients, spec-image);
      }

      @else if $gradient-type == "radial" {
        $gradients: _radial-gradient-parser("#{$border}");
        $webkit-border: map-get($gradients, webkit-image);
        $spec-border:   map-get($gradients, spec-image);
      }

      @else {
        $webkit-border: $border;
        $spec-border:   $border;
      }
    }

    @else {
      $webkit-border: $border;
      $spec-border:   $border;
    }

    $webkit-borders: append($webkit-borders, $webkit-border, comma);
    $spec-borders:   append($spec-borders,   $spec-border,   comma);
  }

  -webkit-border-image: $webkit-borders;
          border-image: $spec-borders;
          border-style: solid;
}

//Examples:
// @include border-image(url("image.png"));
// @include border-image(url("image.png") 20 stretch);
// @include border-image(linear-gradient(45deg, orange, yellow));
// @include border-image(linear-gradient(45deg, orange, yellow) stretch);
// @include border-image(linear-gradient(45deg, orange, yellow) 20 30 40 50 stretch round);
// @include border-image(radial-gradient(top, cover, orange, yellow, orange));

@mixin calc($property, $value) {
  #{$property}: -webkit-calc(#{$value});
  #{$property}: calc(#{$value});
}

@mixin columns($arg: auto) {
  // <column-count> || <column-width>
  @include prefixer(columns, $arg, webkit moz spec);
}

@mixin column-count($int: auto) {
  // auto || integer
  @include prefixer(column-count, $int, webkit moz spec);
}

@mixin column-gap($length: normal) {
  // normal || length
  @include prefixer(column-gap, $length, webkit moz spec);
}

@mixin column-fill($arg: auto) {
  // auto || length
  @include prefixer(column-fill, $arg, webkit moz spec);
}

@mixin column-rule($arg) {
  // <border-width> || <border-style> || <color>
  @include prefixer(column-rule, $arg, webkit moz spec);
}

@mixin column-rule-color($color) {
  @include prefixer(column-rule-color, $color, webkit moz spec);
}

@mixin column-rule-style($style: none) {
  // none | hidden | dashed | dotted | double | groove | inset | inset | outset | ridge | solid
  @include prefixer(column-rule-style, $style, webkit moz spec);
}

@mixin column-rule-width ($width: none) {
  @include prefixer(column-rule-width, $width, webkit moz spec);
}

@mixin column-span($arg: none) {
  // none || all
  @include prefixer(column-span, $arg, webkit moz spec);
}

@mixin column-width($length: auto) {
  // auto || length
  @include prefixer(column-width, $length, webkit moz spec);
}

@mixin filter($function: none) {
  // <filter-function> [<filter-function]* | none
  @include prefixer(filter, $function, webkit spec);
}

// CSS3 Flexible Box Model and property defaults

// Custom shorthand notation for flexbox
@mixin box($orient: inline-axis, $pack: start, $align: stretch) {
  @include display-box;
  @include box-orient($orient);
  @include box-pack($pack);
  @include box-align($align);
}

@mixin display-box {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox; // IE 10
  display: box;
}

@mixin box-orient($orient: inline-axis) {
// horizontal|vertical|inline-axis|block-axis|inherit
  @include prefixer(box-orient, $orient, webkit moz spec);
}

@mixin box-pack($pack: start) {
// start|end|center|justify
  @include prefixer(box-pack, $pack, webkit moz spec);
  -ms-flex-pack: $pack; // IE 10
}

@mixin box-align($align: stretch) {
// start|end|center|baseline|stretch
  @include prefixer(box-align, $align, webkit moz spec);
  -ms-flex-align: $align; // IE 10
}

@mixin box-direction($direction: normal) {
// normal|reverse|inherit
  @include prefixer(box-direction, $direction, webkit moz spec);
  -ms-flex-direction: $direction; // IE 10
}

@mixin box-lines($lines: single) {
// single|multiple
  @include prefixer(box-lines, $lines, webkit moz spec);
}

@mixin box-ordinal-group($int: 1) {
  @include prefixer(box-ordinal-group, $int, webkit moz spec);
  -ms-flex-order: $int; // IE 10
}

@mixin box-flex($value: 0) {
  @include prefixer(box-flex, $value, webkit moz spec);
  -ms-flex: $value; // IE 10
}

@mixin box-flex-group($int: 1) {
  @include prefixer(box-flex-group, $int, webkit moz spec);
}

// CSS3 Flexible Box Model and property defaults
// Unified attributes for 2009, 2011, and 2012 flavours.

// 2009 - display (box | inline-box)
// 2011 - display (flexbox | inline-flexbox)
// 2012 - display (flex | inline-flex)
@mixin display($value) {
// flex | inline-flex
  @if $value == "flex" {
    // 2009
    display: -webkit-box;
    display: -moz-box;
    display: box;

    // 2012
    display: -webkit-flex;
    display: -moz-flex;
    display: -ms-flexbox; // 2011 (IE 10)
    display: flex;
  } @else if $value == "inline-flex" {
    display: -webkit-inline-box;
    display: -moz-inline-box;
    display: inline-box;

    display: -webkit-inline-flex;
    display: -moz-inline-flex;
    display: -ms-inline-flexbox;
    display: inline-flex;
  } @else {
    display: $value;
  }
}

// 2009 - box-flex (integer)
// 2011 - flex (decimal | width decimal)
// 2012 - flex (integer integer width)
@mixin flex($value) {

  // Grab flex-grow for older browsers.
  $flex-grow: nth($value, 1);

  // 2009
  @include prefixer(box-flex, $flex-grow, webkit moz spec);

  // 2011 (IE 10), 2012
  @include prefixer(flex, $value, webkit moz ms spec);
}

// 2009 - box-orient ( horizontal | vertical | inline-axis | block-axis)
//      - box-direction (normal | reverse)
// 2011 - flex-direction (row | row-reverse | column | column-reverse)
// 2012 - flex-direction (row | row-reverse | column | column-reverse)
@mixin flex-direction($value: row) {

  // Alt values.
  $value-2009: $value;
  $value-2011: $value;
  $direction: normal;

  @if $value == row {
    $value-2009: horizontal;
  } @else if $value == "row-reverse" {
    $value-2009: horizontal;
    $direction: reverse;
  } @else if $value == column {
    $value-2009: vertical;
  } @else if $value == "column-reverse" {
    $value-2009: vertical;
    $direction: reverse;
  }

  // 2009
  @include prefixer(box-orient, $value-2009, webkit moz spec);
  @include prefixer(box-direction, $direction, webkit moz spec);

  // 2012
  @include prefixer(flex-direction, $value, webkit moz spec);

  // 2011 (IE 10)
  -ms-flex-direction: $value;
}

// 2009 - box-lines (single | multiple)
// 2011 - flex-wrap (nowrap | wrap | wrap-reverse)
// 2012 - flex-wrap (nowrap | wrap | wrap-reverse)
@mixin flex-wrap($value: nowrap) {
  // Alt values
  $alt-value: $value;
  @if $value == nowrap {
    $alt-value: single;
  } @else if $value == wrap {
    $alt-value: multiple;
  } @else if $value == "wrap-reverse" {
    $alt-value: multiple;
  }

  @include prefixer(box-lines, $alt-value, webkit moz spec);
  @include prefixer(flex-wrap, $value, webkit moz ms spec);
}

// 2009 - TODO: parse values into flex-direction/flex-wrap
// 2011 - TODO: parse values into flex-direction/flex-wrap
// 2012 - flex-flow (flex-direction || flex-wrap)
@mixin flex-flow($value) {
  @include prefixer(flex-flow, $value, webkit moz spec);
}

// 2009 - box-ordinal-group (integer)
// 2011 - flex-order (integer)
// 2012 - order (integer)
@mixin order($int: 0) {
  // 2009
  @include prefixer(box-ordinal-group, $int, webkit moz spec);

  // 2012
  @include prefixer(order, $int, webkit moz spec);

  // 2011 (IE 10)
  -ms-flex-order: $int;
}

// 2012 - flex-grow (number)
@mixin flex-grow($number: 0) {
  @include prefixer(flex-grow, $number, webkit moz spec);
  -ms-flex-positive: $number;
}

// 2012 - flex-shrink (number)
@mixin flex-shrink($number: 1) {
  @include prefixer(flex-shrink, $number, webkit moz spec);
  -ms-flex-negative: $number;
}

// 2012 - flex-basis (number)
@mixin flex-basis($width: auto) {
  @include prefixer(flex-basis, $width, webkit moz spec);
  -ms-flex-preferred-size: $width;
}

// 2009 - box-pack (start | end | center | justify)
// 2011 - flex-pack (start | end | center | justify)
// 2012 - justify-content (flex-start | flex-end | center | space-between | space-around)
@mixin justify-content($value: flex-start) {

  // Alt values.
  $alt-value: $value;
  @if $value == "flex-start" {
    $alt-value: start;
  } @else if $value == "flex-end" {
    $alt-value: end;
  } @else if $value == "space-between" {
    $alt-value: justify;
  } @else if $value == "space-around" {
    $alt-value: distribute;
  }

  // 2009
  @include prefixer(box-pack, $alt-value, webkit moz spec);

  // 2012
  @include prefixer(justify-content, $value, webkit moz ms o spec);

  // 2011 (IE 10)
  -ms-flex-pack: $alt-value;
}

// 2009 - box-align (start | end | center | baseline | stretch)
// 2011 - flex-align (start | end | center | baseline | stretch)
// 2012 - align-items (flex-start | flex-end | center | baseline | stretch)
@mixin align-items($value: stretch) {

  $alt-value: $value;

  @if $value == "flex-start" {
    $alt-value: start;
  } @else if $value == "flex-end" {
    $alt-value: end;
  }

  // 2009
  @include prefixer(box-align, $alt-value, webkit moz spec);

  // 2012
  @include prefixer(align-items, $value, webkit moz ms o spec);

  // 2011 (IE 10)
  -ms-flex-align: $alt-value;
}

// 2011 - flex-item-align (auto | start | end | center | baseline | stretch)
// 2012 - align-self (auto | flex-start | flex-end | center | baseline | stretch)
@mixin align-self($value: auto) {

  $value-2011: $value;
  @if $value == "flex-start" {
    $value-2011: start;
  } @else if $value == "flex-end" {
    $value-2011: end;
  }

  // 2012
  @include prefixer(align-self, $value, webkit moz spec);

  // 2011 (IE 10)
  -ms-flex-item-align: $value-2011;
}

// 2011 - flex-line-pack (start | end | center | justify | distribute | stretch)
// 2012 - align-content (flex-start | flex-end | center | space-between | space-around | stretch)
@mixin align-content($value: stretch) {

  $value-2011: $value;
  @if $value == "flex-start" {
    $value-2011: start;
  } @else if $value == "flex-end" {
    $value-2011: end;
  } @else if $value == "space-between" {
    $value-2011: justify;
  } @else if $value == "space-around" {
    $value-2011: distribute;
  }

  // 2012
  @include prefixer(align-content, $value, webkit moz spec);

  // 2011 (IE 10)
  -ms-flex-line-pack: $value-2011;
}

@mixin font-face(
  $font-family,
  $file-path,
  $weight: normal,
  $style: normal,
  $asset-pipeline: $asset-pipeline,
  $file-formats: eot woff2 woff ttf svg) {

  $font-url-prefix: font-url-prefixer($asset-pipeline);

  @font-face {
    font-family: $font-family;
    font-style: $style;
    font-weight: $weight;

    src: font-source-declaration(
      $font-family,
      $file-path,
      $asset-pipeline,
      $file-formats,
      $font-url-prefix
    );
  }
}

@mixin font-feature-settings($settings...) {
  @if length($settings) == 0 { $settings: none; }
  @include prefixer(font-feature-settings, $settings, webkit moz ms spec);
}

// HiDPI mixin. Default value set to 1.3 to target Google Nexus 7 (http://bjango.com/articles/min-device-pixel-ratio/)
@mixin hidpi($ratio: 1.3) {
  @media only screen and (-webkit-min-device-pixel-ratio: $ratio),
  only screen and (min--moz-device-pixel-ratio: $ratio),
  only screen and (-o-min-device-pixel-ratio: #{$ratio}/1),
  only screen and (min-resolution: round($ratio * 96dpi)),
  only screen and (min-resolution: $ratio * 1dppx) {
    @content;
  }
}

@mixin hyphens($hyphenation: none) {
  // none | manual | auto
  @include prefixer(hyphens, $hyphenation, webkit moz ms spec);
}

@mixin image-rendering ($mode:auto) {

  @if ($mode == crisp-edges) {
    -ms-interpolation-mode: nearest-neighbor; // IE8+
    image-rendering: -moz-crisp-edges;
    image-rendering: -o-crisp-edges;
    image-rendering: -webkit-optimize-contrast;
    image-rendering: crisp-edges;
  }

  @else {
    image-rendering: $mode;
  }
}

// Adds keyframes blocks for supported prefixes, removing redundant prefixes in the block's content
@mixin keyframes($name) {
  $original-prefix-for-webkit:    $prefix-for-webkit;
  $original-prefix-for-mozilla:   $prefix-for-mozilla;
  $original-prefix-for-microsoft: $prefix-for-microsoft;
  $original-prefix-for-opera:     $prefix-for-opera;
  $original-prefix-for-spec:      $prefix-for-spec;

  @if $original-prefix-for-webkit {
    @include disable-prefix-for-all();
    $prefix-for-webkit: true !global;
    @-webkit-keyframes #{$name} {
      @content;
    }
  }

  @if $original-prefix-for-mozilla {
    @include disable-prefix-for-all();
    $prefix-for-mozilla: true !global;
    @-moz-keyframes #{$name} {
      @content;
    }
  }

  $prefix-for-webkit:    $original-prefix-for-webkit    !global;
  $prefix-for-mozilla:   $original-prefix-for-mozilla   !global;
  $prefix-for-microsoft: $original-prefix-for-microsoft !global;
  $prefix-for-opera:     $original-prefix-for-opera     !global;
  $prefix-for-spec:      $original-prefix-for-spec      !global;

  @if $original-prefix-for-spec {
    @keyframes #{$name} {
      @content;
    }
  }
}

@mixin linear-gradient($pos, $g1, $g2: null,
                       $g3: null, $g4: null,
                       $g5: null, $g6: null,
                       $g7: null, $g8: null,
                       $g9: null, $g10: null,
                       $fallback: null) {
  // Detect what type of value exists in $pos
  $pos-type: type-of(nth($pos, 1));
  $pos-spec: null;
  $pos-degree: null;

  // If $pos is missing from mixin, reassign vars and add default position
  @if ($pos-type == color) or (nth($pos, 1) == "transparent")  {
    $g10: $g9; $g9: $g8; $g8: $g7; $g7: $g6; $g6: $g5;
    $g5: $g4; $g4: $g3; $g3: $g2; $g2: $g1; $g1: $pos;
    $pos: null;
  }

  @if $pos {
    $positions: _linear-positions-parser($pos);
    $pos-degree: nth($positions, 1);
    $pos-spec:   nth($positions, 2);
  }

  $full: $g1, $g2, $g3, $g4, $g5, $g6, $g7, $g8, $g9, $g10;

  // Set $g1 as the default fallback color
  $fallback-color: nth($g1, 1);

  // If $fallback is a color use that color as the fallback color
  @if (type-of($fallback) == color) or ($fallback == "transparent") {
    $fallback-color: $fallback;
  }

  background-color: $fallback-color;
  background-image: -webkit-linear-gradient($pos-degree $full); // Safari 5.1+, Chrome
  background-image: unquote("linear-gradient(#{$pos-spec}#{$full})");
}

@mixin perspective($depth: none) {
  // none | <length>
  @include prefixer(perspective, $depth, webkit moz spec);
}

@mixin perspective-origin($value: 50% 50%) {
  @include prefixer(perspective-origin, $value, webkit moz spec);
}

@mixin placeholder {
  $placeholders: ":-webkit-input" ":-moz" "-moz" "-ms-input";
  @each $placeholder in $placeholders {
    &:#{$placeholder}-placeholder {
      @content;
    }
  }
}

// Requires Sass 3.1+
@mixin radial-gradient($g1, $g2,
                       $g3: null, $g4: null,
                       $g5: null, $g6: null,
                       $g7: null, $g8: null,
                       $g9: null, $g10: null,
                       $pos: null,
                       $shape-size: null,
                       $fallback: null) {

  $data: _radial-arg-parser($g1, $g2, $pos, $shape-size);
  $g1:  nth($data, 1);
  $g2:  nth($data, 2);
  $pos: nth($data, 3);
  $shape-size: nth($data, 4);

  $full: $g1, $g2, $g3, $g4, $g5, $g6, $g7, $g8, $g9, $g10;

  // Strip deprecated cover/contain for spec
  $shape-size-spec: _shape-size-stripper($shape-size);

  // Set $g1 as the default fallback color
  $first-color: nth($full, 1);
  $fallback-color: nth($first-color, 1);

  @if (type-of($fallback) == color) or ($fallback == "transparent") {
    $fallback-color: $fallback;
  }

  // Add Commas and spaces
  $shape-size: if($shape-size, "#{$shape-size}, ", null);
  $pos:        if($pos, "#{$pos}, ", null);
  $pos-spec:   if($pos, "at #{$pos}", null);
  $shape-size-spec: if(($shape-size-spec != " ") and ($pos == null), "#{$shape-size-spec}, ", "#{$shape-size-spec} ");

  background-color:  $fallback-color;
  background-image: -webkit-radial-gradient(#{$pos}#{$shape-size}#{$full});
  background-image: radial-gradient(#{$shape-size-spec}#{$pos-spec}#{$full});
}

@charset "UTF-8";

/// Outputs the spec and prefixed versions of the `::selection` pseudo-element.
///
/// @param {Bool} $current-selector [false]
///   If set to `true`, it takes the current element into consideration.
///
/// @example scss - Usage
///   .element {
///     @include selection(true) {
///       background-color: #ffbb52;
///     }
///   }
///
/// @example css - CSS Output
///   .element::-moz-selection {
///     background-color: #ffbb52;
///   }
///
///   .element::selection {
///     background-color: #ffbb52;
///   }

@mixin selection($current-selector: false) {
  @if $current-selector {
    &::-moz-selection {
      @content;
    }

    &::selection {
      @content;
    }
  } @else {
    ::-moz-selection {
      @content;
    }

    ::selection {
      @content;
    }
  }
}

@mixin text-decoration($value) {
// <text-decoration-line> || <text-decoration-style> || <text-decoration-color>
  @include prefixer(text-decoration, $value, moz);
}

@mixin text-decoration-line($line: none) {
// none || underline || overline || line-through
  @include prefixer(text-decoration-line, $line, moz);
}

@mixin text-decoration-style($style: solid) {
// solid || double || dotted || dashed || wavy
  @include prefixer(text-decoration-style, $style, moz webkit);
}

@mixin text-decoration-color($color: currentColor) {
// currentColor || <color>
  @include prefixer(text-decoration-color, $color, moz);
}

@mixin transform($property: none) {
  // none | <transform-function>
  @include prefixer(transform, $property, webkit moz ms o spec);
}

@mixin transform-origin($axes: 50%) {
  // x-axis - left | center | right  | length | %
  // y-axis - top  | center | bottom | length | %
  // z-axis -                          length
  @include prefixer(transform-origin, $axes, webkit moz ms o spec);
}

@mixin transform-style($style: flat) {
  @include prefixer(transform-style, $style, webkit moz ms o spec);
}

// Shorthand mixin. Supports multiple parentheses-deliminated values for each variable.
// Example: @include transition (all 2s ease-in-out);
//          @include transition (opacity 1s ease-in 2s, width 2s ease-out);
//          @include transition-property (transform, opacity);

@mixin transition($properties...) {
  // Fix for vendor-prefix transform property
  $needs-prefixes: false;
  $webkit: ();
  $moz: ();
  $spec: ();

  // Create lists for vendor-prefixed transform
  @each $list in $properties {
    @if nth($list, 1) == "transform" {
      $needs-prefixes: true;
      $list1: -webkit-transform;
      $list2: -moz-transform;
      $list3: ();

      @each $var in $list {
        $list3: join($list3, $var);

        @if $var != "transform" {
          $list1: join($list1, $var);
          $list2: join($list2, $var);
        }
      }

      $webkit: append($webkit, $list1);
      $moz:    append($moz,    $list2);
      $spec:   append($spec,   $list3);
    } @else {
      $webkit: append($webkit, $list, comma);
      $moz:    append($moz,    $list, comma);
      $spec:   append($spec,   $list, comma);
    }
  }

  @if $needs-prefixes {
    -webkit-transition: $webkit;
       -moz-transition: $moz;
            transition: $spec;
  } @else {
    @if length($properties) >= 1 {
      @include prefixer(transition, $properties, webkit moz spec);
    } @else {
      $properties: all 0.15s ease-out 0s;
      @include prefixer(transition, $properties, webkit moz spec);
    }
  }
}

@mixin transition-property($properties...) {
  -webkit-transition-property: transition-property-names($properties, "webkit");
     -moz-transition-property: transition-property-names($properties, "moz");
          transition-property: transition-property-names($properties, false);
}

@mixin transition-duration($times...) {
  @include prefixer(transition-duration, $times, webkit moz spec);
}

@mixin transition-timing-function($motions...) {
  // ease | linear | ease-in | ease-out | ease-in-out | cubic-bezier()
  @include prefixer(transition-timing-function, $motions, webkit moz spec);
}

@mixin transition-delay($times...) {
  @include prefixer(transition-delay, $times, webkit moz spec);
}

@mixin user-select($value: none) {
  @include prefixer(user-select, $value, webkit moz ms spec);
}


@charset "UTF-8";

/// Provides a quick method for targeting `border-color` on specific sides of a box. Use a `null` value to “skip” a side.
///
/// @param {Arglist} $vals
///   List of arguments
///
/// @example scss - Usage
///   .element {
///     @include border-color(#a60b55 #76cd9c null #e8ae1a);
///   }
///
/// @example css - CSS Output
///   .element {
///     border-left-color: #e8ae1a;
///     border-right-color: #76cd9c;
///     border-top-color: #a60b55;
///   }
///
/// @require {mixin} directional-property
///
/// @output `border-color`

@mixin border-color($vals...) {
  @include directional-property(border, color, $vals...);
}

@charset "UTF-8";

/// Provides a quick method for targeting `border-radius` on both corners on the side of a box.
///
/// @param {Number} $radii
///   List of arguments
///
/// @example scss - Usage
///   .element-one {
///     @include border-top-radius(5px);
///   }
///
///   .element-two {
///     @include border-left-radius(3px);
///   }
///
/// @example css - CSS Output
///   .element-one {
///     border-top-left-radius: 5px;
///     border-top-right-radius: 5px;
///   }
///
///   .element-two {
///     border-bottom-left-radius: 3px;
///     border-top-left-radius: 3px;
///   }
///
/// @output `border-radius`

@mixin border-top-radius($radii) {
  border-top-left-radius: $radii;
  border-top-right-radius: $radii;
}

@mixin border-right-radius($radii) {
  border-bottom-right-radius: $radii;
  border-top-right-radius: $radii;
}

@mixin border-bottom-radius($radii) {
  border-bottom-left-radius: $radii;
  border-bottom-right-radius: $radii;
}

@mixin border-left-radius($radii) {
  border-bottom-left-radius: $radii;
  border-top-left-radius: $radii;
}

@charset "UTF-8";

/// Provides a quick method for targeting `border-style` on specific sides of a box. Use a `null` value to “skip” a side.
///
/// @param {Arglist} $vals
///   List of arguments
///
/// @example scss - Usage
///   .element {
///     @include border-style(dashed null solid);
///   }
///
/// @example css - CSS Output
///   .element {
///     border-bottom-style: solid;
///     border-top-style: dashed;
///   }
///
/// @require {mixin} directional-property
///
/// @output `border-style`

@mixin border-style($vals...) {
  @include directional-property(border, style, $vals...);
}

@charset "UTF-8";

/// Provides a quick method for targeting `border-width` on specific sides of a box. Use a `null` value to “skip” a side.
///
/// @param {Arglist} $vals
///   List of arguments
///
/// @example scss - Usage
///   .element {
///     @include border-width(1em null 20px);
///   }
///
/// @example css - CSS Output
///   .element {
///     border-bottom-width: 20px;
///     border-top-width: 1em;
///   }
///
/// @require {mixin} directional-property
///
/// @output `border-width`

@mixin border-width($vals...) {
  @include directional-property(border, width, $vals...);
}

@charset "UTF-8";

/// Generates variables for all buttons. Please note that you must use interpolation on the variable: `#{$all-buttons}`.
///
/// @example scss - Usage
///   #{$all-buttons} {
///     background-color: #f00;
///   }
///
///   #{$all-buttons-focus},
///   #{$all-buttons-hover} {
///     background-color: #0f0;
///   }
///
///   #{$all-buttons-active} {
///     background-color: #00f;
///   }
///
/// @example css - CSS Output
///   button,
///   input[type="button"],
///   input[type="reset"],
///   input[type="submit"] {
///     background-color: #f00;
///   }
///
///   button:focus,
///   input[type="button"]:focus,
///   input[type="reset"]:focus,
///   input[type="submit"]:focus,
///   button:hover,
///   input[type="button"]:hover,
///   input[type="reset"]:hover,
///   input[type="submit"]:hover {
///     background-color: #0f0;
///   }
///
///   button:active,
///   input[type="button"]:active,
///   input[type="reset"]:active,
///   input[type="submit"]:active {
///     background-color: #00f;
///   }
///
/// @require assign-inputs
///
/// @type List
///
/// @todo Remove double assigned variables (Lines 59–62) in v5.0.0

$buttons-list: 'button',
               'input[type="button"]',
               'input[type="reset"]',
               'input[type="submit"]';

$all-buttons:        assign-inputs($buttons-list);
$all-buttons-active: assign-inputs($buttons-list, active);
$all-buttons-focus:  assign-inputs($buttons-list, focus);
$all-buttons-hover:  assign-inputs($buttons-list, hover);

$all-button-inputs:        $all-buttons;
$all-button-inputs-active: $all-buttons-active;
$all-button-inputs-focus:  $all-buttons-focus;
$all-button-inputs-hover:  $all-buttons-hover;

@charset "UTF-8";

/// Provides an easy way to include a clearfix for containing floats.
///
/// @link http://cssmojo.com/latest_new_clearfix_so_far/
///
/// @example scss - Usage
///   .element {
///     @include clearfix;
///   }
///
/// @example css - CSS Output
///   .element::after {
///     clear: both;
///     content: "";
///     display: table;
///   }

@mixin clearfix {
  &::after {
    clear: both;
    content: "";
    display: table;
  }
}

@charset "UTF-8";

/// Truncates text and adds an ellipsis to represent overflow.
///
/// @param {Number} $width [100%]
///   Max-width for the string to respect before being truncated
///
/// @example scss - Usage
///   .element {
///     @include ellipsis;
///   }
///
/// @example css - CSS Output
///   .element {
///     display: inline-block;
///     max-width: 100%;
///     overflow: hidden;
///     text-overflow: ellipsis;
///     white-space: nowrap;
///     word-wrap: normal;
///   }

@mixin ellipsis($width: 100%) {
  display: inline-block;
  max-width: $width;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
}

@charset "UTF-8";

/// Georgia font stack.
///
/// @type List

$georgia: "Georgia", "Cambria", "Times New Roman", "Times", serif;

/// Helvetica font stack.
///
/// @type List

$helvetica: "Helvetica Neue", "Helvetica", "Roboto", "Arial", sans-serif;

/// Lucida Grande font stack.
///
/// @type List

$lucida-grande: "Lucida Grande", "Tahoma", "Verdana", "Arial", sans-serif;

/// Monospace font stack.
///
/// @type List

$monospace: "Bitstream Vera Sans Mono", "Consolas", "Courier", monospace;

/// Verdana font stack.
///
/// @type List

$verdana: "Verdana", "Geneva", sans-serif;

/// Hides the text in an element, commonly used to show an image. Some elements will need block-level styles applied.
///
/// @link http://zeldman.com/2012/03/01/replacing-the-9999px-hack-new-image-replacement
///
/// @example scss - Usage
///   .element {
///     @include hide-text;
///   }
///
/// @example css - CSS Output
///   .element {
///     overflow: hidden;
///     text-indent: 101%;
///     white-space: nowrap;
///   }
///
/// @todo Remove height argument in v5.0.0

@mixin hide-text($height: null) {
  overflow: hidden;
  text-indent: 101%;
  white-space: nowrap;

  @if $height {
    @warn "The `hide-text` mixin has changed and no longer requires a height. The height argument will no longer be accepted in v5.0.0";
  }
}

@charset "UTF-8";

/// Provides a quick method for targeting `margin` on specific sides of a box. Use a `null` value to “skip” a side.
///
/// @param {Arglist} $vals
///   List of arguments
///
/// @example scss - Usage
///   .element {
///     @include margin(null 10px 3em 20vh);
///   }
///
/// @example css - CSS Output
///   .element {
///     margin-bottom: 3em;
///     margin-left: 20vh;
///     margin-right: 10px;
///   }
///
/// @require {mixin} directional-property
///
/// @output `margin`

@mixin margin($vals...) {
  @include directional-property(margin, false, $vals...);
}

@charset "UTF-8";

/// Provides a quick method for targeting `padding` on specific sides of a box. Use a `null` value to “skip” a side.
///
/// @param {Arglist} $vals
///   List of arguments
///
/// @example scss - Usage
///   .element {
///     @include padding(12vh null 10px 5%);
///   }
///
/// @example css - CSS Output
///   .element {
///     padding-bottom: 10px;
///     padding-left: 5%;
///     padding-top: 12vh;
///   }
///
/// @require {mixin} directional-property
///
/// @output `padding`

@mixin padding($vals...) {
  @include directional-property(padding, false, $vals...);
}

@charset "UTF-8";

/// Provides a quick method for setting an element’s position. Use a `null` value to “skip” a side.
///
/// @param {Position} $position [relative]
///   A CSS position value
///
/// @param {Arglist} $coordinates [null null null null]
///   List of values that correspond to the 4-value syntax for the edges of a box
///
/// @example scss - Usage
///   .element {
///     @include position(absolute, 0 null null 10em);
///   }
///
/// @example css - CSS Output
///   .element {
///     left: 10em;
///     position: absolute;
///     top: 0;
///   }
///
/// @require {function} is-length
/// @require {function} unpack

@mixin position($position: relative, $coordinates: null null null null) {
  @if type-of($position) == list {
    $coordinates: $position;
    $position: relative;
  }

  $coordinates: unpack($coordinates);

  $offsets: (
    top:    nth($coordinates, 1),
    right:  nth($coordinates, 2),
    bottom: nth($coordinates, 3),
    left:   nth($coordinates, 4)
  );

  position: $position;

  @each $offset, $value in $offsets {
    @if is-length($value) {
      #{$offset}: $value;
    }
  }
}

@charset "UTF-8";

/// A mixin for generating vendor prefixes on non-standardized properties.
///
/// @param {String} $property
///   Property to prefix
///
/// @param {*} $value
///   Value to use
///
/// @param {List} $prefixes
///   Prefixes to define
///
/// @example scss - Usage
///   .element {
///     @include prefixer(border-radius, 10px, webkit ms spec);
///   }
///
/// @example css - CSS Output
///   .element {
///     -webkit-border-radius: 10px;
///     -moz-border-radius: 10px;
///     border-radius: 10px;
///   }
///
/// @require {variable} $prefix-for-webkit
/// @require {variable} $prefix-for-mozilla
/// @require {variable} $prefix-for-microsoft
/// @require {variable} $prefix-for-opera
/// @require {variable} $prefix-for-spec

@mixin prefixer($property, $value, $prefixes) {
  @each $prefix in $prefixes {
    @if $prefix == webkit {
      @if $prefix-for-webkit {
        -webkit-#{$property}: $value;
      }
    } @else if $prefix == moz {
      @if $prefix-for-mozilla {
        -moz-#{$property}: $value;
      }
    } @else if $prefix == ms {
      @if $prefix-for-microsoft {
        -ms-#{$property}: $value;
      }
    } @else if $prefix == o {
      @if $prefix-for-opera {
        -o-#{$property}: $value;
      }
    } @else if $prefix == spec {
      @if $prefix-for-spec {
        #{$property}: $value;
      }
    } @else  {
      @warn "Unrecognized prefix: #{$prefix}";
    }
  }
}

@mixin disable-prefix-for-all() {
  $prefix-for-webkit:    false !global;
  $prefix-for-mozilla:   false !global;
  $prefix-for-microsoft: false !global;
  $prefix-for-opera:     false !global;
  $prefix-for-spec:      false !global;
}

@mixin retina-image($filename, $background-size, $extension: png, $retina-filename: null, $retina-suffix: _2x, $asset-pipeline: $asset-pipeline) {
  @if $asset-pipeline {
    background-image: image-url("#{$filename}.#{$extension}");
  } @else {
    background-image:       url("#{$filename}.#{$extension}");
  }

  @include hidpi {
    @if $asset-pipeline {
      @if $retina-filename {
        background-image: image-url("#{$retina-filename}.#{$extension}");
      } @else {
        background-image: image-url("#{$filename}#{$retina-suffix}.#{$extension}");
      }
    } @else {
      @if $retina-filename {
        background-image: url("#{$retina-filename}.#{$extension}");
      } @else {
        background-image: url("#{$filename}#{$retina-suffix}.#{$extension}");
      }
    }

    background-size: $background-size;
  }
}

@charset "UTF-8";

/// Sets the `width` and `height` of the element.
///
/// @param {List} $size
///   A list of at most 2 size values.
///
///   If there is only a single value in `$size` it is used for both width and height. All units are supported.
///
/// @example scss - Usage
///   .first-element {
///     @include size(2em);
///   }
///
///   .second-element {
///     @include size(auto 10em);
///   }
///
/// @example css - CSS Output
///   .first-element {
///     width: 2em;
///     height: 2em;
///   }
///
///   .second-element {
///     width: auto;
///     height: 10em;
///   }
///
/// @todo Refactor in 5.0.0 to use a comma-separated argument

@mixin size($value) {
  $width: nth($value, 1);
  $height: $width;

  @if length($value) > 1 {
    $height: nth($value, 2);
  }

  @if is-size($height) {
    height: $height;
  } @else {
    @warn "`#{$height}` is not a valid length for the `$height` parameter in the `size` mixin.";
  }

  @if is-size($width) {
    width: $width;
  } @else {
    @warn "`#{$width}` is not a valid length for the `$width` parameter in the `size` mixin.";
  }
}

@charset "UTF-8";

/// Generates variables for all text-based inputs. Please note that you must use interpolation on the variable: `#{$all-text-inputs}`.
///
/// @example scss - Usage
///   #{$all-text-inputs} {
///     border: 1px solid #f00;
///   }
///
///   #{$all-text-inputs-focus},
///   #{$all-text-inputs-hover} {
///     border: 1px solid #0f0;
///   }
///
///   #{$all-text-inputs-active} {
///     border: 1px solid #00f;
///   }
///
/// @example css - CSS Output
///   input[type="color"],
///   input[type="date"],
///   input[type="datetime"],
///   input[type="datetime-local"],
///   input[type="email"],
///   input[type="month"],
///   input[type="number"],
///   input[type="password"],
///   input[type="search"],
///   input[type="tel"],
///   input[type="text"],
///   input[type="time"],
///   input[type="url"],
///   input[type="week"],
///   textarea {
///     border: 1px solid #f00;
///   }
///
///   input[type="color"]:focus,
///   input[type="date"]:focus,
///   input[type="datetime"]:focus,
///   input[type="datetime-local"]:focus,
///   input[type="email"]:focus,
///   input[type="month"]:focus,
///   input[type="number"]:focus,
///   input[type="password"]:focus,
///   input[type="search"]:focus,
///   input[type="tel"]:focus,
///   input[type="text"]:focus,
///   input[type="time"]:focus,
///   input[type="url"]:focus,
///   input[type="week"]:focus,
///   textarea:focus,
///   input[type="color"]:hover,
///   input[type="date"]:hover,
///   input[type="datetime"]:hover,
///   input[type="datetime-local"]:hover,
///   input[type="email"]:hover,
///   input[type="month"]:hover,
///   input[type="number"]:hover,
///   input[type="password"]:hover,
///   input[type="search"]:hover,
///   input[type="tel"]:hover,
///   input[type="text"]:hover,
///   input[type="time"]:hover,
///   input[type="url"]:hover,
///   input[type="week"]:hover,
///   textarea:hover {
///     border: 1px solid #0f0;
///   }
///
///   input[type="color"]:active,
///   input[type="date"]:active,
///   input[type="datetime"]:active,
///   input[type="datetime-local"]:active,
///   input[type="email"]:active,
///   input[type="month"]:active,
///   input[type="number"]:active,
///   input[type="password"]:active,
///   input[type="search"]:active,
///   input[type="tel"]:active,
///   input[type="text"]:active,
///   input[type="time"]:active,
///   input[type="url"]:active,
///   input[type="week"]:active,
///   textarea:active {
///     border: 1px solid #00f;
///   }
///
/// @require assign-inputs
///
/// @type List

$text-inputs-list: 'input[type="color"]',
                   'input[type="date"]',
                   'input[type="datetime"]',
                   'input[type="datetime-local"]',
                   'input[type="email"]',
                   'input[type="month"]',
                   'input[type="number"]',
                   'input[type="password"]',
                   'input[type="search"]',
                   'input[type="tel"]',
                   'input[type="text"]',
                   'input[type="time"]',
                   'input[type="url"]',
                   'input[type="week"]',
                   'input:not([type])',
                   'textarea';

$all-text-inputs:        assign-inputs($text-inputs-list);
$all-text-inputs-active: assign-inputs($text-inputs-list, active);
$all-text-inputs-focus:  assign-inputs($text-inputs-list, focus);
$all-text-inputs-hover:  assign-inputs($text-inputs-list, hover);

@charset "UTF-8";

/// CSS cubic-bezier timing functions. Timing functions courtesy of jquery.easie (github.com/jaukia/easie)
///
/// Timing functions are the same as demoed here: http://jqueryui.com/resources/demos/effect/easing.html
///
/// @type cubic-bezier

$ease-in-quad:      cubic-bezier(0.550,  0.085, 0.680, 0.530);
$ease-in-cubic:     cubic-bezier(0.550,  0.055, 0.675, 0.190);
$ease-in-quart:     cubic-bezier(0.895,  0.030, 0.685, 0.220);
$ease-in-quint:     cubic-bezier(0.755,  0.050, 0.855, 0.060);
$ease-in-sine:      cubic-bezier(0.470,  0.000, 0.745, 0.715);
$ease-in-expo:      cubic-bezier(0.950,  0.050, 0.795, 0.035);
$ease-in-circ:      cubic-bezier(0.600,  0.040, 0.980, 0.335);
$ease-in-back:      cubic-bezier(0.600, -0.280, 0.735, 0.045);

$ease-out-quad:     cubic-bezier(0.250,  0.460, 0.450, 0.940);
$ease-out-cubic:    cubic-bezier(0.215,  0.610, 0.355, 1.000);
$ease-out-quart:    cubic-bezier(0.165,  0.840, 0.440, 1.000);
$ease-out-quint:    cubic-bezier(0.230,  1.000, 0.320, 1.000);
$ease-out-sine:     cubic-bezier(0.390,  0.575, 0.565, 1.000);
$ease-out-expo:     cubic-bezier(0.190,  1.000, 0.220, 1.000);
$ease-out-circ:     cubic-bezier(0.075,  0.820, 0.165, 1.000);
$ease-out-back:     cubic-bezier(0.175,  0.885, 0.320, 1.275);

$ease-in-out-quad:  cubic-bezier(0.455,  0.030, 0.515, 0.955);
$ease-in-out-cubic: cubic-bezier(0.645,  0.045, 0.355, 1.000);
$ease-in-out-quart: cubic-bezier(0.770,  0.000, 0.175, 1.000);
$ease-in-out-quint: cubic-bezier(0.860,  0.000, 0.070, 1.000);
$ease-in-out-sine:  cubic-bezier(0.445,  0.050, 0.550, 0.950);
$ease-in-out-expo:  cubic-bezier(1.000,  0.000, 0.000, 1.000);
$ease-in-out-circ:  cubic-bezier(0.785,  0.135, 0.150, 0.860);
$ease-in-out-back:  cubic-bezier(0.680, -0.550, 0.265, 1.550);

@mixin triangle($size, $color, $direction) {
  $width: nth($size, 1);
  $height: nth($size, length($size));
  $foreground-color: nth($color, 1);
  $background-color: if(length($color) == 2, nth($color, 2), transparent);
  height: 0;
  width: 0;

  @if ($direction == up) or ($direction == down) or ($direction == right) or ($direction == left) {
    $width: $width / 2;
    $height: if(length($size) > 1, $height, $height/2);

    @if $direction == up {
      border-bottom: $height solid $foreground-color;
      border-left: $width solid $background-color;
      border-right: $width solid $background-color;
    } @else if $direction == right {
      border-bottom: $width solid $background-color;
      border-left: $height solid $foreground-color;
      border-top: $width solid $background-color;
    } @else if $direction == down {
      border-left: $width solid $background-color;
      border-right: $width solid $background-color;
      border-top: $height solid $foreground-color;
    } @else if $direction == left {
      border-bottom: $width solid $background-color;
      border-right: $height solid $foreground-color;
      border-top: $width solid $background-color;
    }
  } @else if ($direction == up-right) or ($direction == up-left) {
    border-top: $height solid $foreground-color;

    @if $direction == up-right {
      border-left:  $width solid $background-color;
    } @else if $direction == up-left {
      border-right: $width solid $background-color;
    }
  } @else if ($direction == down-right) or ($direction == down-left) {
    border-bottom: $height solid $foreground-color;

    @if $direction == down-right {
      border-left:  $width solid $background-color;
    } @else if $direction == down-left {
      border-right: $width solid $background-color;
    }
  } @else if ($direction == inset-up) {
    border-color: $background-color $background-color $foreground-color;
    border-style: solid;
    border-width: $height $width;
  } @else if ($direction == inset-down) {
    border-color: $foreground-color $background-color $background-color;
    border-style: solid;
    border-width: $height $width;
  } @else if ($direction == inset-right) {
    border-color: $background-color $background-color $background-color $foreground-color;
    border-style: solid;
    border-width: $width $height;
  } @else if ($direction == inset-left) {
    border-color: $background-color $foreground-color $background-color $background-color;
    border-style: solid;
    border-width: $width $height;
  }
}

@charset "UTF-8";

/// Provides an easy way to change the `word-wrap` property.
///
/// @param {String} $wrap [break-word]
///   Value for the `word-break` property.
///
/// @example scss - Usage
///   .wrapper {
///     @include word-wrap(break-word);
///   }
///
/// @example css - CSS Output
///   .wrapper {
///     overflow-wrap: break-word;
///     word-break: break-all;
///     word-wrap: break-word;
///   }

@mixin word-wrap($wrap: break-word) {
  overflow-wrap: $wrap;
  word-wrap: $wrap;

  @if $wrap == break-word {
    word-break: break-all;
  } @else {
    word-break: $wrap;
  }
}


// The following features have been deprecated and will be removed in the next MAJOR version release

@mixin inline-block {
  display: inline-block;

  @warn "The inline-block mixin is deprecated and will be removed in the next major version release";
}

@mixin button ($style: simple, $base-color: #4294f0, $text-size: inherit, $padding: 7px 18px) {

  @if type-of($style) == string and type-of($base-color) == color {
    @include buttonstyle($style, $base-color, $text-size, $padding);
  }

  @if type-of($style) == string and type-of($base-color) == number {
    $padding: $text-size;
    $text-size: $base-color;
    $base-color: #4294f0;

    @if $padding == inherit {
      $padding: 7px 18px;
    }

    @include buttonstyle($style, $base-color, $text-size, $padding);
  }

  @if type-of($style) == color and type-of($base-color) == color {
    $base-color: $style;
    $style: simple;
    @include buttonstyle($style, $base-color, $text-size, $padding);
  }

  @if type-of($style) == color and type-of($base-color) == number {
    $padding: $text-size;
    $text-size: $base-color;
    $base-color: $style;
    $style: simple;

    @if $padding == inherit {
      $padding: 7px 18px;
    }

    @include buttonstyle($style, $base-color, $text-size, $padding);
  }

  @if type-of($style) == number {
    $padding: $base-color;
    $text-size: $style;
    $base-color: #4294f0;
    $style: simple;

    @if $padding == #4294f0 {
      $padding: 7px 18px;
    }

    @include buttonstyle($style, $base-color, $text-size, $padding);
  }

  &:disabled {
    cursor: not-allowed;
    opacity: 0.5;
  }

  @warn "The button mixin is deprecated and will be removed in the next major version release";
}

// Selector Style Button
@mixin buttonstyle($type, $b-color, $t-size, $pad) {
  // Grayscale button
  @if $type == simple and $b-color == grayscale($b-color) {
    @include simple($b-color, true, $t-size, $pad);
  }

  @if $type == shiny and $b-color == grayscale($b-color) {
    @include shiny($b-color, true, $t-size, $pad);
  }

  @if $type == pill and $b-color == grayscale($b-color) {
    @include pill($b-color, true, $t-size, $pad);
  }

  @if $type == flat and $b-color == grayscale($b-color) {
    @include flat($b-color, true, $t-size, $pad);
  }

  // Colored button
  @if $type == simple {
    @include simple($b-color, false, $t-size, $pad);
  }

  @else if $type == shiny {
    @include shiny($b-color, false, $t-size, $pad);
  }

  @else if $type == pill {
    @include pill($b-color, false, $t-size, $pad);
  }

  @else if $type == flat {
    @include flat($b-color, false, $t-size, $pad);
  }
}

// Simple Button
@mixin simple($base-color, $grayscale: false, $textsize: inherit, $padding: 7px 18px) {
  $color:         hsl(0, 0, 100%);
  $border:        adjust-color($base-color, $saturation:  9%,  $lightness: -14%);
  $inset-shadow:  adjust-color($base-color, $saturation: -8%,  $lightness:  15%);
  $stop-gradient: adjust-color($base-color, $saturation:  9%,  $lightness: -11%);
  $text-shadow:   adjust-color($base-color, $saturation:  15%, $lightness: -18%);

  @if is-light($base-color) {
    $color:       hsl(0, 0, 20%);
    $text-shadow: adjust-color($base-color, $saturation: 10%, $lightness: 4%);
  }

  @if $grayscale == true {
    $border:        grayscale($border);
    $inset-shadow:  grayscale($inset-shadow);
    $stop-gradient: grayscale($stop-gradient);
    $text-shadow:   grayscale($text-shadow);
  }

  border: 1px solid $border;
  border-radius: 3px;
  box-shadow: inset 0 1px 0 0 $inset-shadow;
  color: $color;
  display: inline-block;
  font-size: $textsize;
  font-weight: bold;
  @include linear-gradient ($base-color, $stop-gradient);
  padding: $padding;
  text-decoration: none;
  text-shadow: 0 1px 0 $text-shadow;
  background-clip: padding-box;

  &:hover:not(:disabled) {
    $base-color-hover:    adjust-color($base-color, $saturation: -4%, $lightness: -5%);
    $inset-shadow-hover:  adjust-color($base-color, $saturation: -7%, $lightness:  5%);
    $stop-gradient-hover: adjust-color($base-color, $saturation:  8%, $lightness: -14%);

    @if $grayscale == true {
      $base-color-hover:    grayscale($base-color-hover);
      $inset-shadow-hover:  grayscale($inset-shadow-hover);
      $stop-gradient-hover: grayscale($stop-gradient-hover);
    }

    @include linear-gradient ($base-color-hover, $stop-gradient-hover);

    box-shadow: inset 0 1px 0 0 $inset-shadow-hover;
    cursor: pointer;
  }

  &:active:not(:disabled),
  &:focus:not(:disabled) {
    $border-active:       adjust-color($base-color, $saturation: 9%, $lightness: -14%);
    $inset-shadow-active: adjust-color($base-color, $saturation: 7%, $lightness: -17%);

    @if $grayscale == true {
      $border-active:       grayscale($border-active);
      $inset-shadow-active: grayscale($inset-shadow-active);
    }

    border: 1px solid $border-active;
    box-shadow: inset 0 0 8px 4px $inset-shadow-active, inset 0 0 8px 4px $inset-shadow-active;
  }
}

// Shiny Button
@mixin shiny($base-color, $grayscale: false, $textsize: inherit, $padding: 7px 18px) {
  $color:         hsl(0, 0, 100%);
  $border:        adjust-color($base-color, $red: -117, $green: -111, $blue: -81);
  $border-bottom: adjust-color($base-color, $red: -126, $green: -127, $blue: -122);
  $fourth-stop:   adjust-color($base-color, $red: -79,  $green: -70,  $blue: -46);
  $inset-shadow:  adjust-color($base-color, $red:  37,  $green:  29,  $blue:  12);
  $second-stop:   adjust-color($base-color, $red: -56,  $green: -50,  $blue: -33);
  $text-shadow:   adjust-color($base-color, $red: -140, $green: -141, $blue: -114);
  $third-stop:    adjust-color($base-color, $red: -86,  $green: -75,  $blue: -48);

  @if is-light($base-color) {
    $color:       hsl(0, 0, 20%);
    $text-shadow: adjust-color($base-color, $saturation: 10%, $lightness: 4%);
  }

  @if $grayscale == true {
    $border:        grayscale($border);
    $border-bottom: grayscale($border-bottom);
    $fourth-stop:   grayscale($fourth-stop);
    $inset-shadow:  grayscale($inset-shadow);
    $second-stop:   grayscale($second-stop);
    $text-shadow:   grayscale($text-shadow);
    $third-stop:    grayscale($third-stop);
  }

  @include linear-gradient(top, $base-color 0%, $second-stop 50%, $third-stop 50%, $fourth-stop 100%);

  border: 1px solid $border;
  border-bottom: 1px solid $border-bottom;
  border-radius: 5px;
  box-shadow: inset 0 1px 0 0 $inset-shadow;
  color: $color;
  display: inline-block;
  font-size: $textsize;
  font-weight: bold;
  padding: $padding;
  text-align: center;
  text-decoration: none;
  text-shadow: 0 -1px 1px $text-shadow;

  &:hover:not(:disabled) {
    $first-stop-hover:  adjust-color($base-color, $red: -13, $green: -15, $blue: -18);
    $second-stop-hover: adjust-color($base-color, $red: -66, $green: -62, $blue: -51);
    $third-stop-hover:  adjust-color($base-color, $red: -93, $green: -85, $blue: -66);
    $fourth-stop-hover: adjust-color($base-color, $red: -86, $green: -80, $blue: -63);

    @if $grayscale == true {
      $first-stop-hover:  grayscale($first-stop-hover);
      $second-stop-hover: grayscale($second-stop-hover);
      $third-stop-hover:  grayscale($third-stop-hover);
      $fourth-stop-hover: grayscale($fourth-stop-hover);
    }

    @include linear-gradient(top, $first-stop-hover  0%,
                                  $second-stop-hover 50%,
                                  $third-stop-hover  50%,
                                  $fourth-stop-hover 100%);
    cursor: pointer;
  }

  &:active:not(:disabled),
  &:focus:not(:disabled) {
    $inset-shadow-active: adjust-color($base-color, $red: -111, $green: -116, $blue: -122);

    @if $grayscale == true {
      $inset-shadow-active: grayscale($inset-shadow-active);
    }

    box-shadow: inset 0 0 20px 0 $inset-shadow-active;
  }
}

// Pill Button
@mixin pill($base-color, $grayscale: false, $textsize: inherit, $padding: 7px 18px) {
  $color:         hsl(0, 0, 100%);
  $border-bottom: adjust-color($base-color, $hue:  8, $saturation: -11%, $lightness: -26%);
  $border-sides:  adjust-color($base-color, $hue:  4, $saturation: -21%, $lightness: -21%);
  $border-top:    adjust-color($base-color, $hue: -1, $saturation: -30%, $lightness: -15%);
  $inset-shadow:  adjust-color($base-color, $hue: -1, $saturation: -1%,  $lightness:  7%);
  $stop-gradient: adjust-color($base-color, $hue:  8, $saturation:  14%, $lightness: -10%);
  $text-shadow:   adjust-color($base-color, $hue:  5, $saturation: -19%, $lightness: -15%);

  @if is-light($base-color) {
    $color:       hsl(0, 0, 20%);
    $text-shadow: adjust-color($base-color, $saturation: 10%, $lightness: 4%);
  }

  @if $grayscale == true {
    $border-bottom: grayscale($border-bottom);
    $border-sides:  grayscale($border-sides);
    $border-top:    grayscale($border-top);
    $inset-shadow:  grayscale($inset-shadow);
    $stop-gradient: grayscale($stop-gradient);
    $text-shadow:   grayscale($text-shadow);
  }

  border: 1px solid $border-top;
  border-color: $border-top $border-sides $border-bottom;
  border-radius: 16px;
  box-shadow: inset 0 1px 0 0 $inset-shadow;
  color: $color;
  display: inline-block;
  font-size: $textsize;
  font-weight: normal;
  line-height: 1;
  @include linear-gradient ($base-color, $stop-gradient);
  padding: $padding;
  text-align: center;
  text-decoration: none;
  text-shadow: 0 -1px 1px $text-shadow;
  background-clip: padding-box;

  &:hover:not(:disabled) {
    $base-color-hover:    adjust-color($base-color,                                $lightness: -4.5%);
    $border-bottom:       adjust-color($base-color, $hue:  8, $saturation:  13.5%, $lightness: -32%);
    $border-sides:        adjust-color($base-color, $hue:  4, $saturation: -2%,    $lightness: -27%);
    $border-top:          adjust-color($base-color, $hue: -1, $saturation: -17%,   $lightness: -21%);
    $inset-shadow-hover:  adjust-color($base-color,           $saturation: -1%,    $lightness:  3%);
    $stop-gradient-hover: adjust-color($base-color, $hue:  8, $saturation: -4%,    $lightness: -15.5%);
    $text-shadow-hover:   adjust-color($base-color, $hue:  5, $saturation: -5%,    $lightness: -22%);

    @if $grayscale == true {
      $base-color-hover:    grayscale($base-color-hover);
      $border-bottom:       grayscale($border-bottom);
      $border-sides:        grayscale($border-sides);
      $border-top:          grayscale($border-top);
      $inset-shadow-hover:  grayscale($inset-shadow-hover);
      $stop-gradient-hover: grayscale($stop-gradient-hover);
      $text-shadow-hover:   grayscale($text-shadow-hover);
    }

    @include linear-gradient ($base-color-hover, $stop-gradient-hover);

    background-clip: padding-box;
    border: 1px solid $border-top;
    border-color: $border-top $border-sides $border-bottom;
    box-shadow: inset 0 1px 0 0 $inset-shadow-hover;
    cursor: pointer;
    text-shadow: 0 -1px 1px $text-shadow-hover;
  }

  &:active:not(:disabled),
  &:focus:not(:disabled) {
    $active-color:         adjust-color($base-color, $hue: 4,  $saturation: -12%,  $lightness: -10%);
    $border-active:        adjust-color($base-color, $hue: 6,  $saturation: -2.5%, $lightness: -30%);
    $border-bottom-active: adjust-color($base-color, $hue: 11, $saturation:  6%,   $lightness: -31%);
    $inset-shadow-active:  adjust-color($base-color, $hue: 9,  $saturation:  2%,   $lightness: -21.5%);
    $text-shadow-active:   adjust-color($base-color, $hue: 5,  $saturation: -12%,  $lightness: -21.5%);

    @if $grayscale == true {
      $active-color:         grayscale($active-color);
      $border-active:        grayscale($border-active);
      $border-bottom-active: grayscale($border-bottom-active);
      $inset-shadow-active:  grayscale($inset-shadow-active);
      $text-shadow-active:   grayscale($text-shadow-active);
    }

    background: $active-color;
    border: 1px solid $border-active;
    border-bottom: 1px solid $border-bottom-active;
    box-shadow: inset 0 0 6px 3px $inset-shadow-active;
    text-shadow: 0 -1px 1px $text-shadow-active;
  }
}

// Flat Button
@mixin flat($base-color, $grayscale: false, $textsize: inherit, $padding: 7px 18px) {
  $color:         hsl(0, 0, 100%);

  @if is-light($base-color) {
    $color:       hsl(0, 0, 20%);
  }

  background-color: $base-color;
  border-radius: 3px;
  border: 0;
  color: $color;
  display: inline-block;
  font-size: $textsize;
  font-weight: bold;
  padding: $padding;
  text-decoration: none;
  background-clip: padding-box;

  &:hover:not(:disabled){
    $base-color-hover:    adjust-color($base-color, $saturation: 4%, $lightness: 5%);

    @if $grayscale == true {
      $base-color-hover: grayscale($base-color-hover);
    }

    background-color: $base-color-hover;
    cursor: pointer;
  }

  &:active:not(:disabled),
  &:focus:not(:disabled) {
    $base-color-active: adjust-color($base-color, $saturation: -4%, $lightness: -5%);

    @if $grayscale == true {
      $base-color-active: grayscale($base-color-active);
    }

    background-color: $base-color-active;
    cursor: pointer;
  }
}

// Flexible grid
@function flex-grid($columns, $container-columns: $fg-max-columns) {
  $width: $columns * $fg-column + ($columns - 1) * $fg-gutter;
  $container-width: $container-columns * $fg-column + ($container-columns - 1) * $fg-gutter;
  @return percentage($width / $container-width);

  @warn "The flex-grid function is deprecated and will be removed in the next major version release";
}

// Flexible gutter
@function flex-gutter($container-columns: $fg-max-columns, $gutter: $fg-gutter) {
  $container-width: $container-columns * $fg-column + ($container-columns - 1) * $fg-gutter;
  @return percentage($gutter / $container-width);

  @warn "The flex-gutter function is deprecated and will be removed in the next major version release";
}

@function grid-width($n) {
  @return $n * $gw-column + ($n - 1) * $gw-gutter;

  @warn "The grid-width function is deprecated and will be removed in the next major version release";
}

@function golden-ratio($value, $increment) {
  @return modular-scale($increment, $value, $ratio: $golden);

  @warn "The golden-ratio function is deprecated and will be removed in the next major version release. Please use the modular-scale function, instead.";
}

@mixin box-sizing($box) {
  @include prefixer(box-sizing, $box, webkit moz spec);

  @warn "The box-sizing mixin is deprecated and will be removed in the next major version release. This property can now be used un-prefixed.";
}


// Functions
// Not function for Libsass compatibility
// https://github.com/sass/libsass/issues/368
@function is-not($value) {
  @return if($value, false, true);
}

// Checks if a number is even
@function is-even($int) {
  @return $int % 2 == 0;
}

// Checks if an element belongs to a list or not
@function belongs-to($tested-item, $list) {
  @return is-not(not-belongs-to($tested-item, $list));
}

@function not-belongs-to($tested-item, $list) {
  @return is-not(index($list, $tested-item));
}

// Contains display value
@function contains-display-value($query) {
  @return belongs-to(table, $query)
       or belongs-to(block, $query)
       or belongs-to(inline-block, $query)
       or belongs-to(inline, $query);
}

// Parses the first argument of span-columns()
@function container-span($span: $span) {
  @if length($span) == 3 {
    $container-columns: nth($span, 3);
    @return $container-columns;
  } @else if length($span) == 2 {
    $container-columns: nth($span, 2);
    @return $container-columns;
  }

  @return $grid-columns;
}

@function container-shift($shift: $shift) {
  $parent-columns: $grid-columns !default !global;

  @if length($shift) == 3 {
    $container-columns: nth($shift, 3);
    @return $container-columns;
  } @else if length($shift) == 2 {
    $container-columns: nth($shift, 2);
    @return $container-columns;
  }

  @return $parent-columns;
}

// Generates a striped background
@function gradient-stops($grid-columns, $color: $visual-grid-color) {
  $transparent: transparent;

  $column-width: flex-grid(1, $grid-columns);
  $gutter-width: flex-gutter($grid-columns);
  $column-offset: $column-width;

  $values: ($transparent 0, $color 0);

  @for $i from 1 to $grid-columns*2 {
    @if is-even($i) {
      $values: append($values, $transparent $column-offset, comma);
      $values: append($values, $color $column-offset, comma);
      $column-offset: $column-offset + $column-width;
    } @else {
      $values: append($values, $color $column-offset, comma);
      $values: append($values, $transparent $column-offset, comma);
      $column-offset: $column-offset + $gutter-width;
    }
  }

  @return $values;
}

// Layout direction
@function get-direction($layout, $default) {
  $direction: null;

  @if to-upper-case($layout) == "LTR" or to-upper-case($layout) == "RTL" {
    $direction: direction-from-layout($layout);
  } @else {
    $direction: direction-from-layout($default);
  }

  @return $direction;
}

@function direction-from-layout($layout) {
  $direction: null;

  @if to-upper-case($layout) == "LTR" {
    $direction: right;
  } @else {
    $direction: left;
  }

  @return $direction;
}

@function get-opposite-direction($direction) {
  $opposite-direction: left;

  @if $direction == "left" {
    $opposite-direction: right;
  }

  @return $opposite-direction;
}

@charset "UTF-8";

/// Returns a media context (media query / grid context) that can be stored in a variable and passed to `media()` as a single-keyword argument. Media contexts defined using `new-breakpoint` are used by the visual grid, as long as they are defined before importing Neat.
///
/// @param {List} $query
///   A list of media query features and values. Each `$feature` should have a corresponding `$value`.
///
///   If there is only a single `$value` in `$query`, `$default-feature` is going to be used.
///
///   The number of total columns in the grid can be set by passing `$columns` at the end of the list (overrides `$total-columns`). For a list of valid values for `$feature`, click [here](http://www.w3.org/TR/css3-mediaqueries/#media1).
///
/// @param {Number (unitless)} $total-columns [$grid-columns]
///   - Number of columns to use in the new grid context. Can be set as a shorthand in the first parameter.
///
/// @example scss - Usage
///   $mobile: new-breakpoint(max-width 480px 4);
///
///   .element {
///     @include media($mobile) {
///       @include span-columns(4);
///     }
///   }
///
/// @example css - CSS Output
///   @media screen and (max-width: 480px) {
///     .element {
///       display: block;
///       float: left;
///       margin-right: 7.42297%;
///       width: 100%;
///     }
///     .element:last-child {
///       margin-right: 0;
///     }
///   }

@function new-breakpoint($query: $feature $value $columns, $total-columns: $grid-columns) {
  @if length($query) == 1 {
    $query: $default-feature nth($query, 1) $total-columns;
  } @else if is-even(length($query)) {
    $query: append($query, $total-columns);
  }

  @if is-not(belongs-to($query, $visual-grid-breakpoints)) {
    $visual-grid-breakpoints: append($visual-grid-breakpoints, $query, comma) !global;
  }

  @return $query;
}


// Settings
@charset "UTF-8";

/// Sets the relative width of a single grid column. The unit used should be the same one used to define `$gutter`. To learn more about `modular-scale()` see [Bourbon docs](http://bourbon.io/docs/#modular-scale). Set with a `!global` flag.
///
/// @type Number (Unit)

$column: modular-scale(3, 1em, $golden) !default;

/// Sets the relative width of a single grid gutter. The unit used should be the same one used to define `$column`. To learn more about `modular-scale()` see [Bourbon docs](http://bourbon.io/docs/#modular-scale). Set with the `!global` flag.
///
/// @type Number (Unit)

$gutter: modular-scale(1, 1em, $golden) !default;

/// Sets the total number of columns in the grid. Its value can be overridden inside a media query using the `media()` mixin. Set with the `!global` flag.
///
/// @type Number (Unitless)

$grid-columns: 12 !default;

/// Sets the max-width property of the element that includes `outer-container()`. Set with the `!global` flag.
///
/// @type Number (Unit)
///
$max-width: 1200px !default;

/// When set to true, it sets the box-sizing property of all elements to `border-box`. Set with a `!global` flag.
///
/// @type Bool
///
/// @example css - CSS Output
///   html {
///     box-sizing: border-box; }
///
///   *, *::after, *::before {
///     box-sizing: inherit;
///   }

$border-box-sizing: true !default;

/// Sets the default [media feature](http://www.w3.org/TR/css3-mediaqueries/#media) that `media()` and `new-breakpoint()` revert to when only a breakpoint value is passed. Set with a `!global` flag.
///
/// @type String

$default-feature: min-width; // Default @media feature for the breakpoint() mixin

///Sets the default layout direction of the grid. Can be `LTR` or `RTL`. Set with a `!global` flag.
///
///@type String

$default-layout-direction: LTR !default;

@charset "UTF-8";

/// Displays the visual grid when set to true. The overlaid grid may be few pixels off depending on the browser's rendering engine and pixel rounding algorithm. Set with the `!global` flag.
///
/// @type Bool

$visual-grid: false !default;

/// Sets the visual grid color. Set with `!global` flag.
///
/// @type Color

$visual-grid-color: #eee !default;

/// Sets the `z-index` property of the visual grid. Can be `back` (behind content) or `front` (in front of content). Set with `!global` flag.
///
/// @type String

$visual-grid-index: back !default;

/// Sets the opacity property of the visual grid. Set with `!global` flag.
///
/// @type Number (unitless)

$visual-grid-opacity: 0.4 !default;

$visual-grid-breakpoints: () !default;

@charset "UTF-8";

/// Disable all deprecation warnings. Defaults to `false`. Set with a `!global` flag.
///
/// @type Bool

$disable-warnings: false !default;

@mixin -neat-warn($message) {
  @if $disable-warnings == false {
    @warn "#{$message}";
  }
}


/*
Grid

This framework uses <a href="http://bourbon.io/" rel="external">Bourbon</a> and <a href="http://neat.bourbon.io/" rel="external">Neat</a> to create a consistent 16 column responsive grid layout with good defaults.

Bourbon is a <a href="http://sass-lang.com/" rel="external">SASS</a> mixin library (it provides little styling). Neat is a flexible grid framework.

Avoid mixing this layout with other grid layouts.

<p class="callout"><strong>Grid classes?</strong> There are no non-semantic grid classes with which to set block elements. This is intentional. If you need to add to or customise the grid system see below.</p>

Primary content is always contained in 12 columns. This allows for seamless introduction of a sidebar/side navigation.

The grid unit proportions, gutters and spacing are defined in `_grid-settings.scss`.

If you need an element not defined here you are probably not the only one &mdash; please <a href="https://github.com/AusDTO/gov-au-ui-kit/issues" rel="external">log a GitHub issue</a> so we can provide it for everyone.

***

This guidance is in part adapted from <a href="http://govuk-elements.herokuapp.com" rel="external">GOV.UK elements</a> under <a href="https://www.nationalarchives.gov.uk/doc/open-government-licence/version/3/" rel="external">Open Government Licence v3.0</a>, and <a href="https://standards.usa.gov/getting-started/" rel="external">18F Draft US Web Design Standards</a> under <a href="https://creativecommons.org/publicdomain/zero/1.0/legalcode" rel="external">CC0 1.0 Universal</a>.

Style guide: Grid
*/

$grid-columns: 4 !global;
$max-width: em(1200) !global;
$gutter: em(32);

/*
Responsive breakpoints

This framework has a mobile-first default layout of 4 columns, and adds 3 breakpoints for grid layout on larger screens:

- Default: 4 columns
- Mobile: 8 columns, 420px minimum
- Tablet: 12 columns, 768px minimum
- Desktop: 16 columns, 1200px minimum

If you give an element a modified grid setting consider the implications for all breakpoints. The Digital Service Standard recommends you <a href="https://www.dto.gov.au/standard/6-consistent-and-responsive/" rel="external">build using mobile first design principles</a>.

Please also consider the [font size](section-typography.html#kssref-typography-2-headings-body-copy-1-breakpoints) at different breakpoints.

```
$mobile: new-breakpoint(min-width 420px 8);
$tablet: new-breakpoint(min-width 768px 12);
$desktop: new-breakpoint(min-width $max-width 16);
```

Style guide: Grid.3 Breakpoints
*/

$mobile-minwidth: 420px;
$tablet-minwidth: 768px;
$desktop-minwidth: 1200px;

$mobile-grid-columns: 8;
$tablet-grid-columns: 12;
$content-grid-columns: $tablet-grid-columns;
$desktop-grid-columns: 16;

$mobile: new-breakpoint(min-width $mobile-minwidth, $mobile-grid-columns);
$mobile-only: new-breakpoint(min-width $mobile-minwidth max-width $tablet-minwidth - 1, $mobile-grid-columns);
$tablet: new-breakpoint(min-width $tablet-minwidth, $tablet-grid-columns);
$tablet-only: new-breakpoint(min-width $tablet-minwidth max-width $desktop-minwidth - 1, $tablet-grid-columns);
$desktop: new-breakpoint(min-width $max-width, $desktop-grid-columns);

/*
Helpers

Style guide: Grid.4 Helpers
*/

/*
Omega Reset

When applying grid-columns to responsive layouts you may find yourself needing to reset the [omega properties applied by Neat](http://thoughtbot.github.io/neat-docs/latest/#omega):

```
.grid-item {
  @include span-columns(2 of 4);
  @include omega(2n);

  @include media($desktop) {
    @include omega-reset(2n);
    @include span-columns(4 of 12);
    @include omega(3n);
  }
}
```

Style guide: Grid.4 Helpers.1 Font stacks
*/

@mixin omega-reset($nth) {
  $nth-plus-one: '#{$nth}+1';

  &:nth-child(#{$nth}) {
    margin-right: flex-gutter($content-grid-columns);
  }

  &:nth-child(#{$nth-plus-one}) {
    clear: none;
  }
}

/*
Debugging

Turn on the visual grid to help debugging:

```
$visual-grid: true;
```

See the example <a href="http://neat.bourbon.io/examples/" rel="external">Bourbon Neat working grid layout</a>.

Style guide: Grid.4 Helpers.2 Debugging
*/

// Toggle visibility of your grid columns for development/debugging.
$visual-grid: false;

$border-box-sizing: true;
$disable-warnings: true;

// Neat 1.7.4
// http://neat.bourbon.io
// Copyright 2012-2015 thoughtbot, inc.
// MIT License

// Helpers
// Functions
// Not function for Libsass compatibility
// https://github.com/sass/libsass/issues/368
@function is-not($value) {
  @return if($value, false, true);
}

// Checks if a number is even
@function is-even($int) {
  @return $int % 2 == 0;
}

// Checks if an element belongs to a list or not
@function belongs-to($tested-item, $list) {
  @return is-not(not-belongs-to($tested-item, $list));
}

@function not-belongs-to($tested-item, $list) {
  @return is-not(index($list, $tested-item));
}

// Contains display value
@function contains-display-value($query) {
  @return belongs-to(table, $query)
       or belongs-to(block, $query)
       or belongs-to(inline-block, $query)
       or belongs-to(inline, $query);
}

// Parses the first argument of span-columns()
@function container-span($span: $span) {
  @if length($span) == 3 {
    $container-columns: nth($span, 3);
    @return $container-columns;
  } @else if length($span) == 2 {
    $container-columns: nth($span, 2);
    @return $container-columns;
  }

  @return $grid-columns;
}

@function container-shift($shift: $shift) {
  $parent-columns: $grid-columns !default !global;

  @if length($shift) == 3 {
    $container-columns: nth($shift, 3);
    @return $container-columns;
  } @else if length($shift) == 2 {
    $container-columns: nth($shift, 2);
    @return $container-columns;
  }

  @return $parent-columns;
}

// Generates a striped background
@function gradient-stops($grid-columns, $color: $visual-grid-color) {
  $transparent: transparent;

  $column-width: flex-grid(1, $grid-columns);
  $gutter-width: flex-gutter($grid-columns);
  $column-offset: $column-width;

  $values: ($transparent 0, $color 0);

  @for $i from 1 to $grid-columns*2 {
    @if is-even($i) {
      $values: append($values, $transparent $column-offset, comma);
      $values: append($values, $color $column-offset, comma);
      $column-offset: $column-offset + $column-width;
    } @else {
      $values: append($values, $color $column-offset, comma);
      $values: append($values, $transparent $column-offset, comma);
      $column-offset: $column-offset + $gutter-width;
    }
  }

  @return $values;
}

// Layout direction
@function get-direction($layout, $default) {
  $direction: null;

  @if to-upper-case($layout) == "LTR" or to-upper-case($layout) == "RTL" {
    $direction: direction-from-layout($layout);
  } @else {
    $direction: direction-from-layout($default);
  }

  @return $direction;
}

@function direction-from-layout($layout) {
  $direction: null;

  @if to-upper-case($layout) == "LTR" {
    $direction: right;
  } @else {
    $direction: left;
  }

  @return $direction;
}

@function get-opposite-direction($direction) {
  $opposite-direction: left;

  @if $direction == "left" {
    $opposite-direction: right;
  }

  @return $opposite-direction;
}

@charset "UTF-8";

/// Returns a media context (media query / grid context) that can be stored in a variable and passed to `media()` as a single-keyword argument. Media contexts defined using `new-breakpoint` are used by the visual grid, as long as they are defined before importing Neat.
///
/// @param {List} $query
///   A list of media query features and values. Each `$feature` should have a corresponding `$value`.
///
///   If there is only a single `$value` in `$query`, `$default-feature` is going to be used.
///
///   The number of total columns in the grid can be set by passing `$columns` at the end of the list (overrides `$total-columns`). For a list of valid values for `$feature`, click [here](http://www.w3.org/TR/css3-mediaqueries/#media1).
///
/// @param {Number (unitless)} $total-columns [$grid-columns]
///   - Number of columns to use in the new grid context. Can be set as a shorthand in the first parameter.
///
/// @example scss - Usage
///   $mobile: new-breakpoint(max-width 480px 4);
///
///   .element {
///     @include media($mobile) {
///       @include span-columns(4);
///     }
///   }
///
/// @example css - CSS Output
///   @media screen and (max-width: 480px) {
///     .element {
///       display: block;
///       float: left;
///       margin-right: 7.42297%;
///       width: 100%;
///     }
///     .element:last-child {
///       margin-right: 0;
///     }
///   }

@function new-breakpoint($query: $feature $value $columns, $total-columns: $grid-columns) {
  @if length($query) == 1 {
    $query: $default-feature nth($query, 1) $total-columns;
  } @else if is-even(length($query)) {
    $query: append($query, $total-columns);
  }

  @if is-not(belongs-to($query, $visual-grid-breakpoints)) {
    $visual-grid-breakpoints: append($visual-grid-breakpoints, $query, comma) !global;
  }

  @return $query;
}


// Settings
@charset "UTF-8";

/// Sets the relative width of a single grid column. The unit used should be the same one used to define `$gutter`. To learn more about `modular-scale()` see [Bourbon docs](http://bourbon.io/docs/#modular-scale). Set with a `!global` flag.
///
/// @type Number (Unit)

$column: modular-scale(3, 1em, $golden) !default;

/// Sets the relative width of a single grid gutter. The unit used should be the same one used to define `$column`. To learn more about `modular-scale()` see [Bourbon docs](http://bourbon.io/docs/#modular-scale). Set with the `!global` flag.
///
/// @type Number (Unit)

$gutter: modular-scale(1, 1em, $golden) !default;

/// Sets the total number of columns in the grid. Its value can be overridden inside a media query using the `media()` mixin. Set with the `!global` flag.
///
/// @type Number (Unitless)

$grid-columns: 12 !default;

/// Sets the max-width property of the element that includes `outer-container()`. Set with the `!global` flag.
///
/// @type Number (Unit)
///
$max-width: 1200px !default;

/// When set to true, it sets the box-sizing property of all elements to `border-box`. Set with a `!global` flag.
///
/// @type Bool
///
/// @example css - CSS Output
///   html {
///     box-sizing: border-box; }
///
///   *, *::after, *::before {
///     box-sizing: inherit;
///   }

$border-box-sizing: true !default;

/// Sets the default [media feature](http://www.w3.org/TR/css3-mediaqueries/#media) that `media()` and `new-breakpoint()` revert to when only a breakpoint value is passed. Set with a `!global` flag.
///
/// @type String

$default-feature: min-width; // Default @media feature for the breakpoint() mixin

///Sets the default layout direction of the grid. Can be `LTR` or `RTL`. Set with a `!global` flag.
///
///@type String

$default-layout-direction: LTR !default;

@charset "UTF-8";

/// Displays the visual grid when set to true. The overlaid grid may be few pixels off depending on the browser's rendering engine and pixel rounding algorithm. Set with the `!global` flag.
///
/// @type Bool

$visual-grid: false !default;

/// Sets the visual grid color. Set with `!global` flag.
///
/// @type Color

$visual-grid-color: #eee !default;

/// Sets the `z-index` property of the visual grid. Can be `back` (behind content) or `front` (in front of content). Set with `!global` flag.
///
/// @type String

$visual-grid-index: back !default;

/// Sets the opacity property of the visual grid. Set with `!global` flag.
///
/// @type Number (unitless)

$visual-grid-opacity: 0.4 !default;

$visual-grid-breakpoints: () !default;

@charset "UTF-8";

/// Disable all deprecation warnings. Defaults to `false`. Set with a `!global` flag.
///
/// @type Bool

$disable-warnings: false !default;

@mixin -neat-warn($message) {
  @if $disable-warnings == false {
    @warn "#{$message}";
  }
}



// Grid
$parent-columns: $grid-columns !default;
$fg-column: $column;
$fg-gutter: $gutter;
$fg-max-columns: $grid-columns;
$container-display-table: false !default;
$layout-direction: LTR !default;

@function flex-grid($columns, $container-columns: $fg-max-columns) {
  $width: $columns * $fg-column + ($columns - 1) * $fg-gutter;
  $container-width: $container-columns * $fg-column + ($container-columns - 1) * $fg-gutter;
  @return percentage($width / $container-width);
}

@function flex-gutter($container-columns: $fg-max-columns, $gutter: $fg-gutter) {
  $container-width: $container-columns * $fg-column + ($container-columns - 1) * $fg-gutter;
  @return percentage($gutter / $container-width);
}

@function grid-width($n) {
  @return $n * $gw-column + ($n - 1) * $gw-gutter;
}

@function get-parent-columns($columns) {
  @if $columns != $grid-columns {
    $parent-columns: $columns !global;
  } @else {
    $parent-columns: $grid-columns !global;
  }

  @return $parent-columns;
}

@function is-display-table($container-is-display-table, $display) {
  @return $container-is-display-table == true or $display == table;
}

@charset "UTF-8";

@if $border-box-sizing == true {
  html { // http://bit.ly/1qk2tVR
    box-sizing: border-box;
  }

  * {
    &,
    &::after,
    &::before {
      box-sizing: inherit;
    }
  }
}

@charset "UTF-8";

/// Removes the element's gutter margin, regardless of its position in the grid hierarchy or display property. It can target a specific element, or every `nth-child` occurrence. Works only with `block` layouts.
///
/// @param {List} $query [block]
///   List of arguments. Supported arguments are `nth-child` selectors (targets a specific pseudo element) and `auto` (targets `last-child`).
///
///   When passed an `nth-child` argument of type `*n` with `block` display, the omega mixin automatically adds a clear to the `*n+1` th element. Note that composite arguments such as `2n+1` do not support this feature.
///
///   **Deprecation warning**: The omega mixin will no longer take a `$direction` argument. To change the layout direction, use `row($direction)` or set `$default-layout-direction` instead.
///
/// @example scss - Usage
///   .element {
///     @include omega;
///   }
///
///   .nth-element {
///     @include omega(4n);
///   }
///
/// @example css - CSS Output
///   .element {
///     margin-right: 0;
///   }
///
///   .nth-element:nth-child(4n) {
///     margin-right: 0;
///   }
///
///   .nth-element:nth-child(4n+1) {
///     clear: left;
///   }

@mixin omega($query: block, $direction: default) {
  $table: belongs-to(table, $query);
  $auto: belongs-to(auto, $query);

  @if $direction != default {
    @include -neat-warn("The omega mixin will no longer take a $direction argument. To change the layout direction, use the direction(){...} mixin.");
  } @else {
    $direction: get-direction($layout-direction, $default-layout-direction);
  }

  @if $table {
    @include -neat-warn("The omega mixin no longer removes padding in table layouts.");
  }

  @if length($query) == 1 {
    @if $auto {
      &:last-child {
        margin-#{$direction}: 0;
      }
    }

    @else if contains-display-value($query) and $table == false {
      margin-#{$direction}: 0;
    }

    @else {
      @include nth-child($query, $direction);
    }
  } @else if length($query) == 2 {
    @if $auto {
      &:last-child {
        margin-#{$direction}: 0;
      }
    } @else {
      @include nth-child(nth($query, 1), $direction);
    }
  } @else {
    @include -neat-warn("Too many arguments passed to the omega() mixin.");
  }
}

@mixin nth-child($query, $direction) {
  $opposite-direction: get-opposite-direction($direction);

  &:nth-child(#{$query}) {
    margin-#{$direction}: 0;
  }

  @if type-of($query) == number and unit($query) == "n" {
    &:nth-child(#{$query}+1) {
      clear: $opposite-direction;
    }
  }
}

@charset "UTF-8";

/// Makes an element a outer container by centering it in the viewport, clearing its floats, and setting its `max-width`.
/// Although optional, using `outer-container` is recommended. The mixin can be called on more than one element per page, as long as they are not nested.
///
/// @param {Number [unit]} $local-max-width [$max-width]
///   Max width to be applied to the element. Can be a percentage or a measure.
///
/// @example scss - Usage
///   .element {
///     @include outer-container(100%);
///   }
///
/// @example css - CSS Output
///   .element {
///     *zoom: 1;
///     max-width: 100%;
///     margin-left: auto;
///     margin-right: auto;
///   }
///
///   .element:before, .element:after {
///     content: " ";
///     display: table;
///   }
///
///   .element:after {
///     clear: both;
///   }

@mixin outer-container($local-max-width: $max-width) {
  @include clearfix;
  max-width: $local-max-width;
  margin: {
    left: auto;
    right: auto;
  }
}

@charset "UTF-8";

/// Specifies the number of columns an element should span. If the selector is nested the number of columns of its parent element should be passed as an argument as well.
///
/// @param {List} $span
///   A list containing `$columns`, the unitless number of columns the element spans (required), and `$container-columns`, the number of columns the parent element spans (optional).
///
///   If only one value is passed, it is assumed that it's `$columns` and that that `$container-columns` is equal to `$grid-columns`, the total number of columns in the grid.
///
///   The values can be separated with any string such as `of`, `/`, etc.
///
///   `$columns` also accepts decimals for when it's necessary to break out of the standard grid. E.g. Passing `2.4` in a standard 12 column grid will divide the row into 5 columns.
///
/// @param {String} $display [block]
///   Sets the display property of the element. By default it sets the display property of the element to `block`.
///
///   If passed `block-collapse`, it also removes the margin gutter by adding it to the element width.
///
///   If passed `table`, it sets the display property to `table-cell` and calculates the width of the element without taking gutters into consideration. The result does not align with the block-based grid.
///
/// @example scss - Usage
///   .element {
///     @include span-columns(6);
///
///    .nested-element {
///      @include span-columns(2 of 6);
///    }
///  }
///
/// @example css - CSS Output
///   .element {
///     display: block;
///     float: left;
///     margin-right: 2.35765%;
///     width: 48.82117%;
///   }
///
///   .element:last-child {
///     margin-right: 0;
///   }
///
///   .element .nested-element {
///     display: block;
///     float: left;
///     margin-right: 4.82916%;
///     width: 30.11389%;
///   }
///
///   .element .nested-element:last-child {
///     margin-right: 0;
///   }

@mixin span-columns($span: $columns of $container-columns, $display: block) {
  $columns: nth($span, 1);
  $container-columns: container-span($span);

  $parent-columns: get-parent-columns($container-columns) !global;

  $direction: get-direction($layout-direction, $default-layout-direction);
  $opposite-direction: get-opposite-direction($direction);

  $display-table: is-display-table($container-display-table, $display);

  @if $display-table  {
    display: table-cell;
    width: percentage($columns / $container-columns);
  } @else {
    float: #{$opposite-direction};

    @if $display != no-display {
      display: block;
    }

    @if $display == collapse {
      @include -neat-warn("The 'collapse' argument will be deprecated. Use 'block-collapse' instead.");
    }

    @if $display == collapse or $display == block-collapse {
      width: flex-grid($columns, $container-columns) + flex-gutter($container-columns);

      &:last-child {
        width: flex-grid($columns, $container-columns);
      }

    } @else {
      margin-#{$direction}: flex-gutter($container-columns);
      width: flex-grid($columns, $container-columns);

      &:last-child {
        margin-#{$direction}: 0;
      }
    }
  }
}

@charset "UTF-8";

/// Designates the element as a row of columns in the grid layout. It clears the floats on the element and sets its display property. Rows can't be nested, but there can be more than one row element—with different display properties—per layout.
///
/// @param {String} $display [default]
///  Sets the display property of the element and the display context that will be used by its children. Can be `block` or `table`.
///
/// @param {String} $direction [$default-layout-direction]
///  Sets the layout direction. Can be `LTR` (left-to-right) or `RTL` (right-to-left).
///
/// @example scss - Usage
///  .element {
///    @include row();
///  }
///
/// @example css - CSS Output
///  .element {
///    *zoom: 1;
///    display: block;
///  }
///
/// .element:before, .element:after {
///   content: " ";
///   display: table;
/// }
///
/// .element:after {
///   clear: both;
/// }

@mixin row($display: default, $direction: $default-layout-direction) {
  @if $direction != $default-layout-direction {
    @include -neat-warn("The $direction argument will be deprecated in future versions in favor of the direction(){...} mixin.");
  }

  $layout-direction: $direction !global;

  @if $display != default {
    @include -neat-warn("The $display argument will be deprecated in future versions in favor of the display(){...} mixin.");
  }

  @if $display == table {
    display: table;
    @include fill-parent;
    table-layout: fixed;
    $container-display-table: true !global;
  } @else {
    @include clearfix;
    display: block;
    $container-display-table: false !global;
  }
}

@charset "UTF-8";

/// Translates an element horizontally by a number of columns. Positive arguments shift the element to the active layout direction, while negative ones shift it to the opposite direction.
///
/// @param {Number (unitless)} $n-columns [1]
///   Number of columns by which the element shifts.
///
/// @example scss - Usage
///   .element {
///     @include shift(-3);
///   }
///
/// @example css - CSS output
///   .element {
///     margin-left: -25.58941%;
///   }

@mixin shift($n-columns: 1) {
  @include shift-in-context($n-columns);
}

/// Translates an element horizontally by a number of columns, in a specific nesting context.
///
/// @param {List} $shift
///   A list containing the number of columns to shift (`$columns`) and the number of columns of the parent element (`$container-columns`).
///
///   The two values can be separated with any string such as `of`, `/`, etc.
///
/// @example scss - Usage
///   .element {
///     @include shift(-3 of 6);
///   }
///
/// @example css - CSS output
///   .element {
///     margin-left: -52.41458%;
///   }

@mixin shift-in-context($shift: $columns of $container-columns) {
  $n-columns: nth($shift, 1);
  $parent-columns: container-shift($shift) !global;

  $direction: get-direction($layout-direction, $default-layout-direction);
  $opposite-direction: get-opposite-direction($direction);

  margin-#{$opposite-direction}: $n-columns * flex-grid(1, $parent-columns) + $n-columns * flex-gutter($parent-columns);

  // Reset nesting context
  $parent-columns: $grid-columns !global;
}

@charset "UTF-8";

/// Adds padding to the element.
///
/// @param {List} $padding [flex-gutter()]
///   A list of padding value(s) to use. Passing `default` in the list will result in using the gutter width as a padding value.
///
/// @example scss - Usage
///   .element {
///     @include pad(30px -20px 10px default);
///   }
///
/// @example css - CSS Output
///   .element {
///     padding: 30px -20px 10px 2.35765%;
///   }

@mixin pad($padding: flex-gutter()) {
  $padding-list: null;
  @each $value in $padding {
    $value: if($value == 'default', flex-gutter(), $value);
    $padding-list: join($padding-list, $value);
  }
  padding: $padding-list;
}

@charset "UTF-8";

/// Forces the element to fill its parent container.
///
/// @example scss - Usage
///   .element {
///     @include fill-parent;
///   }
///
/// @example css - CSS Output
///   .element {
///     width: 100%;
///     box-sizing: border-box;
///   }

@mixin fill-parent() {
  width: 100%;

  @if $border-box-sizing == false {
    box-sizing: border-box;
  }
}

@charset "UTF-8";

/// Outputs a media-query block with an optional grid context (the total number of columns used in the grid).
///
/// @param {List} $query
///   A list of media query features and values, where each `$feature` should have a corresponding `$value`.
///   For a list of valid values for `$feature`, click [here](http://www.w3.org/TR/css3-mediaqueries/#media1).
///
///   If there is only a single `$value` in `$query`, `$default-feature` is going to be used.
///
///   The number of total columns in the grid can be set by passing `$columns` at the end of the list (overrides `$total-columns`).
///
///
/// @param {Number (unitless)} $total-columns [$grid-columns]
///   - Number of columns to use in the new grid context. Can be set as a shorthand in the first parameter.
///
/// @example scss - Usage
///   .responsive-element {
///      @include media(769px) {
///        @include span-columns(6);
///      }
///   }
///
///  .new-context-element {
///    @include media(min-width 320px max-width 480px, 6) {
///      @include span-columns(6);
///    }
///  }
///
/// @example css - CSS Output
///  @media screen and (min-width: 769px) {
///    .responsive-element {
///      display: block;
///      float: left;
///      margin-right: 2.35765%;
///      width: 48.82117%;
///    }
///
///    .responsive-element:last-child {
///      margin-right: 0;
///    }
///  }
///
///  @media screen and (min-width: 320px) and (max-width: 480px) {
///    .new-context-element {
///      display: block;
///      float: left;
///      margin-right: 4.82916%;
///      width: 100%;
///    }
///
///    .new-context-element:last-child {
///      margin-right: 0;
///    }
///  }

@mixin media($query: $feature $value $columns, $total-columns: $grid-columns) {
  @if length($query) == 1 {
    @media screen and ($default-feature: nth($query, 1)) {
      $default-grid-columns: $grid-columns;
      $grid-columns: $total-columns !global;
      @content;
      $grid-columns: $default-grid-columns !global;
    }
  } @else {
    $loop-to: length($query);
    $media-query: "screen and ";
    $default-grid-columns: $grid-columns;
    $grid-columns: $total-columns !global;

    @if is-not(is-even(length($query))) {
      $grid-columns: nth($query, $loop-to) !global;
      $loop-to: $loop-to - 1;
    }

    $i: 1;
    @while $i <= $loop-to {
      $media-query: $media-query + "(" + nth($query, $i) + ": " + nth($query, $i + 1) + ") ";

      @if ($i + 1) != $loop-to {
        $media-query: $media-query + "and ";
      }

      $i: $i + 2;
    }

    @media #{$media-query} {
      @content;
      $grid-columns: $default-grid-columns !global;
    }
  }
}

@charset "UTF-8";

@mixin breakpoint($query:$feature $value $columns, $total-columns: $grid-columns) {
  @include -neat-warn("The breakpoint() mixin was renamed to media() in Neat 1.0. Please update your project with the new syntax before the next version bump.");

  @if length($query) == 1 {
    @media screen and ($default-feature: nth($query, 1)) {
      $default-grid-columns: $grid-columns;
      $grid-columns: $total-columns;
      @content;
      $grid-columns: $default-grid-columns;
    }
  } @else if length($query) == 2 {
    @media screen and (nth($query, 1): nth($query, 2)) {
      $default-grid-columns: $grid-columns;
      $grid-columns: $total-columns;
      @content;
      $grid-columns: $default-grid-columns;
    }
  } @else if length($query) == 3 {
    @media screen and (nth($query, 1): nth($query, 2)) {
      $default-grid-columns: $grid-columns;
      $grid-columns: nth($query, 3);
      @content;
      $grid-columns: $default-grid-columns;
    }
  } @else if length($query) == 4 {
    @media screen and (nth($query, 1): nth($query, 2)) and (nth($query, 3): nth($query, 4)) {
      $default-grid-columns: $grid-columns;
      $grid-columns: $total-columns;
      @content;
      $grid-columns: $default-grid-columns;
    }
  } @else if length($query) == 5 {
    @media screen and (nth($query, 1): nth($query, 2)) and (nth($query, 3): nth($query, 4)) {
      $default-grid-columns: $grid-columns;
      $grid-columns: nth($query, 5);
      @content;
      $grid-columns: $default-grid-columns;
    }
  } @else {
    @include -neat-warn("Wrong number of arguments for breakpoint(). Read the documentation for more details.");
  }
}

@mixin nth-omega($nth, $display: block, $direction: default) {
  @include -neat-warn("The nth-omega() mixin is deprecated. Please use omega() instead.");
  @include omega($nth $display, $direction);
}

/// Resets the active display property to `block`. Particularly useful when changing the display property in a single row.
///
/// @example scss - Usage
///   .element {
///     @include row(table);
///     // Context changed to table display
///   }
///
///   @include reset-display;
///   // Context is reset to block display

@mixin reset-display {
  $container-display-table: false !global;
  @include -neat-warn("Resetting $display will be deprecated in future versions in favor of the display(){...} mixin.");
}

/// Resets the active layout direction to the default value set in `$default-layout-direction`. Particularly useful when changing the layout direction in a single row.
///
/// @example scss - Usage
///   .element {
///     @include row($direction: RTL);
///     // Context changed to right-to-left
///   }
///
///   @include reset-layout-direction;
///   // Context is reset to left-to-right

@mixin reset-layout-direction {
  $layout-direction: $default-layout-direction !global;
  @include -neat-warn("Resetting $direction will be deprecated in future versions in favor of the direction(){...} mixin.");
}

/// Resets both the active layout direction and the active display property.
///
/// @example scss - Usage
///   .element {
///     @include row(table, RTL);
///     // Context changed to table table and right-to-left
///   }
///
///   @include reset-all;
///   // Context is reset to block display and left-to-right

@mixin reset-all {
  @include reset-display;
  @include reset-layout-direction;
}

@charset "UTF-8";

@mixin grid-column-gradient($values...) {
  background-image: -webkit-linear-gradient(left, $values);
  background-image: -moz-linear-gradient(left, $values);
  background-image: -ms-linear-gradient(left, $values);
  background-image: -o-linear-gradient(left, $values);
  background-image: unquote("linear-gradient(to left, #{$values})");
}

@if $visual-grid == true or $visual-grid == yes {
  body:before {
    @include grid-column-gradient(gradient-stops($grid-columns));
    content: "";
    display: inline-block;
    height: 100%;
    left: 0;
    margin: 0 auto;
    max-width: $max-width;
    opacity: $visual-grid-opacity;
    pointer-events: none;
    position: fixed;
    right: 0;
    width: 100%;

    @if $visual-grid-index == back {
      z-index: -1;
    }

    @else if $visual-grid-index == front {
      z-index: 9999;
    }

    @each $breakpoint in $visual-grid-breakpoints {
      @if $breakpoint {
        @include media($breakpoint) {
          @include grid-column-gradient(gradient-stops($grid-columns));
        }
      }
    }
  }
}

@charset "UTF-8";

/// Changes the display property used by other mixins called in the code block argument.
///
/// @param {String} $display [block]
///   Display value to be used within the block. Can be `table` or `block`.
///
/// @example scss
///   @include display-context(table) {
///    .display-table {
///      @include span-columns(6);
///     }
///   }
///
/// @example css
///   .display-table {
///      display: table-cell;
///      ...
///   }

@mixin display-context($display: block) {
  $scope-display: $container-display-table;
  $container-display-table: $display == table !global;

  @content;

  $container-display-table: $scope-display !global;
}

@charset "UTF-8";

/// Changes the direction property used by other mixins called in the code block argument.
///
/// @param {String} $direction [left-to-right]
///   Layout direction to be used within the block. Can be `left-to-right` or `right-to-left`.
///
/// @example scss - Usage
///   @include direction-context(right-to-left) {
///    .right-to-left-block {
///      @include span-columns(6);
///     }
///   }
///
/// @example css - CSS Output
///   .right-to-left-block {
///     float: right;
///      ...
///   }

@mixin direction-context($direction: left-to-right) {
  $scope-direction: $layout-direction;

  @if to-lower-case($direction) == "left-to-right" {
    $layout-direction: LTR !global;
  } @else if to-lower-case($direction) == "right-to-left" {
    $layout-direction: RTL !global;
  }

  @content;

  $layout-direction: $scope-direction !global;
}



/*
Accordions

Accordions help users find only the content they need.

The **expand/collapse all** feature will be provided soon &mdash; this will be mandatory if using a series of accordion elements.

***

This guidance is in part adapted from <a href="https://standards.usa.gov/getting-started/" rel="external">18F Draft US Web Design Standards</a> under <a href="https://creativecommons.org/publicdomain/zero/1.0/legalcode" rel="external">CC0 1.0 Universal</a>.

Style guide: Accordions
*/

/*
Content accordion

Use content accordions if the user only needs a selection of the information on a page.

Don't use an accordion if the user needs to see all of the information.

<details open data-label="accordions-accessibility" aria-expanded="false">
  <summary>Accessibility &amp; browser testing</summary>
  <div class="accordion-panel">
  <strong>Passed</strong>:
    <ul>
      <li>HTML5 validation (<a href="http://validator.github.io/validator/" rel="external">Nu Html Checker</a>)</li>
      <li>WCAG:AA automated (<a href="http://squizlabs.github.io/HTML_CodeSniffer/Standards/WCAG2/" rel="external">HTML_CodeSniffer</a>)</li>
    </ul>
  <strong>Untested</strong>:
    <ul>
      <li>WCAG:AA manual</li>
      <li>Browser support &mdash; automated and manual</li>
    </ul>
  </div>
</details>

Markup: templates/content-accordion.hbs

Style guide: Accordions.1 Content accordion
*/

/*
Controls accordion

Use controls accordions to make page controls easier to use.

<details open data-label="controls-accordions-accessibility" aria-expanded="false">
  <summary>Accessibility &amp; browser testing</summary>
  <div class="accordion-panel">
  <strong>Passed</strong>:
    <ul>
      <li>HTML5 validation (<a href="http://validator.github.io/validator/" rel="external">Nu Html Checker</a>)</li>
      <li>WCAG:AA automated (<a href="http://squizlabs.github.io/HTML_CodeSniffer/Standards/WCAG2/" rel="external">HTML_CodeSniffer</a>)</li>
    </ul>
  <strong>Untested</strong>:
    <ul>
      <li>WCAG:AA manual</li>
      <li>Browser support &mdash; automated and manual</li>
    </ul>
  </div>
</details>

Markup: templates/controls-accordion.hbs

Style guide: Accordions.2 Controls accordion
*/

/*
Usability

Don't use an accordion if the user needs to see all of the information. Structure and rewrite your content instead.

Use [definition or description lists](section-typography.html#guide-typography-6-lists) for glossaries instead of accordions.

Building accordions
- Keep accordion headings and labels short but descriptive.
- Accordions can be set to open or closed initially using `aria-expanded` property set to `true` or `false`.
- JavaScript behaviour is used to replace the browser default for `<details>`.
- For multiple accordion elements each `details` element must have its own `data-label` attribute.
- You can run a text/string search of accordion content, even when collapsed (the string stays hidden until the accordion is opened).

Style guide: Accordions.3 Usability
*/

%base-accordion {
  display: block;
  margin: $base-spacing 0 0;
  overflow: hidden;
}

%base-accordion-button {
  display: block;
  position: relative;
  width: 100%;
  height: auto;
  padding: $small-spacing;
  border-radius: $tiny-border-radius $tiny-border-radius 0 0;
  background-color: $background-secondary-colour;
  cursor: pointer;
  text-align: left;
  font-weight: $bold-font-weight;
  font-size: rem(20);
  transition: background-color $transition-timing-fast $transition-easing;

  &:last-child {
    border-bottom-width: 1px;
  }

  &:hover,
  &:focus {
    background-color: $border-colour;
    outline: none;
  }

  &::-webkit-details-marker {
    display: none;
  }

  &::before {
    @extend %icon-chevron-down--navy;

    content: '';
    position: absolute;
    top: .5em;
    bottom: .5em;
    right: $small-spacing;
    width: $medium-spacing;
    background-repeat: no-repeat;
    background-position: center center;
    background-size: 100% auto;
    transform: rotate(0deg);
    transition: transform $transition-timing $transition-easing;

    [aria-expanded='true'] & {
      transform: rotate(180deg);
    }
  }
}

%base-accordion-panel {
  display: block;
  height: auto;
  overflow: hidden;
  padding: $base-spacing $base-spacing $small-spacing;
  border-radius: $tiny-border-radius $tiny-border-radius 0 0;

  :first-child {
    margin-top: 0;
  }
}

details,
.accordion {
  @extend %base-accordion;

  border-color: $border-colour;
  border-width: 1px 0;
  border-style: solid;

  & + & {
    margin-top: 0;
    border-top: none;
  }
}

.accordion-button,
summary {
  @extend %base-accordion-button;

  [aria-expanded='true'] & {
    border-bottom: 1px solid $border-colour;
  }
}

.accordion-panel {
  @extend %base-accordion-panel;
}

.accordion--controls {
  @extend %base-accordion;

  margin-top: $small-spacing;
  border: none;

  summary {
    @extend %base-accordion-button;

    border: none;
    background-color: $lighter-aqua;
    font-size: $small-font-size;

    &:hover,
    &:focus {
      background-color: $light-aqua;
      color: $darker-aqua;
    }
  }

  .accordion-panel {
    @extend %base-accordion-panel;

    border: $small-spacing solid $lighter-aqua;
    border-top: none;
  }
}

/*
Buttons

Buttons signal action &mdash; use them to move the user through a transaction.

Use 1 button per page to build a strong call to action. Adding a second or third button forces users to make a choice. If choice is required use another kind of element eg radio button.

Use button text to describe what the button does &mdash; keep it short.

The button alignment in [forms](section-forms.html) should put the primary action button at the left edge, in the user's line of sight.

***

This guidance is in part adapted from <a href="http://govuk-elements.herokuapp.com" rel="external">GOV.UK elements</a> under <a href="https://www.nationalarchives.gov.uk/doc/open-government-licence/version/3/" rel="external">Open Government Licence v3.0</a>, and <a href="https://standards.usa.gov/getting-started/" rel="external">18F Draft US Web Design Standards</a> under <a href="https://creativecommons.org/publicdomain/zero/1.0/legalcode" rel="external">CC0 1.0 Universal</a>.

Style guide: Buttons
*/

/*
Creating buttons

Call buttons using:

- `<button>` element (for actions like submitting a form)
- the `role` property of `a` elements (eg an anchor link).

Do not apply styles to disabled buttons.

Markup: templates/buttons-examples.hbs

<details open data-label="buttons-accessibility" aria-expanded="false">
  <summary>Accessibility &amp; browser testing</summary>
  <div class="accordion-panel">
  <strong>Passed</strong>:
    <ul>
      <li>HTML5 validation (<a href="http://validator.github.io/validator/" rel="external">Nu Html Checker</a>)</li>
      <li>WCAG:AA automated (<a href="http://squizlabs.github.io/HTML_CodeSniffer/Standards/WCAG2/" rel="external">HTML_CodeSniffer</a>)</li>
    </ul>
  <strong>Untested</strong>:
    <ul>
      <li>WCAG:AA manual</li>
      <li>Browser support &mdash; automated and manual</li>
    </ul>
  </div>
</details>

Style guide: Buttons.1 Creating buttons
*/

@mixin button-colours($bg-colour, $bg-colour--hover, $bg-colour--active, $text-colour, $text-colour--hover: $text-colour) {
  button,
  a[role='button'],
  input[type='submit'],
  input[type='reset'] {
    background-color: $bg-colour;
    color: $text-colour;
    border: 1px solid $bg-colour--hover;

    &:hover,
    &:focus {
      background-color: $bg-colour--hover;
      color: $text-colour--hover;
    }

    &:active {
      background-color: $bg-colour--active;
    }

    &[disabled],
    &.disabled {
      &,
      &:hover,
      &:active,
      &:focus {
        cursor: not-allowed;
        border-color: transparent;
        background-color: $button-bg-colour--disabled;
        color: $non-black;
      }
    }
  }
}

%base-button {
  -webkit-appearance: none;
  appearance: none;
  display: inline-block;
  height: $base-spacing * 2;
  margin: 0 $base-spacing $small-spacing 0;
  padding: $small-spacing $base-spacing;
  border-radius: $tiny-border-radius;
  border: 0;
  outline: 0;
  text-decoration: none;
  font-weight: $bold-font-weight;

  @include media($tablet) {
    height: $base-spacing * 1.75;
    padding: ($tiny-spacing * 1.25) $medium-spacing;
  }
}

button,
.button,
[role='button'],
[type='button'] {
  @extend %base-button;

  &.inverted {
    border: 1px solid $button-inverted-colour;
    background-color: transparent;

    &:hover,
    &:active,
    &:focus {
      border-color: $button-inverted-colour;
      background-color: $button-inverted-colour;
      color: $button-inverted-text-colour;
    }
  }
}

/*
Forms

Keep forms as simple as possible &mdash; only ask what is needed for the transaction.

Ask only 1 question per page.

***

This guidance is in part adapted from <a href="http://govuk-elements.herokuapp.com/" rel="external">GOV.UK elements</a> under <a href="https://www.nationalarchives.gov.uk/doc/open-government-licence/version/3/" rel="external">Open Government Licence v3.0</a> and <a href="https://www.gov.uk/service-manual/user-centred-design/resources/patterns/" rel="external">GOV.UK design patterns</a> under <a href="http://www.nationalarchives.gov.uk/doc/open-government-licence/version/2/" rel="external">Open Government Licence v2.0</a>.

Style guide: Forms
*/

/*
Text input

Single line text inputs.

They can be limited to number input only by setting the `type` attribute to `number`. For telephone numbers set the `type` attribute to `tel`. To explicityly trigger the num-pad on iPhones, omit the `type` attribute and add a pattern attribute to the input element: `pattern="[0-9]*"`.

Markup: templates/text-input-single-line.hbs

<details open data-label="text-input-single-line-accessibility" aria-expanded="false">
  <summary>Accessibility &amp; browser testing</summary>
  <div class="accordion-panel">
  <strong>Passed</strong>:
    <ul>
      <li>HTML5 validation (<a href="http://validator.github.io/validator/" rel="external">Nu Html Checker</a>)</li>
      <li>WCAG:AA automated (<a href="http://squizlabs.github.io/HTML_CodeSniffer/Standards/WCAG2/" rel="external">HTML_CodeSniffer</a>)</li>
    </ul>
  <strong>Untested</strong>:
    <ul>
      <li>WCAG:AA manual</li>
      <li>Browser support &mdash; automated and manual</li>
    </ul>
  </div>
</details>

Style guide: Forms.1 Text input
*/

%base-input {
  width: 100%;
  outline-offset: 0;
  border: 2px solid $border-colour;
  border-radius: 0;
  background-color: $background-colour;
  padding: $tiny-spacing;

  &:invalid,
  &.invalid {
    outline: 2px solid $error-colour;
  }

  &.valid {
    outline: 2px solid $success-colour;
  }

  &:focus {
    outline: 2px solid $input-focus-colour;
  }

  &:disabled,
  &[disabled] {
    cursor: not-allowed;
    background: $non-white;
    border: 2px solid $light-grey;
  }

}

form {

  fieldset,
  p {
    margin: 0 0 $medium-spacing 0;
    padding: 0;
    border: none;
  }

  label {
    display: block;
    margin-bottom: $tiny-spacing;
    margin-top: $tiny-spacing;
  }

  .hint {
    display: block;
    margin-bottom: $tiny-spacing;
    font-size: rem(14);
    color: $body-text-colour;
  }

  [type='text'],
  [type='number'],
  [type='tel'],
  [type='email'],
  [type='password'] {
    @extend %base-input;
  }

  /*
  Text area input

  The `<textarea>` element gives a multi-line text input the user can resize vertically.

  Markup:
  <form>
    <label for="texta">An input for longer responses</label>
    <textarea name="texta" id="texta"></textarea>
  </form>

  <details open data-label="text-area-input-accessibility" aria-expanded="false">
    <summary>Accessibility &amp; browser testing</summary>
    <div class="accordion-panel">
    <strong>Passed</strong>:
      <ul>
        <li>HTML5 validation (<a href="http://validator.github.io/validator/" rel="external">Nu Html Checker</a>)</li>
        <li>WCAG:AA automated (<a href="http://squizlabs.github.io/HTML_CodeSniffer/Standards/WCAG2/" rel="external">HTML_CodeSniffer</a>)</li>
      </ul>
    <strong>Untested</strong>:
      <ul>
        <li>WCAG:AA manual</li>
        <li>Browser support &mdash; automated and manual</li>
      </ul>
    </div>
  </details>

  Style guide: Forms.2 Text area input
  */

  textarea {
    @extend %base-input;
    resize: vertical;
  }


  input {
    &[type='radio'],
    &[type='checkbox'] {
      @extend %base-input;

      height: 1px;
      // hide the native widget but keep it in the tab order
      left: -10000px;
      position: relative;
      visibility: visible;
      width: 1px;

      &:focus + label {
        outline: 1px solid $border-colour;
      }

      &:invalid + label {
        color: $error-colour;

        &::before {
          border-color: $error-colour;
        }
      }

      + label {
        display: inline-block;
        margin-bottom: 8px;
        padding: 15px 0 15px 60px;
        position: relative;
        width: 100%;

        @include media($tablet) {
          padding: 12px 0 12px 60px;
        }

        &::before {
          display: inline-block;
          height: 27px;
          position: absolute;
          text-align: center;
          top: 13px;
          width: 27px;

          @include media($tablet) {
            top: 9px;
          }
        }

        @include ie-lte(8) {
          border: 0;
          height: 3em;
          left: 1px;
          margin-bottom: -4em;
          position: relative;
          width: 3em;
        }
      }
    }
  }

  /*
  Radio button input

  The `radio` input allows users to see all available choices at once and select exactly 1 option.

  Markup:
  <form>
    <fieldset>
      <legend>Would you like?</legend>
      <input id="yes" name="reply" type="radio" value="Yes"/>
      <label for="yes">Yes</label>
      <input id="no" name="reply" type="radio" value="No"/>
      <label for="no">No</label>
    </fieldset>
  </form>

  <details open data-label="radio-button-accessibility" aria-expanded="false">
    <summary>Accessibility &amp; browser testing</summary>
    <div class="accordion-panel">
    <strong>Passed</strong>:
      <ul>
        <li>HTML5 validation (<a href="http://validator.github.io/validator/" rel="external">Nu Html Checker</a>)</li>
        <li>WCAG:AA automated (<a href="http://squizlabs.github.io/HTML_CodeSniffer/Standards/WCAG2/" rel="external">HTML_CodeSniffer</a>)</li>
      </ul>
    <strong>Untested</strong>:
      <ul>
        <li>WCAG:AA manual</li>
        <li>Browser support &mdash; automated and manual</li>
      </ul>
    </div>
  </details>

  Style guide: Forms.3 Radio button input
  */

  input[type='radio'] {
    & + label {
      &::before {
        border: 2px solid $body-text-colour;
        border-radius: 50%;
        content: '';
        left: 18px;
      }
    }

    &:checked + label {
      font-weight: bold;

      &::before {
        border-radius: 50%;
        content: '';
      }

      &::after {
        width: 17px;
        height: 17px;
        background-color: $body-text-colour;
        border: 1px solid transparent;
        border-radius: 50%;
        content: '';
        left: 23px;
        top: 18px;
        position: absolute;

        @include media($tablet) {
          top: 14px;
        }
      }
    }
  }

  /*
Checkbox input

The `checkbox` input allows users to select 1 or more options from a visible list.

Markup:
<form>
  <fieldset>
    <legend>Which would you like?</legend>
    <input id="aaa" name="reply" type="checkbox" value="AAA"/>
    <label for="aaa">AAA</label>
    <input id="bbb" name="reply" type="checkbox" value="BBB"/>
    <label for="bbb">BBB</label>
    <input id="ccc" name="reply" type="checkbox" value="CCC"/>
    <label for="ccc">CCC</label>
  </fieldset>
</form>

<details open data-label="checkbox-input-accessibility" aria-expanded="false">
  <summary>Accessibility &amp; browser testing</summary>
  <div class="accordion-panel">
  <strong>Passed</strong>:
    <ul>
      <li>HTML5 validation (<a href="http://validator.github.io/validator/" rel="external">Nu Html Checker</a>)</li>
      <li>WCAG:AA automated (<a href="http://squizlabs.github.io/HTML_CodeSniffer/Standards/WCAG2/" rel="external">HTML_CodeSniffer</a>)</li>
    </ul>
  <strong>Untested</strong>:
    <ul>
      <li>WCAG:AA manual</li>
      <li>Browser support &mdash; automated and manual</li>
    </ul>
  </div>
</details>

Style guide: Forms.4 Checkbox input
*/
  input[type='checkbox'] + label {
    &::before {
      left: 20px;
      border: 2px solid $body-text-colour;
      content: '';
      @include media($tablet) {
        top: 9px;
      }
    }
  }

  input[type='checkbox'] {
    &:checked + label {
      font-weight: bold;

      &::before {
        font-size: 18px;
        content: '';
      }

      &::after {
        width: 17px;
        height: 17px;
        background-color: $body-text-colour;
        border: 1px solid transparent;
        content: '';
        left: 25px;
        top: 18px;
        position: absolute;

        @include media($tablet) {
          top: 14px;
        }
      }
    }
  }
}

/*
Accessibility

### Labels

- All forms fields should have labels.
- Don't hide labels, unless the surrounding context makes them unnecessary.
- Tell the user what they need to enter into the field. Label text should be short and direct.
- Avoid colons at the end of labels.
- Align labels above their fields. They should be associated with form fields using the `for` and `id` attribute.

### Hint text

- Use hint text to give the user contextual help about how to provide the information.
- The hint text should be above the form field and always visible.
- Use ARIA tags to make sure screen readers can read hint text correctly.

Markup:
<form>
  <label for="name">Full name</label>
  <span class="hint" id="name-hint">Your name is on your birth certificate.</span>
  <input type="text" id="name" aria-describedby="name-hint" />
</form>

### Optional & mandatory fields

Only ask for the information you absolutely need. Don't mark mandatory fields with asterisks.

If you have to ask for optional information mark the field labels with ‘(optional)’.

Style guide: Forms.5 Accessibility
*/

@mixin wrapper-padding {
  @include pad(0 $gutter);
  width: 100%;
  box-sizing: border-box;

  @include media($desktop) {
    width: 100%;
    min-width: $max-width;
  }
}

@mixin flex-layout {
  display: flex;
  flex-direction: column;
  min-height: 100vh;

  header[role='banner'],
  footer[role='contentinfo'] {
    flex: none;
  }
}

/*
Layout

Maximum page width is set to 1200px. Gutters between the columns are a minimum of 32px.

```
$max-width: em(1200) !global;
$gutter: em(32);
```

We define the grid placement for the following page layout elements:

- `header[role='banner']` and `footer[role='contentinfo']`
- `main.content-main`
- `aside`.

To create your own element you will need to use the <a href="http://thoughtbot.github.io/neat-docs/latest/#span-columns" rel="external">Neat <code>span-columns</code> function</a>.

For each new element you will need to set column properties for the breakpoints, from smallest to largest:

1. `$mobile`
2. `$tablet`
3. `$desktop`

The following diagram shows how the main content area takes up 12 of 16 columns at `$desktop` and above:

![Diagram of the layout across 16 columns](/kss-assets/img/img_grid_layout.png)

For iOS users ensure you set the `viewport` to the `device-width` in your `<head>` to ensure your site is responsive:

```
<meta name="viewport" content="width=device-width, initial-scale=1.0">
```

Style guide: Grid.5 Layout
*/

/*
Wrapper class

There is a wrapper class (`<div class="wrapper">`) for wrapping the contents of a block within the grid, while allowing its outer container to run the full viewport width.

This is currently used for the page `header` and `footer`, and also for the [breadcrumbs](section-navigation.html#kssref-navigation-2-breadcrumbs).

Style guide: Grid.5 Layout.1 Wrapper
*/

.wrapper {
  @include wrapper-padding;
  @include outer-container;
}

html {
  @include ie-lte(8) {
    position: relative;
    min-height: 100%;
  }
}

body {
  @include flex-layout;
}

main {
  @include wrapper-padding;
  @include outer-container;

  // makes flex work in IE10/11 https://thatemil.com/blog/2013/11/03/sticky-footers-flexbox-and-ie10/
  flex: 1 0 auto;

  @include media($tablet) {
    padding-top: $base-spacing * 2;
  }

  .form-wrapper {
    @include fill-parent;

    @include media($tablet) {
      @include span-columns(4 of 6);
    }
  }

  @include ie-lte(8) {
    &:before,
    &:after {
      content: '.';
      display: block;
      height: 0;
      overflow: hidden;
    }

    &:after {
      clear: both;
    }
  }

  @include ie-lte(7) {
    zoom: 1;
  }

  /*
  Sidebar

  Primary content is always contained in 12 columns. This allows for seamless introduction of a sidebar/side navigation.

  ![Diagram of the layout with optional aside nav](/kss-assets/img/img_grid_layout_nav.png)

  By default the sidebar sits to the right of the main content. When the sidebar contains content controls (eg filters), instead of navigation, it can sit on the left side. Use the class `.sidebar-has-controls` on the parent `main` element:

  ```
  <main class="sidebar-has-controls">
    <aside class="sidebar">
    ...
    </aside>
    <article role="main" id="content" class="content-main">
    ...
    </article>
  </main>
  ```

  Style guide: Grid.6 Sidebar
  */
  @include direction-context(right-to-left) {
    .sidebar {
      @include fill-parent;

      @include media($tablet) {
        @include span-columns(4 of 12);
      }

      @include media($desktop) {
        @include span-columns(4 of 16);
      }
    }

    .content-main {
      @include fill-parent;

      @include media($tablet) {
        @include span-columns(8 of 12);
      }

      @include media($desktop) {
        @include span-columns(12 of 16);
      }

      // Know what this is for?
      &:first-child {

        @include reset-layout-direction;

        @include fill-parent;
        @include shift(0);

        @include media($tablet) {
          @include span-columns(8 of 12);
          @include shift(0);
        }

        @include media($desktop) {
          @include span-columns(10 of 16);
          @include shift(0);
        }

      }
    }
  }

  &.sidebar-has-controls {
    @include reset-layout-direction;

    .sidebar {
      @include fill-parent;

      @include media($tablet) {
        @include span-columns(4 of 12);
        margin-left: 0;
      }

      @include media($desktop) {
        @include span-columns(4 of 16);
      }
    }

    .content-main {
      @include fill-parent;

      @include media($tablet) {
        @include span-columns(8 of 12);
      }

      @include media($desktop) {
        @include span-columns(9 of 16);
        @include shift(1);
      }
    }
  }
}


/*
Header & footer

The site header and footer are targeted by their ARIA roles, not a `class` or `id`. Use `banner` and `contentinfo` roles, respectively.

Style guide: Grid.7 Header & footer
*/

header {
  &[role='banner'] {
    @include outer-container(100%);
    min-width: 100%;
  }
}

footer {
  &[role='contentinfo'] {
    @include outer-container(100%);
    @include pad(0 default);
    margin-top: ($base-spacing * 2);
    min-width: 100%;
  }
}

/*
Accessibility

Low-vision users should be able to increase the size of the text by up to 200 per cent without breaking the layout.

<details open data-label="grid-text-accessibility" aria-expanded="false">
  <summary>Accessibility &amp; browser testing</summary>
  <div class="accordion-panel">
  <strong>Passed</strong>:
    <ul>
      <li>HTML5 validation (<a href="http://validator.github.io/validator/" rel="external">Nu Html Checker</a>)</li>
      <li>WCAG:AA automated (<a href="http://squizlabs.github.io/HTML_CodeSniffer/Standards/WCAG2/" rel="external">HTML_CodeSniffer</a>)</li>
    </ul>
  <strong>Untested</strong>:
    <ul>
      <li>WCAG:AA manual</li>
      <li>Browser support &mdash; automated and manual</li>
    </ul>
  </div>
</details>

Style guide: Grid.8 Accessibility
*/

figure {
  margin: 0;

  img {
    display: block;
  }
}

img {
  max-width: 100%;
}

/*
Link styles

Styling for types and classes of links.

There are other link styles documented elsewhere (for example [tags in list styles](http://gov-au-ui-kit.apps.staging.digital.gov.au/section-list-styles.html)).

Style guide: Link styles
*/

/*
Hover, focus & external links

The `:hover` and `:focus` styles are identical.

Inverted colour versions of `:hover` and `:focus` are created using `@mixin link-colours` where required (eg in the page header). The `_buttons.scss` partial includes a similar mixin: `@mixin button-colours`.

Link to external sites using `rel="external"`.

Markup: templates/basic-links.hbs

<details open data-label="basic-links-accessibility" aria-expanded="false">
  <summary>Accessibility &amp; browser testing</summary>
  <div class="accordion-panel">
  <strong>Passed</strong>:
    <ul>
      <li>HTML5 validation (<a href="http://validator.github.io/validator/" rel="external">Nu Html Checker</a>)</li>
      <li>WCAG:AA automated (<a href="http://squizlabs.github.io/HTML_CodeSniffer/Standards/WCAG2/" rel="external">HTML_CodeSniffer</a>)</li>
    </ul>
  <strong>Untested</strong>:
    <ul>
      <li>WCAG:AA manual</li>
      <li>Browser support &mdash; automated and manual</li>
    </ul>
  </div>
</details>

Style guide: Link styles.1 Hover links
*/

// A base extend that provides the styling for icons at the end of a link.
%base-link-icon--after {
  content: '';
  position: absolute;
  display: inline;
  width: $medium-spacing;
  height: $medium-spacing;
  background-repeat: no-repeat;
  background-position: right $tiny-spacing;
  border-bottom: 1px solid transparent;
}

@mixin link-colours($text-colour, $hover-bg-colour, $hover-text-colour: $text-colour) {
  $link-disabled-colour: transparentize($text-colour, 0.3);
  color: $text-colour;

  a {
    color: $text-colour;
    text-decoration: none;
    outline: none;
    border-bottom: solid 1px $hover-bg-colour;
    transition-timing-function: $transition-easing;
    transition-duration: $transition-timing-fast;
    transition-property: background-color, border-color, color;

    &:hover,
    &:focus {
      background-color: $hover-bg-colour;
      color: $hover-text-colour;
    }

    &[rel~='external'] {
      display: inline;
      position: relative;
      margin-right: $base-spacing;

      &:hover {
        border-color: transparent;
      }

      &::after {
        @extend %icon-external-link--aqua;
        @extend %base-link-icon--after;

        background-size: (0.75 * $medium-spacing) auto;
      }
    }
  }

  /*
  See more link

  Use see more links at the end of [lists](section-list-styles.html),
  to take the user to a index page of all items.

  Markup: <a class="see-more" href="#">See more</a>

  <details open data-label="placeholder-link-accessibility" aria-expanded="false">
    <summary>Accessibility &amp; browser testing</summary>
    <div class="accordion-panel">
    <strong>Passed</strong>:
      <ul>
        <li>HTML5 validation (<a href="http://validator.github.io/validator/" rel="external">Nu Html Checker</a>)</li>
        <li>WCAG:AA automated (<a href="http://squizlabs.github.io/HTML_CodeSniffer/Standards/WCAG2/" rel="external">HTML_CodeSniffer</a>)</li>
      </ul>
    <strong>Untested</strong>:
      <ul>
        <li>WCAG:AA manual</li>
        <li>Browser support &mdash; automated and manual</li>
      </ul>
    </div>
  </details>

  Style guide: Link styles.2 See more link
  */

  .see-more {
    display: inline-block;
    position: relative;
    margin-right: $base-spacing;
    font-weight: $heading-font-weight;
    color: $button-bg-colour;

    &::after {
      @extend %icon-arrow-right--aqua;

      content: '';
      position: absolute;
      top: 0;
      right: -($medium-spacing);
      display: block;
      width: $medium-spacing;
      height: $medium-spacing;
      background-repeat: no-repeat;
      background-position: right $tiny-spacing;
      background-size: (0.8 * $small-spacing) auto;
    }

    &:hover,
    &:focus {
      color: $hover-text-colour;
    }
  }

  /*
  Placeholder links (prototyping)

  Use placeholder links (greyed out links) to show actions that users can't currently take.

  Your content should explain why the action isn't available and when it will be.

  <p class="callout">Placeholders only work in `<span>` tags; not `<a>`.</p>

  Markup: <p><span class="placeholder-link">Draft news item</span></p>
  <p><a href="#">News item</a><p>

  <details open data-label="placeholder-links-accessibility" aria-expanded="false">
    <summary>Accessibility &amp; browser testing</summary>
    <div class="accordion-panel">
    <strong>Passed</strong>:
      <ul>
        <li>HTML5 validation (<a href="http://validator.github.io/validator/" rel="external">Nu Html Checker</a>)</li>
        <li>WCAG:AA automated (<a href="http://squizlabs.github.io/HTML_CodeSniffer/Standards/WCAG2/" rel="external">HTML_CodeSniffer</a>)</li>
      </ul>
    <strong>Untested</strong>:
      <ul>
        <li>WCAG:AA manual</li>
        <li>Browser support &mdash; automated and manual</li>
      </ul>
    </div>
  </details>

  Style guide: Link styles.3 Placeholder links
  */

  // Specifying a span here explicitly to avoid a.placeholder-link usage.
  span {
    &.placeholder-link {
      color: $link-disabled-colour;
      border-bottom: none;
      cursor: not-allowed;

      &:hover {
        cursor: not-allowed;
      }
    }
  }
}

// Placeholder link support for .local-nav padding and indents
.local-nav {
  ul {
    .placeholder-link {
      display: block;
      border-left: 4px solid transparent;
      padding: ($medium-spacing / 2) $small-spacing;
    }

    ul {
      ul {
        .placeholder-link {
          padding-left: $base-spacing;
        }

        ul {
          .placeholder-link {
            padding-left: $base-spacing + $small-spacing;
          }
        }
      }
    }
  }
}

main > article,
footer[role='contentinfo'] {
  @include link-colours($non-black, $light-aqua, $non-black);
  @include button-colours($button-bg-colour, $button-bg-colour--hover, $button-bg-colour--active, $button-text-colour);
}

/*
List styles

List styles make collections of similar content more usable and discoverable.

You can add usual body elements within each list item (eg ordered and unordered lists).

Use `<a class="see-more">` after your list to link to an index of all items.

Style guide: List styles
*/

/*
Horizontal style

Horizontal style provides a single column of list items.

Markup: templates/lists-horizontal.hbs

<details open data-label="horizontal-list-styles-accessibility" aria-expanded="false">
  <summary>Accessibility &amp; browser testing</summary>
  <div class="accordion-panel">
  <strong>Passed</strong>:
    <ul>
      <li>HTML5 validation (<a href="http://validator.github.io/validator/" rel="external">Nu Html Checker</a>)</li>
      <li>WCAG:AA automated (<a href="http://squizlabs.github.io/HTML_CodeSniffer/Standards/WCAG2/" rel="external">HTML_CodeSniffer</a>)</li>
    </ul>
  <strong>Untested</strong>:
    <ul>
      <li>WCAG:AA manual</li>
      <li>Browser support &mdash; automated and manual</li>
    </ul>
  </div>
</details>

Style guide: List styles.1 Horizontal style
*/

/*
Vertical style

Vertical style provides multiple columns of list items. By default the vertical lists are displayed in 2 columns.

You can change the number of columns used:

- `.vertical-list--thirds` give 3 columns of list items
- `.vertical-list--fourths` give 4 columns of list items.

For <a href="http://caniuse.com/#feat=flexbox" rel="external">browsers that don't support Flexbox layout</a> lists will appear as in horizontal style with images (if used) below each list item.

Markup: templates/lists-vertical.hbs

<details open data-label="vertical-list-styles-accessibility" aria-expanded="false">
  <summary>Accessibility &amp; browser testing</summary>
  <div class="accordion-panel">
  <strong>Passed</strong>:
    <ul>
      <li>HTML5 validation (<a href="http://validator.github.io/validator/" rel="external">Nu Html Checker</a>)</li>
      <li>WCAG:AA automated (<a href="http://squizlabs.github.io/HTML_CodeSniffer/Standards/WCAG2/" rel="external">HTML_CodeSniffer</a>)</li>
    </ul>
  <strong>Untested</strong>:
    <ul>
      <li>WCAG:AA manual</li>
      <li>Browser support &mdash; automated and manual</li>
    </ul>
  </div>
</details>

Style guide: List styles.2 Vertical style
*/

/*
Small list style

Use small list style for large groups of list items.

Markup: templates/lists-small.hbs

<details open data-label="small-list-styles-accessibility" aria-expanded="false">
  <summary>Accessibility &amp; browser testing</summary>
  <div class="accordion-panel">
  <strong>Passed</strong>:
    <ul>
      <li>HTML5 validation (<a href="http://validator.github.io/validator/" rel="external">Nu Html Checker</a>)</li>
      <li>WCAG:AA automated (<a href="http://squizlabs.github.io/HTML_CodeSniffer/Standards/WCAG2/" rel="external">HTML_CodeSniffer</a>)</li>
    </ul>
  <strong>Untested</strong>:
    <ul>
      <li>WCAG:AA manual</li>
      <li>Browser support &mdash; automated and manual</li>
    </ul>
  </div>
</details>

Style guide: List styles.3 Small list style
*/

/*
Highlighted words style

Use highlighted words style for a list with repeating phrases.

Markup: templates/lists-highlighted.hbs

<details open data-label="highlighted-list-styles-accessibility" aria-expanded="false">
  <summary>Accessibility notes</summary>
  <div class="accordion-panel">

    <p>**Passed** HTML5 validation by <a href="http://validator.github.io/validator/" rel="external">Nu Html Checker</a><br/>
    **Passed** WCAG:AA automated by <a href="http://squizlabs.github.io/HTML_CodeSniffer/Standards/WCAG2/" rel="external">HTML_CodeSniffer</a><br/>
    **Untested** WCAG:AA manual compliance<br/>
    **Untested** Supported browsers tested</p>
  </div>
</details>

Style guide: List styles.4 Highlighted word style
*/

%base-list {
  @include clearfix;

  margin-top: $base-spacing * 1.4; // Revisit.
  padding: 0;
  list-style: none;

  .tags {
    @include link-colours($button-bg-colour, $link-colour--hover, $link-colour);
    color: $grey;

    dl,
    dt,
    dd {
      display: inline-block;
      margin: 0;
      padding: 0;
      line-height: $base-heading-leading * 1.5; // Revisit.
    }

    dt,
    dd {
      margin-right: $tiny-spacing;
      font-size: $small-font-size;
    }

    a {
      padding: 2px $tiny-spacing;
      border: 1px solid $button-bg-colour;
      border-radius: 2px;

      &:hover,
      &:focus {
        border-color: $link-colour--hover;
      }
    }
  }

  .meta {
    font-size: $small-font-size;
    margin-bottom: $small-spacing;

    time {
      color: $grey;
    }
  }

  > li {
    padding: flex-gutter($content-grid-columns) 0;
    border-bottom: solid 1px $border-colour;
    margin-bottom: 0;
  }

  h2,
  h3,
  h4,
  h5,
  h6 {
    margin-top: 0;
    margin-bottom: $tiny-spacing;

    font-size: rem(18);
    font-weight: $heading-font-weight;
    line-height: $base-heading-leading;
  }

  img {
    display: block;
  }
}



.list-horizontal {
  @extend %base-list;

  > li {
    width: 100%;
    max-width: none;

    @include media($tablet) {
      display: flex;
    }

    figure {
      @include media($mobile) {
        margin-bottom: $medium-spacing;
      }
      @include media($tablet) {
        flex: 0 0 35%;
        margin-right: $base-spacing;
      }
    }

    .meta {
      time {
        display: inline-block;
        margin-right: $small-spacing;
      }
    }

    &:last-child {
      border-bottom: none;
    }

    &.hero-item {
      border-top: solid 1px $border-colour;

      figure {
        @include media($tablet) {
          flex-basis: 65%;
        }
      }
    }
  }
}


%base-vertical-list {
  @extend %base-list;

  /*
  Consider how to create an equal height grid of list items.
  Could use this for overflow http://jsfiddle.net/barney/TPP8g/

  &.vertical-list--grid {
    > li {
      min-height: 13em;
    }
  }
  */

  @include ie-lte(8) {
    @include ie-clearfix;
  }

  > li {

    border-top: 6px solid $border-highlight-colour;
    border-bottom: none;

    article {
      display: flex;
      flex-wrap: wrap;

      h3,
      div,
      p {
        flex: 0 0 100%;
      }
    }

    p {
      min-height: auto;
    }

    .meta {
      order: -1;

      time {
        display: block;
      }
    }
  }
}

.list-vertical {
  @extend %base-vertical-list;

  &.no-border {
    li:nth-child(-n+2) {
      border-top: none;
      padding-top: 0;
    }
  }

  > li {
    @include media($tablet) {
      @include span-columns(6 of 12);
      @include omega(2n);
    }
  }
}


.list-vertical--thirds {
  @extend %base-vertical-list;

  &.no-border {
    li:nth-child(-n+3) {
      border-top: none;
      padding-top: 0;
    }
  }

  > li {
    @include media($tablet) {
      @include span-columns(6 of 12);
      @include omega(2n);

      @include ie-lte(8) {
        width: 49%;
      }
    }
    @include media($desktop) {
      @include omega-reset(2n);
      @include span-columns(4 of 12);
      @include omega(3n);

      @include ie-lte(8) {
        width: 30%;
      }
    }
  }
}


.list-vertical--fourths {
  @extend %base-vertical-list;

  &.no-border {
    li:nth-child(-n+4) {
      border-top: none;
      padding-top: 0;
    }
  }

  > li {
    @include media($tablet) {
      @include span-columns(6 of 12);
      @include omega(2n);
    }
    @include media($desktop) {
      @include omega-reset(2n);
      @include span-columns(3 of 12);
      @include omega(4n);

      @include ie-lte(8) {
        width: 21%;
      }
    }
  }
}


.list-small {
  @extend %base-list;
  border-top: solid 1px $border-colour;

  a {
    @extend %icon-arrow-right;

    display: block;
    padding: $small-spacing;
    padding-left: ($base-spacing * 2);
    border-bottom: none;
    background-repeat: no-repeat;
    background-position: $base-spacing ($small-spacing * 1.75);
    background-size: $tiny-spacing auto;
    transition: background $transition-timing $transition-easing;

    &:hover,
    &:active {
      background-position: ($base-spacing * 1.25) ($small-spacing * 1.75);
      background-color: $background-secondary-colour;

      span {
        color: $dark-aqua;
      }
    }

  }

  span {
    color: $link-colour;
    text-decoration: none;
    border-bottom: 1px solid;
  }

  li {
    padding: 0;
  }

  .meta {
    display: block;
    margin: 0;
  }
}

.list-highlighted {
  @extend %base-list;

  li {
    list-style: none;
    border-bottom: 0;
    padding-bottom: $base-spacing;
    padding-top: 0;
  }

  a {
    font-size: $large-font-size;
    font-weight: $heading-font-weight;
    line-height: $base-heading-leading;

    span {
      display: block;
      font-size: $smaller-font-size;
    }
  }
}

/*
Navigation

Ensure users understand where they are in the service, where they have been and where they can go.

***

This guidance is in part adapted from <a href="https://standards.usa.gov/getting-started/" rel="external">18F Draft US Web Design Standards</a> under <a href="https://creativecommons.org/publicdomain/zero/1.0/legalcode" rel="external">CC0 1.0 Universal</a>.

Style guide: Navigation
*/

/*
Global navigation

The global navigation panel is collapsed (hidden) by default.

Older browsers (IE8 and lower) and those without JavaScript will get an expanded menu without a hamburger button.

Markup: templates/global-navigation.hbs

<details open data-label="global-nav-accessibility" aria-expanded="false">
  <summary>Accessibility &amp; browser testing</summary>
  <div class="accordion-panel">
  <strong>Passed</strong>:
    <ul>
      <li>HTML5 validation (<a href="http://validator.github.io/validator/" rel="external">Nu Html Checker</a>)</li>
      <li>WCAG:AA automated (<a href="http://squizlabs.github.io/HTML_CodeSniffer/Standards/WCAG2/" rel="external">HTML_CodeSniffer</a>)</li>
    </ul>
  <strong>Untested</strong>:
    <ul>
      <li>WCAG:AA manual</li>
      <li>Browser support &mdash; automated and manual</li>
    </ul>
  </div>
</details>

Style guide: Navigation.1 Global navigation
*/

/*
Local navigation

Use local navigation to help the user go straight to the specific content that meets their needs.

The framework provides a vertical navigation menu. The home page title is always at top, followed by up to 3 levels of navigation.

Small screens (up to `$tablet` breakpoint) will see the menu closed (unexpanded) by default.

Older browsers (IE8 and lower) and those without JavaScript will see an expanded menu. It will not be able to be closed.

Use active state to show where the user is. Use `class="is-active"` for each clicked menu item. Use  `class="is-active is-current"` for the current location.

Markup: templates/local-navigation.hbs

<details open data-label="local-nav-accessibility" aria-expanded="false">
  <summary>Accessibility &amp; browser testing</summary>
  <div class="accordion-panel">
  <strong>Passed</strong>:
    <ul>
      <li>HTML5 validation (<a href="http://validator.github.io/validator/" rel="external">Nu Html Checker</a>)</li>
      <li>WCAG:AA automated (<a href="http://squizlabs.github.io/HTML_CodeSniffer/Standards/WCAG2/" rel="external">HTML_CodeSniffer</a>)</li>
    </ul>
  <strong>Untested</strong>:
    <ul>
      <li>WCAG:AA manual</li>
      <li>Browser support &mdash; automated and manual</li>
    </ul>
  </div>
</details>

Style guide: Navigation.2 Local navigation
*/

/*
Breadcrumbs

Breadcrumbs help the user understand where they are in the service and how they got there.

They appear directly under a page header or hero, from `$tablet` breakpoint upwards.

Markup: templates/breadcrumbs.hbs

<details open data-label="breadcrumb-accessibility" aria-expanded="false">
  <summary>Accessibility &amp; browser testing</summary>
  <div class="accordion-panel">
  <strong>Passed</strong>:
    <ul>
      <li>HTML5 validation (<a href="http://validator.github.io/validator/" rel="external">Nu Html Checker</a>)</li>
      <li>WCAG:AA automated (<a href="http://squizlabs.github.io/HTML_CodeSniffer/Standards/WCAG2/" rel="external">HTML_CodeSniffer</a>)</li>
    </ul>
  <strong>Untested</strong>:
    <ul>
      <li>WCAG:AA manual</li>
      <li>Browser support &mdash; automated and manual</li>
    </ul>
  </div>
</details>

Style guide: Navigation.3 Breadcrumbs
*/

/*
Contents links

Contents links (index links) help users understand the page structure.

A heading is optional &mdash; use the correct header level for the page structure.

Users with modern browsers will see a smooth scroll down the page.

Markup: templates/index-links.hbs

<details open data-label="index-links-accessibility" aria-expanded="false">
  <summary>Accessibility &amp; browser testing</summary>
  <div class="accordion-panel">
  <strong>Passed</strong>:
    <ul>
      <li>HTML5 validation (<a href="http://validator.github.io/validator/" rel="external">Nu Html Checker</a>)</li>
      <li>WCAG:AA automated (<a href="http://squizlabs.github.io/HTML_CodeSniffer/Standards/WCAG2/" rel="external">HTML_CodeSniffer</a>)</li>
    </ul>
  <strong>Untested</strong>:
    <ul>
      <li>WCAG:AA manual</li>
      <li>Browser support &mdash; automated and manual</li>
    </ul>
  </div>
</details>

Style guide: Navigation.4 Contents links
*/

/*
Inline links block

You can present a list of links as a horizontal block using an unsorted list with the `.inline-links` class.

Markup: templates/inline-links.hbs

<details open data-label="inline-links-accessibility" aria-expanded="false">
  <summary>Accessibility &amp; browser testing</summary>
  <div class="accordion-panel">
  <strong>Passed</strong>:
    <ul>
      <li>HTML5 validation (<a href="http://validator.github.io/validator/" rel="external">Nu Html Checker</a>)</li>
      <li>WCAG:AA automated (<a href="http://squizlabs.github.io/HTML_CodeSniffer/Standards/WCAG2/" rel="external">HTML_CodeSniffer</a>)</li>
    </ul>
  <strong>Untested</strong>:
    <ul>
      <li>WCAG:AA manual</li>
      <li>Browser support &mdash; automated and manual</li>
    </ul>
  </div>
</details>

Style guide: Navigation.5 Inline links
*/

/*
Footer navigation

Footers help users who reach the bottom of a page without finding what they want.

This framework uses CSS Flexboxes to manage columns. It provides:

- lists of links arranged horizontally
- 2 columns for `$mobile` and `$tablet` breakpoint
- 4 columns for `$desktop` breakpoint.

Markup: templates/footer-navigation.hbs

<details open data-label="footer-nav-accessibility" aria-expanded="false">
  <summary>Accessibility &amp; browser testing</summary>
  <div class="accordion-panel">
  <strong>Passed</strong>:
    <ul>
      <li>HTML5 validation (<a href="http://validator.github.io/validator/" rel="external">Nu Html Checker</a>)</li>
      <li>WCAG:AA automated (<a href="http://squizlabs.github.io/HTML_CodeSniffer/Standards/WCAG2/" rel="external">HTML_CodeSniffer</a>)</li>
    </ul>
  <strong>Untested</strong>:
    <ul>
      <li>WCAG:AA manual</li>
      <li>Browser support &mdash; automated and manual</li>
    </ul>
  </div>
</details>

Style guide: Navigation.6 Footer navigation
*/

.govau--header {
  .nav-toggle {
    position: relative;
    float: right;
    height: auto;
    width: auto;
    margin: $tiny-spacing 0;
    padding: 0;
    border: 0;
    border-bottom: 1px solid;

    &::before {
      @extend %icon-bars;
      content: '';
      position: absolute;
      top: .25em;
      bottom: .25em;
      left: ($base-spacing * -1);
      width: $medium-spacing;
      background-repeat: no-repeat;
      background-size: auto 100%;
    }

    &.active {
      &::before {
        @extend %icon-close;
        transform: none;
      }
    }

    &,
    &:hover {
      background-color: transparent;
      color: $body-inverted-text-colour;
    }
  }
}

.global-nav {
  clear: both;
  padding: $tiny-spacing 0 $small-spacing;
  overflow: hidden;

  ul {
    list-style-type: none;
    margin: $base-spacing 0;
    padding: 0;

    @include media($tablet) {
      @include outer-container;
      margin-top: $base-spacing;
    }
  }

  li {
    margin: 0;
    border-bottom: 1px solid $border-soft-colour;

    &:first-child {
      border-top: 1px solid $border-soft-colour;
    }

    @include media($tablet) {
      @include span-columns(6 of 12);
      @include omega(2n);

      &:nth-child(2) {
        border-top: 1px solid $border-soft-colour;
      }
    }

    @include media($desktop) {
      @include span-columns(8 of 16);
    }

    a {
      display: block;
      border: none;
      padding: $small-spacing 0 1em;
      color: $body-inverted-text-colour;

      &:focus,
      &:hover {
        background-color: transparent;
        color: $body-inverted-text-colour;
      }
    }
  }

  .feedback {
    display: block;

    @include media($tablet) {
      display: none;
    }
  }

  &:focus {
    outline: none;
  }
}

.sidebar {
  padding: 0 0 $base-spacing;
}

.nav-toggle {
  @extend %base-button;

  position: relative;
  width: 100%;
  margin: $base-spacing 0 0;
  border: 0;
  background-color: $background-secondary-colour;
  text-align: left;
  font-weight: $base-font-weight;
  color: $button-inverted-text-colour;

  &:focus,
  &:hover {
    background-color: $light-grey;
  }

  &::before {
    @extend %icon-chevron-down--navy;

    content: '';
    position: absolute;
    top: .5em;
    bottom: .5em;
    right: $small-spacing;
    width: $medium-spacing;
    background-repeat: no-repeat;
    background-size: 100% auto;
    background-position: center center;
    transform: rotate(0deg);
    transition: transform $transition-timing $transition-easing;
  }

  &.active {
    margin-bottom: 0;

    &::before {
      transform: rotate(180deg);
    }
  }

  @include media($tablet) {
    display: none;
  }
}

.local-nav {
  padding-top: 0;
  @include media($tablet) {
    padding: $base-spacing 0;
  }
}

.primary-nav,
.local-nav {
  overflow: hidden;

  ul {
    @include link-colours($link-colour, $focus-colour, $link-colour);
    margin: 0;
    padding: 0;
    list-style: none;

    ul {
      font-size: rem(14); // level 2+ should be 14px
      margin: 0;
      text-transform: none;

      li {
        &:last-child {
          border-bottom: none;
        }
      }

      ul {
        a {
          padding-left: $base-spacing;
          border-bottom: 0;
        }

        ul {
          a {
            @extend %icon-arrow-right;
            padding-left: $base-spacing + $small-spacing;
            background-repeat: no-repeat;
            background-position: $base-spacing center;
            background-size: $tiny-spacing auto;
          }
        }
      }
    }

    li {
      margin: 0;
      padding: 0;
      border-bottom: 1px solid $border-colour;

      &:first-child {
        border-top: 1px solid $border-colour;
      }
    }

    a {
      display: block;
      border: none;
      border-left: 4px solid transparent;
      border-bottom: none;
      padding: $small-spacing;
      text-decoration: none;
      transition: border-color $transition-timing-fast $transition-easing;

      &:hover {
        border-color: $border-contrast-colour;
      }

      &.is-active {
        font-weight: $bold-font-weight;
      }

      &.is-current {
        background-color: $focus-colour;
      }

    }

  }

}

// This class is legacy as of v1.2
// Marked for removal at 2.0
.primary-nav {
  padding: $base-spacing 0;

  .nav-heading {
    color: $darker-aqua;
    background: $background-secondary-colour;
    margin: $base-spacing 0;

    .chevron {
      float: right;
    }
  }
}

// This class is legacy as of v1.2
// Marked for removal at 2.0
.js {
  .primary-nav {
    ul {
      margin: 0;
      display: none;
      @include media($tablet) {
        margin: inherit;
        display: block;
      }
    }
  }

  .nav-heading {
    display: block;
    background-color: $dark-aqua;
    color: $white;
    padding: $medium-spacing / 2 $small-spacing;

    &:hover {
      border-color: $dark-aqua;
      background-color: $dark-aqua;
    }

    @include media($tablet) {
      display: none;
    }
  }
}

[class^='breadcrumbs'] {
  @include link-colours($link-colour, $link-colour--hover);
  display: none;
  width: 100%;
  margin: 0;
  background-color: $breadcrumbs-bg-colour;
  color: $body-text-colour;

  @include media($tablet) {
    display: inline-block;
  }

  ul {
    margin: 0;
    padding: $small-spacing 0 .8 * $medium-spacing;
    line-height: $medium-spacing;
    list-style: none;

    li {
      display: inline-block;
      margin: 0;
      padding: 0;
      font-size: rem(14);

      &:not(:last-child) {
        @extend %icon-arrow-right;
        margin-right: $small-spacing;
        padding-right: $medium-spacing;
        background-repeat: no-repeat;
        background-position: right;
        background-size: $tiny-spacing auto;
      }
    }
  }

  &[class$='--inverted'] {
    @include link-colours($link-inverted-colour, $link-inverted-colour--hover, $link-colour);
    background-color: transparent;
    color: $body-inverted-text-colour;

    ul {
      li:not(:last-child) {
        @extend %icon-arrow-right--white;
        color: $body-inverted-text-colour;
      }
    }
  }
}

/*
Skip links

Provide skip links to navigation and content.

These are hidden visually by default but keyboard accessible.

Include skip links between the opening of the `<body>` and the page `<header>`.

<div class="callout">
  <p>To test,
    <a href="javascript:;">click to move focus to this</a> then press <kbd>Tab</kbd> to show:
  </p>
  <ul>
    <li>Skip to main content</li>
    <li>Skip to section navigation</li>
  </ul>
  <p>(The example space will be visually empty until the skip links receive focus.)</p>
</div>

Markup: templates/skip-link.hbs

<details open data-label="skip-links-accessibility" aria-expanded="false">
  <summary>Accessibility &amp; browser testing</summary>
  <div class="accordion-panel">
  <strong>Passed</strong>:
    <ul>
      <li>HTML5 validation (<a href="http://validator.github.io/validator/" rel="external">Nu Html Checker</a>)</li>
      <li>WCAG:AA automated (<a href="http://squizlabs.github.io/HTML_CodeSniffer/Standards/WCAG2/" rel="external">HTML_CodeSniffer</a>)</li>
    </ul>
  <strong>Untested</strong>:
    <ul>
      <li>WCAG:AA manual</li>
      <li>Browser support &mdash; automated and manual</li>
    </ul>
  </div>
</details>

Style guide: Navigation.7 Skip links
*/

.skip-to {
  @include link-colours($link-colour, $link-colour--hover);
  position: relative;
  z-index: 99;

  a {
    border: 0;
    clip: rect(0, 0, 0, 0);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
    width: 1px;
    border-radius: $tiny-border-radius;

    &:active,
    &:focus {
      clip: auto;
      height: auto;
      margin: 0;
      overflow: visible;
      position: absolute;
      width: auto;
      top: 10px;
      left: 10px;
      padding: $tiny-spacing $small-spacing;
    }
  }
}

.index-links {
  margin: ($base-spacing * 2) 0 $base-spacing 0;
  border-left: $tiny-spacing solid $non-white;
  padding: 0 0 $medium-spacing ($base-spacing - $tiny-spacing);

  h2,
  h3,
  h4,
  h5,
  h6 {
    font-size: rem(17);
    margin-top: $base-spacing;
    color: $grey;
    font-weight: $base-font-weight;
  }

  ul,
  ol {
    list-style-type: none;
    margin: $base-spacing 0 0;
    padding: 0;
  }

  li {
    margin-bottom: $medium-spacing;
    font-weight: $bold-font-weight;

    &:last-child {
      margin-bottom: 0;
    }
  }
}

[class^='inline-links'] {
  display: inline-block;
  list-style-type: none;
  margin: 0;
  padding: $small-spacing 0;

  li {
    display: inline-block;
    margin: 0 $tiny-spacing;
  }

  &[class$='--inverted'] {
    a {
      color: $body-inverted-text-colour;
    }
  }
}

/*
Groups of links

Use groups of links to help users find content elsewhere that will meet their needs.

Groups of links span from 2 columns (`$mobile`) up to 4 columns (`$tablet` and `$desktop`).

You can use groups of links:

- in the header (eg listing popular links across the site)
- anywhere within an `article` (eg as a list of related topics).

Markup: templates/groups-links.hbs

<details open data-label="group-links-accessibility" aria-expanded="false">
  <summary>Accessibility &amp; browser testing</summary>
  <div class="accordion-panel">
  <strong>Passed</strong>:
    <ul>
      <li>HTML5 validation (<a href="http://validator.github.io/validator/" rel="external">Nu Html Checker</a>)</li>
      <li>WCAG:AA automated (<a href="http://squizlabs.github.io/HTML_CodeSniffer/Standards/WCAG2/" rel="external">HTML_CodeSniffer</a>)</li>
    </ul>
  <strong>Untested</strong>:
    <ul>
      <li>WCAG:AA manual</li>
      <li>Browser support &mdash; automated and manual</li>
    </ul>
  </div>
</details>

Style guide: Navigation.8 Group of links
*/

.links-group {
  @include outer-container;

  @include ie-lte(8) {
    @include ie-clearfix;
  }

  ul {
    padding: 0;
    list-style: none;

    li {
      @include span-columns(4);
      float: left;
      margin-top: 0.5em;

      @include media ($mobile-only) {
        @include span-columns(2 of 4);
        @include omega(2n);
        }

      @include media ($tablet-only) {
        @include span-columns(3 of 12);
        @include omega(4n);
        }

      @include media ($desktop) {
        @include span-columns(4 of 16);
        @include omega(4n);

        @include ie-lte(8) {
          width: 21%;
        }
      }
    }
  }
}

/*
Tab navigation (experimental)

Use tab navigation to style a links list as horizontal tabs. Tabs wrap on top of each other for smaller breakpoints.

Use tab navigation in the main content area only.

Client-side context is not affected by the tabs.

Set current location using `class="is-current"`.

Markup: templates/tab-style-nav.hbs

Style guide: Navigation.07 Tab navigation
*/

.inline-tab-nav {
  border-bottom: solid 1px $grey;
  margin: ($base-spacing * 2) 0;

  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    @include media($tablet) {
      display: table-cell;
    }

    font-size: 1em;
    font-weight: 400;
    margin: 0;
    padding: $small-spacing 1.5em;
    padding-left: 0;
    vertical-align: middle;
    white-space: nowrap;
    border-bottom: solid 4px transparent;
  }

  ul {
    @include clearfix;
    @include media($tablet) {
      display: table-cell;
      border-top: none;
    }

    margin: 0;
    padding: 0;
    list-style: none;
    display: block;
    border-top: solid 1px $grey;
  }

  li {
    float: left;
    margin: 0;
    padding: 0;
  }

  a {
    background: transparent;
    display: block;
    float: left;
    vertical-align: bottom;
    padding: $small-spacing 1.5em;
    border-bottom: solid 4px transparent;

    &:hover,
    &:focus {
      color: $non-black;
      border-bottom-color: $aqua;
    }

    &.is-current,
    &.is-active {
      color: $dark-aqua; //Accessibility: can't be $aqua on $lighter-aqua
      background-color: $lighter-aqua;
      border-bottom-color: $aqua;
    }
  }

}

/*
Accessibility

- All navigation must be keyboard accessible and include ARIA tags.
- Use the HTML `<nav>` element for controls and the given state classes to show which page the user is on.
- Use short navigation links. They don't have to be the full page title.
- Test with users to ensure the navigation hierarchy is not too long or too deep.
- Use the [correct colour contrast](section-colours.html#guide-colours-3-colour-contrast) for breadcrumbs and inline links.

Style guide: Navigation.10 Accessibility
*/

footer[role='contentinfo'] {
  @include pad(( $base-spacing * 2 ) 0);

  background-color: $non-white;
  border-top: 6px solid $border-contrast-colour;

  ul {
    padding: 0;
  }

  li {
    list-style: none;
  }

  .footer-logo {
    @include media($tablet) {
      @include span-columns(3 of 12);
    }

    img {
      max-height: 7em; //was $base-spacing * 4;
    }
  }

  .footer-links {
    @include media($tablet) {
      @include span-columns(9 of 12);
    }

    ul {
      @include media($tablet) {
        margin-top: 0;
      }
    }

    li {
      display: block;
      margin-right: $small-spacing;

      @include media($tablet) {
        display: inline-block;
      }
    }

    a {
      display: inline-block;
    }
  }

  // Footer navigation is documented in the navigation partial.
  .footer-top {
    margin-bottom: $base-spacing * 2;
    padding-bottom: $base-spacing * 2;
    border-bottom: 1px solid $border-colour;

    nav {
      @extend %base-vertical-list;

      ul {
        @include media($tablet) {
          @include span-columns(6 of 12);
          @include omega(2n);
        }

        @include media($desktop) {
          @include omega-reset(2n);
          @include span-columns(3 of 12);
          @include omega(5n);

          @include ie-lte(8) {
            width: 21%;
          }
        }
      }

      li {
        line-height: 1.5em;
        list-style: none;

        h1,
        h2,
        h3,
        h4 {
          font-size: rem(16);
          font-weight: $heading-font-weight;
        }
      }
    }
  }
}

[class^='controls'] {
  @include link-colours($link-inverted-colour, $link-inverted-colour, $controls-bg-colour);
  @include button-colours(transparent, $body-inverted-text-colour, $body-inverted-text-colour, $controls-bg-colour);

  padding: $tiny-spacing 0;
  background-color: $controls-bg-colour;
  color: $body-inverted-text-colour;

  section {

    @include span-columns(4 of 4);

    @include media($tablet) {
      @include span-columns(6 of 12);
    }

    @include media($desktop) {
      @include span-columns(8 of 16);
    }

    &:first-child:last-child {
      @include span-columns(4 of 4);

      @include media($tablet) {
        @include span-columns(12 of 12);
      }

      @include media($desktop) {
        @include span-columns(16 of 16);
      }
    }

    &.right {
      @include media($tablet) {
        text-align: right;
      }
    }
  }

  [class^='breadcrumbs'] {
    width: auto;
    margin-right: $small-spacing;
    background-color: transparent;
  }

  [role='button'] {
    margin: 0;
  }

  &[class$='--contrast'] {
    @include button-colours($controls-contrast-bg-colour, $body-inverted-text-colour, $body-inverted-text-colour, $body-inverted-text-colour, $controls-contrast-bg-colour);

    background-color: $controls-contrast-bg-colour;

    [role='button']:hover,
    [role='button']:focus {
      color: $controls-contrast-bg-colour;
    }
  }
}

.govau--header,
.prerelease-govau--header {
  .links-group {
    margin: ($base-spacing * 1.5) 0;

    @include ie-lte(8) {
      margin-bottom: 0;
      padding-bottom: $base-spacing * 1.5;
    }

    h2 {
      font-size: rem(17);
      font-weight: $bold-font-weight;
      margin-top: 0;
      padding: 0;
    }

    a {
      color: $white;
    }
  }
}

.govau--header {
  @include link-colours($link-inverted-colour, $link-inverted-colour, $link-colour);
  @include button-colours($header-bg-colour, $body-inverted-text-colour, $body-inverted-text-colour, $body-inverted-text-colour, $header-bg-colour);

  position: relative;
  padding: $medium-spacing 0 ($base-spacing * 3);
  padding-bottom: $medium-spacing;
  margin-bottom: 0;
  background-color: $header-bg-colour;
  color: $body-inverted-text-colour;

  @include media($tablet) {
    padding-bottom: $medium-spacing;
  }

  .govau--logo {
    float: left;

    @include media($tablet) {
      padding-bottom: 0;
    }
  }

  .logo {
    font-size: rem(24);
    font-weight: $heading-font-weight;
    padding-bottom: 2px;
    border-bottom: 0;
    color: $body-inverted-text-colour;
    font-family: $base-sans-serif;
    text-transform: uppercase;
    letter-spacing: 2px;
  }

  [class^='badge'] {
    vertical-align: text-bottom;
    margin-left: $tiny-spacing;
  }
}

.prerelease-govau--header {
  @include link-colours($link-inverted-colour, $link-inverted-colour, $link-colour);
  @include button-colours(transparent, $body-inverted-text-colour, $body-inverted-text-colour, $body-inverted-text-colour, $header-bg-colour);

  position: relative;
  padding: $base-spacing 0 ($base-spacing * 3);
  padding-bottom: $medium-spacing;
  margin-bottom: 0;
  color: $body-inverted-text-colour;

  background-color: $header-bg-colour;
  background-image: image-url('header-bg.jpg');
  background-position: top right;
  background-repeat: no-repeat;

  //CSS gradient not used because of 'dazzle' issues on monitors with low refresh rate.
  //background: $header-bg-colour; /* Old browsers */
  //background: linear-gradient(45deg, $header-bg-colour 0%, $header-bg-colour-2 30%, $header-bg-colour-3 80%, $header-bg-colour-3 100%); /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */
  //filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#043751', endColorstr='#1c809d',GradientType=1 ); /* IE6-9 fallback on horizontal gradient */
  /* Note: do not use variables in above IE filter. */

  @include media($tablet) {
    padding-bottom: 0;
  }

  .govau--logo {
    display: inline-block;
    position: relative;

    @include media($tablet) {
      padding-bottom: 0;
    }

    @include ie-lte(8) {
      display: inline;
    }

    .brandbar {
      position: absolute;
      top: 42px;
      right: 66px;
      width: 50px;
      height: 5px;
    }
  }

  .govau--text {
    display: block;
    background-image: image-url('icons/logo-gov-au-2x.png');
    background-position: center center;
    background-repeat: no-repeat;
    background-size: 100% auto;
    width: 100%;
    max-width: 337px;
    height: 51px;

    &.dusk {
      background-image: image-url('icons/logo-gov-au-2x-dusk.png');
    }

    &.dawn {
      background-image: image-url('icons/logo-gov-au-2x-dawn.png');
    }

    &.night {
      background-image: image-url('icons/logo-gov-au-2x-night.png');
    }

    @include ie-lte(8) {
      background-image: url('../latest/img/icons/logo-gov-au-1x.png');
    }
  }

  .logo {
    font-size: rem(24);
    font-weight: $heading-font-weight;
    padding-bottom: 2px;
    border-bottom: 0;
    color: $body-inverted-text-colour;
    font-family: $base-sans-serif;
    text-transform: uppercase;
    letter-spacing: 2px;
  }

  [class^='badge'] {
    vertical-align: text-bottom;
    margin-left: $tiny-spacing;
  }

  .breadcrumbs,
  .breadcrumbs--inverted {
    margin-top: $medium-spacing;
  }
}

.homeintro {
  p {
    font-size: rem(24);
  }
}

.feedback {
  display: none;

  @include media($tablet) {
    display: block;
    float: right;
    margin-left: $base-spacing;
  }
}

.button--feedback {
  @extend .inverted;

  margin: 0;
  width: 100%;
  text-align: center;

  @include media($tablet) {
    width: auto;
    text-align: initial;
  }
}

.hero,
.hero-sml,
.hero-med {
  @include link-colours($non-black, $light-aqua, $non-black);

  padding: ($base-spacing * 2) 0;
  margin-bottom: 0;
  background-color: $non-white;
  color: $navy;

  &.corporate {
    //^ class name from platforms
    background-color: $hero-bg-colour;
    color: $body-inverted-text-colour;
  }

  h1 {
    font-size: rem(28);
    margin-top: 0;
    max-width: 20em;

    @include media($tablet) {
      font-size: rem(38);
    }
  }

  p {
    font-size: rem(24);
    max-width: 30em;
    margin-bottom: $small-spacing;
  }

  .site-title {
    @extend h1;

    display: block;
    margin-top: 0;
    margin-bottom: $tiny-spacing;
  }

  .tagline {
    font-size: $large-font-size;
  }

  .wrapper {
    > :first-child {
      margin-top: 0;
    }

    > :last-child {
      margin-bottom: 0;
    }
  }

}

.hero-sml {
  padding: $medium-spacing 0;

  p {
    font-size: rem(19);
    font-weight: $bold-font-weight;
  }
}

.hero-med {
  padding: ($base-spacing * 1.5) 0;
}

/*
  Prototype branding bar. Work in progress
*/
.brandbar {
  $bar-noon-1: #00a1bb;
  $bar-noon-2: #b2e5ff;
  $bar-noon-3: #44c2ef;
  background-color: $bar-noon-1;
  height: 8px;
  position: relative;

  .b1 {
    position: absolute;
    left: 25%;
    top: 0;
    bottom: 0;
    width: 50%;
    background-color: $bar-noon-2;
  }

  .b2 {
    position: absolute;
    left: 75%;
    top: 0;
    bottom: 0;
    width: 25%;
    background-color: $bar-noon-3;
  }

  &.dusk {
    $bar-dusk-1: #a62355;
    $bar-dusk-2: #f16a6a;
    $bar-dusk-3: #9c0009;

    background-color: $bar-dusk-1;

    .b1 {
      background-color: $bar-dusk-2;
    }

    .b2 {
      background-color: $bar-dusk-3;
    }
  }

  &.night {
    $bar-night-1: #005ba8;
    $bar-night-2: #3e83c5;
    $bar-night-3: #002a42;

    background-color: $bar-night-1;

    .b1 {
      background-color: $bar-night-2;
    }

    .b2 {
      background-color: $bar-night-3;
    }
  }

  &.dawn {
    $bar-dawn-1: #e63426;
    $bar-dawn-2: #f38c22;
    $bar-dawn-3: #fbc515;

    background-color: $bar-dawn-1;

    .b1 {
      background-color: $bar-dawn-2;
    }

    .b2 {
      background-color: $bar-dawn-3;
    }
  }
}

/*
Tables

Tables make data content easier to scan.

This framework uses striped/zebra tables (alternating row colours).

Use `<thead>`, `<tbody>` and `<tfoot>` to improve how browsers display tables. They don't make tables more accessible.

There is
<a href="https://www.w3.org/WAI/tutorials/tables/" rel="external">guidance on making tables</a> provided by the W3C.

***

This guidance is in part adapted from <a href="http://govuk-elements.herokuapp.com/" rel="external">GOV.UK elements</a> under <a href="https://www.nationalarchives.gov.uk/doc/open-government-licence/version/3/" rel="external">Open Government Licence v3.0</a>, and <a href="https://standards.usa.gov/getting-started/" rel="external">18F Draft US Web Design Standards</a> under <a href="https://creativecommons.org/publicdomain/zero/1.0/legalcode" rel="external">CC0 1.0 Universal</a>.

Style guide: Tables
*/

/*
Basic table

Markup: templates/table-examples.hbs

<details open data-label="table-accessibility" aria-expanded="false">
  <summary>Accessibility &amp; browser testing</summary>
  <div class="accordion-panel">
  <strong>Passed</strong>:
    <ul>
      <li>HTML5 validation (<a href="http://validator.github.io/validator/" rel="external">Nu Html Checker</a>)</li>
      <li>WCAG:AA automated (<a href="http://squizlabs.github.io/HTML_CodeSniffer/Standards/WCAG2/" rel="external">HTML_CodeSniffer</a>)</li>
    </ul>
  <strong>Untested</strong>:
    <ul>
      <li>WCAG:AA manual</li>
      <li>Browser support &mdash; automated and manual</li>
    </ul>
  </div>
</details>

Style guide: Tables.1 Basic tables
*/

table {
  margin-bottom: $base-spacing;
}

.content-table {
  width: 100%;
  border-collapse: collapse;

  tr:nth-child(even) {
    background-color: $non-white;
  }

  td,
  th {
    border-bottom: solid 1px $light-grey;
    padding: $tiny-spacing;
    font-size: $small-font-size;
    text-align: left;

    @include media($tablet) {
      padding: $small-spacing;
      font-size: initial;
    }
  }

  thead {
    border-bottom: solid 2px $grey;
  }
}

/*
Calendar table

Markup: templates/table-calendar.hbs

<details open data-label="table-calendar-style-accessibility" aria-expanded="false">
  <summary>Accessibility &amp; browser testing</summary>
  <div class="accordion-panel">
  <strong>Passed</strong>:
    <ul>
      <li>HTML5 validation (<a href="http://validator.github.io/validator/" rel="external">Nu Html Checker</a>)</li>
      <li>WCAG:AA automated (<a href="http://squizlabs.github.io/HTML_CodeSniffer/Standards/WCAG2/" rel="external">HTML_CodeSniffer</a>)</li>
    </ul>
  <strong>Untested</strong>:
    <ul>
      <li>WCAG:AA manual</li>
      <li>Browser support &mdash; automated and manual</li>
    </ul>
  </div>
</details>

Style guide: Tables.2 Calendar table variant
*/
.calendar-table {
  width: 100%;
  margin-top: 2 * $base-spacing;

  caption {
    margin: 0 0 $small-spacing;
    font-size: rem(24);
    font-weight: 700;
    text-align: left;
  }

  tr {
    border-bottom: $tiny-spacing solid $white;
  }

  th {
    display: block;
    width: 100%;
    padding: $small-spacing $base-spacing;
    text-transform: uppercase;
    color: $aqua;

    @include media($mobile) {
      display: table-cell;
      width: 6 * $base-spacing;
    }

    span {
      font-size: rem(28);
      font-weight: $heading-font-weight;
      line-height: $base-heading-leading;
      display: block;
      margin: 0;
    }
  }

  td {
    display: block;
    margin: 0;
    padding: 0 $base-spacing $small-spacing;
    font-size: rem(19);
    font-weight: $heading-font-weight;
    text-align: center;

    @include media($mobile) {
      display: table-cell;
      padding-top: $small-spacing;
      border-left: $tiny-spacing solid $white;
      text-align: left;
    }

    .date-info {
      display: block;
      margin-top: 0;
      font-weight: 300;
      font-size: rem(16);
    }
  }

  th,
  td {
    background-color: $background-secondary-colour;
  }
}

/*
Accessibility

Tables should be used for data, never design.

Consider more accessible ways to format content before using a table:

- bullet points lists
- numbered lists
- definition lists.

Avoid tables with multiple header levels and spanned cells.

### Headers & captions

Title tables using the <a href="https://www.w3.org/wiki/HTML/Elements/caption" rel="external">`<caption>` element</a> inside the `<table>` element.

Row and column headers should be set with the <a href="https://www.w3.org/TR/html401/struct/tables.html#adef-scope" rel="external">`scope` attribute</a>.

Style guide: Tables.3 Accessibility
*/

/*
Accordions

Accordions help users find only the content they need.

The **expand/collapse all** feature will be provided soon &mdash; this will be mandatory if using a series of accordion elements.

***

This guidance is in part adapted from <a href="https://standards.usa.gov/getting-started/" rel="external">18F Draft US Web Design Standards</a> under <a href="https://creativecommons.org/publicdomain/zero/1.0/legalcode" rel="external">CC0 1.0 Universal</a>.

Style guide: Accordions
*/

/*
Content accordion

Use content accordions if the user only needs a selection of the information on a page.

Don't use an accordion if the user needs to see all of the information.

<details open data-label="accordions-accessibility" aria-expanded="false">
  <summary>Accessibility &amp; browser testing</summary>
  <div class="accordion-panel">
  <strong>Passed</strong>:
    <ul>
      <li>HTML5 validation (<a href="http://validator.github.io/validator/" rel="external">Nu Html Checker</a>)</li>
      <li>WCAG:AA automated (<a href="http://squizlabs.github.io/HTML_CodeSniffer/Standards/WCAG2/" rel="external">HTML_CodeSniffer</a>)</li>
    </ul>
  <strong>Untested</strong>:
    <ul>
      <li>WCAG:AA manual</li>
      <li>Browser support &mdash; automated and manual</li>
    </ul>
  </div>
</details>

Markup: templates/content-accordion.hbs

Style guide: Accordions.1 Content accordion
*/

/*
Controls accordion

Use controls accordions to make page controls easier to use.

<details open data-label="controls-accordions-accessibility" aria-expanded="false">
  <summary>Accessibility &amp; browser testing</summary>
  <div class="accordion-panel">
  <strong>Passed</strong>:
    <ul>
      <li>HTML5 validation (<a href="http://validator.github.io/validator/" rel="external">Nu Html Checker</a>)</li>
      <li>WCAG:AA automated (<a href="http://squizlabs.github.io/HTML_CodeSniffer/Standards/WCAG2/" rel="external">HTML_CodeSniffer</a>)</li>
    </ul>
  <strong>Untested</strong>:
    <ul>
      <li>WCAG:AA manual</li>
      <li>Browser support &mdash; automated and manual</li>
    </ul>
  </div>
</details>

Markup: templates/controls-accordion.hbs

Style guide: Accordions.2 Controls accordion
*/

/*
Usability

Don't use an accordion if the user needs to see all of the information. Structure and rewrite your content instead.

Use [definition or description lists](section-typography.html#guide-typography-6-lists) for glossaries instead of accordions.

Building accordions
- Keep accordion headings and labels short but descriptive.
- Accordions can be set to open or closed initially using `aria-expanded` property set to `true` or `false`.
- JavaScript behaviour is used to replace the browser default for `<details>`.
- For multiple accordion elements each `details` element must have its own `data-label` attribute.
- You can run a text/string search of accordion content, even when collapsed (the string stays hidden until the accordion is opened).

Style guide: Accordions.3 Usability
*/

%base-accordion {
  display: block;
  margin: $base-spacing 0 0;
  overflow: hidden;
}

%base-accordion-button {
  display: block;
  position: relative;
  width: 100%;
  height: auto;
  padding: $small-spacing;
  border-radius: $tiny-border-radius $tiny-border-radius 0 0;
  background-color: $background-secondary-colour;
  cursor: pointer;
  text-align: left;
  font-weight: $bold-font-weight;
  font-size: rem(20);
  transition: background-color $transition-timing-fast $transition-easing;

  &:last-child {
    border-bottom-width: 1px;
  }

  &:hover,
  &:focus {
    background-color: $border-colour;
    outline: none;
  }

  &::-webkit-details-marker {
    display: none;
  }

  &::before {
    @extend %icon-chevron-down--navy;

    content: '';
    position: absolute;
    top: .5em;
    bottom: .5em;
    right: $small-spacing;
    width: $medium-spacing;
    background-repeat: no-repeat;
    background-position: center center;
    background-size: 100% auto;
    transform: rotate(0deg);
    transition: transform $transition-timing $transition-easing;

    [aria-expanded='true'] & {
      transform: rotate(180deg);
    }
  }
}

%base-accordion-panel {
  display: block;
  height: auto;
  overflow: hidden;
  padding: $base-spacing $base-spacing $small-spacing;
  border-radius: $tiny-border-radius $tiny-border-radius 0 0;

  :first-child {
    margin-top: 0;
  }
}

details,
.accordion {
  @extend %base-accordion;

  border-color: $border-colour;
  border-width: 1px 0;
  border-style: solid;

  & + & {
    margin-top: 0;
    border-top: none;
  }
}

.accordion-button,
summary {
  @extend %base-accordion-button;

  [aria-expanded='true'] & {
    border-bottom: 1px solid $border-colour;
  }
}

.accordion-panel {
  @extend %base-accordion-panel;
}

.accordion--controls {
  @extend %base-accordion;

  margin-top: $small-spacing;
  border: none;

  summary {
    @extend %base-accordion-button;

    border: none;
    background-color: $lighter-aqua;
    font-size: $small-font-size;

    &:hover,
    &:focus {
      background-color: $light-aqua;
      color: $darker-aqua;
    }
  }

  .accordion-panel {
    @extend %base-accordion-panel;

    border: $small-spacing solid $lighter-aqua;
    border-top: none;
  }
}

/*
Typography

This framework uses basic styling and good typographic defaults for clear and consistent content.

This guidance may change to apply to only content inside an `article`.

Style guide: Typography
*/

/*
Typeface

We are currently testing the open source <a href="https://www.google.com/fonts/specimen/Open+Sans" rel="external">Open Sans family</a> in 3 styles.

Open Sans is a sans-serif font selected for accessibility.

<div class="guide-example--type"><h3>Open Sans regular 400</h3>
  <p>ABCDEFGHIJKLMNOPQRSTUVWXYZ<br />
  abcdefghijklmnopqrstuvwxyz<br />
  1234567890(!@#s%g.,?:;)</p>
</div>
<div class="guide-example--type"><h3>Open Sans regular 400 italic</h3>
  <p><em>ABCDEFGHIJKLMNOPQRSTUVWXYZ<br />
  abcdefghijklmnopqrstuvwxyz<br />
  1234567890(!@#s%g.,?:;)</em></p>
</div>
<div class="guide-example--type"><h3>Open Sans bold 700</h3>
  <p><strong class="very-bold">ABCDEFGHIJKLMNOPQRSTUVWXYZ<br />
  abcdefghijklmnopqrstuvwxyz<br />
  1234567890(!@#s%g.,?:;)</strong></p>
</div>

We are likely to change this to a different primary typeface.

Style guide: Typography.1 Typeface
*/

/*
Font stacks

```
$base-serif: 'Book Antiqua', Georgia, 'Bitstream Vera Serif', serif;
$base-sans-serif: 'Open Sans', Verdana, 'Bitstream Vera Sans', sans-serif;
$base-monospace: 'Lucida Sans Typewriter', 'Lucida Console', Monaco, 'Bitstream Vera Sans Mono', monospace;
```

We are currently testing the use of webfonts.

The font stacks should still achieve a high degree of coverage across a range of browsers and operating systems using the fall-backs (roughly 95% coverage).

You need to load webfonts through the <a href="https://github.com/typekit/webfontloader" rel="external">Google Web Font Loader</a> via `<script>` to add Open Sans via the HTML `head`. This supports modern browsers and older versions of Internet Explorer.

Style guide: Typography.1 Typeface.1 Font stacks
*/

/*
Accessibility

- Use just 1 font (Open Sans).
- Make line length less than 75 characters. Use grid boxes to limit length.
- Set `line-height` (leading) to at least 1.5 ([UI KIT uses 1.6](#guide-typography-3-spacing)).
- <a href="http://content-style-guide.apps.staging.digital.gov.au/writing-for-the-web/3-structure-your-page-for-readability.html" rel="external">Write short sentences</a>. Aim for less than 25 words.
- Use sentence case for most content. For example &lsquo;Sign up&rsquo; or &lsquo;Log out&rsquo; buttons.
- Use <a href="http://content-style-guide.apps.staging.digital.gov.au/az-indexes/t.html#titles" rel="external">title case for titles</a> like Department of Communications and the Arts.
- Don't write in all *italics* or CAPITALS.
- Avoid using **bold**. Bolding a word can help scannability. **But blocks of bold text are hard to read**.

Style guide: Typography.1 Typeface.2 Accessibility
*/

/*
Spacing

The framework sets spacing variables in ems relative to the base font's leading. This ensures horizontal and vertical rhythm through pages.

<p class="callout">Spacing will change in relation to the font size of the elements that use them. So don’t apply a <code>font-size</code> to a container element (eg a <code>footer</code>).</p>

The base font's leading (`line-height`) is set using the variable `$base-leading` (`$base-leading: 1.6`).

`$base-leading` is used to calculate 5 spacing values in ems:

- `$base-spacing: $base-leading * 1em`
- `$large-spacing: $base-spacing * 2`
- `$medium-spacing: $base-spacing * 0.75`
- `$small-spacing: $base-spacing / 2`
- `$tiny-spacing: $base-spacing / 4`.

We may change:

- `$base-spacing` to a figure that is easier to multiply and divide
- to using rems instead of ems, for consistency in calculations (in preference to relational proportionality in sizing).

Style guide: Typography.3 Spacing
*/

html {
  color: $body-text-colour;
  line-height: $base-leading;
  font-family: $base-font-family;
  font-weight: $base-font-weight;
}

/*
Headings & body copy

The types sizes are based on a perfect fourth modular scale.

Use `.gov-speak` styles for complex content, for example annual reports.

We are currently testing all styles for legibility and readability.

### Breakpoints

- Mobile (extra small devices): 8 columns, 420px maximum.
- Tablet (small devices): 12 columns, 768px maximum.
- Desktop (medium devices): 16 columns, 1200px maximum.

### Font size defaults

<table class="content-table">
  <caption>Global styles</caption>
  <tr>
    <th>Style</th>
    <th>Mobile (default)</th>
    <th>Tablet</th>
    <th>Desktop</th>
  </tr>
  <tr>
    <td>p, ol, ul, dt, dd, dl</td>
    <td>17px</td>
    <td>17px</td>
    <td>17px</td>
  </tr>
  <tr>
    <td>h1</td>
    <td>24px</td>
    <td>26px<br></td>
    <td>32px</td>
  </tr>
  <tr>
    <td>h2</td>
    <td>32px</td>
    <td>44px</td>
    <td>44px</td>
  </tr>
  <tr>
    <td>h3</td>
    <td>24px</td>
    <td>26px</td>
    <td>26px</td>
  </tr>
  <tr>
    <td>h4, h5, h6</td>
    <td>18px</td>
    <td>18px</td>
    <td>18px</td>
  </tr>
</table>

<table class="content-table">
  <caption><code>.gov-speak</code> style</caption>
  <tr>
    <th>Style</th>
    <th>Mobile (default)</th>
    <th>Tablet</th>
    <th>Desktop</th>
  </tr>
  <tr>
    <td>p, ol, ul, dt, dd, dl</td>
    <td>17px</td>
    <td>17px</td>
    <td>17px</td>
  </tr>
  <tr>
    <td>h1</td>
    <td>32px</td>
    <td>44px<br></td>
    <td>40px</td>
  </tr>
  <tr>
    <td>h2</td>
    <td>28px</td>
    <td>32px</td>
    <td>32px</td>
  </tr>
  <tr>
    <td>h3</td>
    <td>24px</td>
    <td>26px</td>
    <td>26px</td>
  </tr>
  <tr>
    <td>h4</td>
    <td>19px</td>
    <td>22px</td>
    <td>22px</td>
  </tr>
  <tr>
    <td>h5</td>
    <td>16px</td>
    <td>16px</td>
    <td>16px</td>
  </tr>
  <tr>
    <td>h6</td>
    <td>16px</td>
    <td>16px</td>
    <td>16px</td>
  </tr>
</table>

### Base size examples &mdash; global styles

Markup: templates/heading-body-styles.hbs

Style guide: Typography.4 Headings & body copy
*/

// Styling for headings
//
// Note that we style h5 and h6 are identical to h4.

h1,
h2,
h3,
h4 {
  line-height: $base-heading-leading;
  font-weight: $base-font-weight;
  margin-bottom: $tiny-spacing;
  margin-top: $base-spacing;
}

h1 {
  font-size: rem(24);
  font-weight: $bold-font-weight;
  margin-bottom: $small-spacing;

  @include media($tablet) {
    font-size: rem(28);
  }

  @include media($desktop) {
    font-size: rem(40);
  }

  &:first-of-type {
    margin-top: $tiny-spacing;
  }

  @include ie-lte(8) {
    font-size: 32px;
  }
}

h2 {
  font-size: rem(32);
  line-height: $small-leading;
  margin-top: $base-spacing;
  margin-bottom: 1em;

  @include media($tablet) {
    font-size: rem(40);
  }

  @include ie-lte(8) {
    font-size: 44px;
  }
}

h3 {
  font-size: rem(24);
  font-weight: $heading-font-weight;
  margin-top: $medium-spacing + ($small-spacing / 3); // 38.133px; was 34.4px from Alz.
  margin-bottom: $small-spacing;

  @include media($tablet) {
    font-size: rem(26);
  }

  @include ie-lte(8) {
    font-size: 26px;
  }
}

h4,
h5,
h6 {
  font-size: rem(18);
  font-weight: $heading-font-weight;

  @include ie-lte(8) {
    font-size: 18px;
  }
}

// Document this later.
.gov-speak {
  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    line-height: $base-heading-leading;
    font-weight: $heading-font-weight;
    margin-bottom: $tiny-spacing;
    margin-top: $base-spacing;
  }

  h1 {
    font-size: rem(32);
    line-height: $small-leading;

    @include media($tablet) {
      font-size: rem(44);
    }

    @include media($desktop) {
      font-size: rem(40);
    }

    &:first-of-type {
      margin-top: $tiny-spacing;
    }
  }

  h2 {
    font-size: rem(28);
    line-height: $small-leading;

    @include media($tablet) {
      font-size: rem(32);
    }
  }

  h3 {
    font-size: rem(24);
    font-weight: $heading-font-weight;

    @include media($tablet) {
      font-size: rem(26);
    }
  }

  h4 {
    font-size: rem(19);
    font-weight: $heading-font-weight;

    @include media($tablet) {
      font-size: rem(22);
    }
  }

  h5 {
    font-size: rem(17);
    font-weight: $heading-font-weight;
  }

  h6 {
    font-size: rem(17);
    font-weight: $heading-font-weight;
  }
}

/*
Line length

UI Kit applies a maximum width to typographic elements that appear within the main content container. This maintains a readable line length.

A max-width of 38rem (about 70 characters) is applied to these elements:
- h1 - h5
- p
- li
- dl

<div class="callout">

If you'd like to include an element that spans across the maximum available space, apply the class `.content-full-width`.

</div>

### Resources
- [Typography -  Accessibility](/section-typography.html#guide-typography-1-typeface-2-accessibility)
- <a href="https://www.smashingmagazine.com/2014/09/balancing-line-length-font-size-responsive-web-design/#line-length-measure-and-reading" rel="external">Size Matters, Smashing Magazine</a>

Markup: templates/content-full-width.hbs

Style guide: Typography.4 Line length
*/

.content-main {
  @include media($desktop) {
    h1,
    h2,
    h3,
    h4,
    h5,
    p,
    li,
    dl {
      max-width: 38rem;
    }

    .content-full-width {
      max-width: none;
      width: 100%;
    }
  }
}

code,
pre,
samp,
kbd {
  font-family: $base-monospace;
  font-size: $small-font-size;
}

/*
Show keyboard input

Use the <a href="http://w3c.github.io/html/textlevel-semantics.html#the-kbd-element" rel="external"><code>kbd</code> element</a> to show users which key to press.

Markup: Copy text to clipboard using <kbd>Ctrl</kbd> + <kbd>C</kbd>.

<details open data-label="kbd-accessibility" aria-expanded="false">
  <summary>Accessibility &amp; browser testing</summary>
  <div class="accordion-panel">
  <strong>Passed</strong>:
    <ul>
      <li>HTML5 validation (<a href="http://validator.github.io/validator/" rel="external">Nu Html Checker</a>)</li>
      <li>WCAG:AA automated (<a href="http://squizlabs.github.io/HTML_CodeSniffer/Standards/WCAG2/" rel="external">HTML_CodeSniffer</a>)</li>
    </ul>
  <strong>Untested</strong>:
    <ul>
      <li>WCAG:AA manual</li>
      <li>Browser support &mdash; automated and manual</li>
    </ul>
  </div>
</details>

Style guide: Typography.5 Keyboard input
*/

kbd {
  display: inline-block;
  border: solid 1px $light-aqua;
  border-radius: $base-border-radius;
  box-shadow: 0 1px 0 0 $light-aqua;
  background-color: $non-white;
  color: $dark-aqua;
  text-align: center;
  font-size: $small-font-size;
  padding: 0 $small-spacing;
  margin: 0 $tiny-spacing;
}

strong {
  font-weight: $bold-font-weight;

  // Huh?
  &.very-bold {
    font-weight: $heading-font-weight;
  }
}

// For display font sizing.
.display {
  @extend h2;
}

// More specialised typography.
//
// For abstracts or page introductory paragraphs.
.abstract {
  margin: $medium-spacing 0 ($base-spacing * 1.25);
  border-bottom: 1px solid $border-colour;

  p {
    font-size: rem(19);
    font-weight: $base-font-weight;

    @include media($tablet) {
      font-size: rem(21);
    }

    @include media($desktop) {
      font-size: rem(24);
    }
  }
}

// To be deprecated as of v2.0
//
// We are retaining this so that p.abstract is possible. Please use div.abstract p.
p {
  &.abstract {
    margin: $small-spacing 0 ($medium-spacing * 1.25);
    padding-bottom: $medium-spacing;
    border-bottom: 1px solid $border-colour;
    font-size: rem(19);

    @include media($tablet) {
      font-size: rem(21);
    }

    @include media($desktop) {
      font-size: rem(24);
    }
  }
}

hr {
  border-color: $border-colour;
  border-style: solid;
  border-bottom: none;
  margin-top: $base-spacing;
  margin-bottom: $base-spacing;
}

/*
Lists

The framework provides list styles for:

- unordered lists (bullet point lists)
- ordered lists (numbered)
- definition lists (terms and definitions).

More [complex list styles](section-list-styles.html) are available.

Markup: templates/list-examples.hbs

Style guide: Typography.6 Lists
*/

ul,
ol {
  padding-left: ($base-spacing + $small-spacing);

  ul {
    list-style-type: disc;
  }
}

ul,
ol,
dl,
p,
dt,
dd {
  font-size: rem(16);
  margin-top: 0; // Check up on where margin-top is coming from...
  margin-bottom: $medium-spacing;
  line-height: $base-spacing;

  @include media($tablet) {
    font-size: rem(17);
  }
}

li {
  margin-bottom: ($small-spacing / 1.5);

  ul,
  ol {
    margin-top: $tiny-spacing;
    margin-bottom: 0;
  }
}

dt {
  display: inline-block;
  font-weight: $bold-font-weight;
  margin-top: $tiny-spacing;

  &:first-of-type {
    margin-top: 0;
  }
}

/*
Callouts & warnings

There are 3 classes for drawing the user's attention:

- `.callout`
- `.callout--warning` for warnings
- `.callout--calendar-event` for dates.

You can use these on paragraphs (`<p>`), or on a wrapping element, like a `<div>` or an `<aside>`.

Markup: templates/callouts-examples.hbs

<details open data-label="callouts-accessibility" aria-expanded="false">
  <summary>Accessibility &amp; browser testing</summary>
  <div class="accordion-panel">
  <strong>Passed</strong>:
    <ul>
      <li>HTML5 validation (<a href="http://validator.github.io/validator/" rel="external">Nu Html Checker</a>)</li>
      <li>WCAG:AA automated (<a href="http://squizlabs.github.io/HTML_CodeSniffer/Standards/WCAG2/" rel="external">HTML_CodeSniffer</a>)</li>
    </ul>
  <strong>Untested</strong>:
    <ul>
      <li>WCAG:AA manual</li>
      <li>Browser support &mdash; automated and manual</li>
    </ul>
  </div>
</details>

Style guide: Typography.7 Callouts & warnings
*/

%base-callout {
  margin: $base-spacing $small-spacing;
  padding: $medium-spacing $medium-spacing $medium-spacing $base-spacing;
  border-radius: $tiny-border-radius;
  box-shadow: 0 0 8px $light-grey;
}

.callout {
  @extend %base-callout;
}

.callout--warning {
  @extend %base-callout;

  border-left: $tiny-spacing solid $red;
  padding-left: $base-spacing - $tiny-spacing;
}

.callout--calendar-event {
  @extend %base-callout;

  margin-left: 0;
  box-shadow: none;
  padding-bottom: $small-spacing;
  background-color: $callout-bg-light-colour;

  time,
  .event-name {
    font-size: rem(32);
    line-height: $small-leading;
  }

  time {
    display: block;
    font-weight: $heading-font-weight;
  }

  .event-name {
    font-weight: $base-font-weight;
  }

  .next-event {
    display: block;
    font-size: rem(17);
    font-weight: $base-font-weight;
    margin-bottom: $tiny-spacing;
  }
}

/*
Badges

There is styling for badges to indicate status.

Markup: templates/badges.hbs

<details open data-label="badges-accessibility" aria-expanded="false">
  <summary>Accessibility &amp; browser testing</summary>
  <div class="accordion-panel">
  <strong>Passed</strong>:
    <ul>
      <li>HTML5 validation (<a href="http://validator.github.io/validator/" rel="external">Nu Html Checker</a>)</li>
      <li>WCAG:AA automated (<a href="http://squizlabs.github.io/HTML_CodeSniffer/Standards/WCAG2/" rel="external">HTML_CodeSniffer</a>)</li>
    </ul>
  <strong>Untested</strong>:
    <ul>
      <li>WCAG:AA manual</li>
      <li>Browser support &mdash; automated and manual</li>
    </ul>
  </div>
</details>

Style guide: Typography.8 Badges
*/

$badges: (
  'default':  $badge-colour--default,
  'alpha':    $badge-colour--alpha,
  'beta':     $badge-colour--beta,
  'error':    $badge-colour--error,
  'success':  $badge-colour--success,
);

@each $badge-type, $colour in $badges {
  .badge--#{$badge-type} {
    display: inline-block;
    background-color: $colour;
    border-radius: $large-border-radius;
    padding: $tiny-spacing $small-spacing;
    line-height: 1;
    letter-spacing: 1px;
    color: lighten($colour, 75%);
    font-size: rem(14);
  }
}

/*
Quotations

There are 2 ways of using quotes:

- **in-line quoting** using `q` element (adds quotation marks to either side of the in-line quotation)
- **block quotes** via `blockquote`:
 - standard block quote
 - editorial block quote (pull quote) with larger size text.

`blockquote` is a block-level element that can contain in-line elements. So they can nest:

- multiple paragraphs, lists, etc
- another `blockquote`
- the `footer` element to provide citations using `<cite>`.

Markup: templates/quotation-examples.hbs

<details open data-label="blockquote-accessibility" aria-expanded="false">
  <summary>Accessibility &amp; browser testing</summary>
  <div class="accordion-panel">
  <strong>Passed</strong>:
    <ul>
      <li>HTML5 validation (<a href="http://validator.github.io/validator/" rel="external">Nu Html Checker</a>)</li>
      <li>WCAG:AA automated (<a href="http://squizlabs.github.io/HTML_CodeSniffer/Standards/WCAG2/" rel="external">HTML_CodeSniffer</a>)</li>
    </ul>
  <strong>Untested</strong>:
    <ul>
      <li>WCAG:AA manual</li>
      <li>Browser support &mdash; automated and manual</li>
    </ul>
  </div>
</details>

Style guide: Typography.9 Quotations
*/

blockquote {
  margin: $medium-spacing 0;
  padding: $small-spacing ($base-spacing + $small-spacing);
  background-color: $background-secondary-colour;
  font-family: $base-serif;
  quotes: '\201C''\201D''\2018''\2019';

  &.pullquote {
    padding: 0;
    background-color: $background-colour;

    p {
      font-size: rem(24);
      line-height: $base-leading;
      text-align: center;
      font-weight: $base-font-weight;
      margin-top: $base-spacing;

      @include media($tablet) {
        font-size: rem(26);
      }
    }

    // Support: IE7 does not properly support pseudo elements `:before`/`:after`: http://caniuse.com/#feat=css-sel2

    &::before,
    &::after {
      text-align: center;
      margin: 0;
    }
  }

  &::before,
  &::after {
    display: block;
    height: 0;
    font-family: $base-serif;
    font-size: rem(43);
    color: $aqua;
  }

  &::before {
    margin-left: -($small-spacing * 0.75);
    padding-bottom: $tiny-spacing;
    content: open-quote;
  }

  &::after {
    margin-right: -($small-spacing * 0.75);
    margin-top: -($small-spacing);
    padding-bottom: $medium-spacing;
    text-align: right;
    content: close-quote;
  }

  footer {
    margin-top: $medium-spacing;
    padding-top: $tiny-spacing;
    border-top: 1px solid $light-grey;
  }

  cite {
    display: inline-block;
    font-family: $base-sans-serif;

    &::before {
      content: 'Citation: ';
      text-transform: lowercase;
      font-variant: small-caps;
      letter-spacing: 1px;
      color: $body-text-colour;
    }
  }

  // So that nested blockquotes do not break the vertical rhythm.
  blockquote {
    margin-top: 0;
    margin-bottom: 0;
    padding-top: 0;
    padding-bottom: 0;
  }
}

q {
  // Investigate: switching to html entities?
  quotes: '“' '”' '‘' '’' '“' '”' '‘' '’';
}

cite {
  font-style: $base-font-style;
}

article {
  h1:first-of-type {
    margin-top: 0;
  }
}

// Shameless nicked from http://refills.bourbon.io/components/#er-toc-id-17

.video {
  margin-bottom: $base-spacing;

  .video-wrapper {
    height: 0;
    overflow: hidden;
    padding-bottom: 56.25%; // For ratio 16:9. 75% if ratio is 4:3
    position: relative;

    embed,
    object,
    iframe {
      @include position(absolute, 0 null null 0);
      @include size(100%);

      border: none;
    }
  }
}


